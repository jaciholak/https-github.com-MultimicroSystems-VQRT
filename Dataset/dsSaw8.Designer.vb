'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsSaw8"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsSaw8
    Inherits Global.System.Data.DataSet
    
    Private tablemfglookup2 As mfglookup2DataTable
    
    Private tableproject As projectDataTable
    
    Private tableprojectcust As projectcustDataTable
    
    Private tablequote As quoteDataTable
    
    Private tablequtlineprice As qutlinepriceDataTable
    
    Private tablequtnotes As qutnotesDataTable
    
    Private tablequtslssplit As qutslssplitDataTable
    
    Private tablesls999 As sls999DataTable
    
    Private tableQUTLU1 As QUTLU1DataTable
    
    Private tableQuoteRealLU As QuoteRealLUDataTable
    
    Private tablequotelines As quotelinesDataTable
    
    Private tablenamedetail As namedetailDataTable
    
    Private tablenamedefaults As namedefaultsDataTable
    
    Private tableadmingroup As admingroupDataTable
    
    Private tableadminuser As adminuserDataTable
    
    Private tablenamecontact As namecontactDataTable
    
    Private tableQuoteRealNDUL As QuoteRealNDULDataTable
    
    Private tableSpecRegFollowUp As SpecRegFollowUpDataTable
    
    Private relationfk_qutlineprice As Global.System.Data.DataRelation
    
    Private relationfk_quotelines As Global.System.Data.DataRelation
    
    Private relationfk_quote_1 As Global.System.Data.DataRelation
    
    Private relationfk_qutnotes As Global.System.Data.DataRelation
    
    Private relationfk_qutslssplit As Global.System.Data.DataRelation
    
    Private relationfk_qutnotes1 As Global.System.Data.DataRelation
    
    Private relationfk_qutslssplit1 As Global.System.Data.DataRelation
    
    Private relationfk_quotelines1 As Global.System.Data.DataRelation
    
    Private relationFKNameDefaults As Global.System.Data.DataRelation
    
    Private relationFKContactCode As Global.System.Data.DataRelation
    
    Private _relationFK_qutnotes As Global.System.Data.DataRelation
    
    Private _relationFK_qutslssplit As Global.System.Data.DataRelation
    
    Private _relationFK_quotelines As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("mfglookup2")) Is Nothing) Then
                MyBase.Tables.Add(New mfglookup2DataTable(ds.Tables("mfglookup2")))
            End If
            If (Not (ds.Tables("project")) Is Nothing) Then
                MyBase.Tables.Add(New projectDataTable(ds.Tables("project")))
            End If
            If (Not (ds.Tables("projectcust")) Is Nothing) Then
                MyBase.Tables.Add(New projectcustDataTable(ds.Tables("projectcust")))
            End If
            If (Not (ds.Tables("quote")) Is Nothing) Then
                MyBase.Tables.Add(New quoteDataTable(ds.Tables("quote")))
            End If
            If (Not (ds.Tables("qutlineprice")) Is Nothing) Then
                MyBase.Tables.Add(New qutlinepriceDataTable(ds.Tables("qutlineprice")))
            End If
            If (Not (ds.Tables("qutnotes")) Is Nothing) Then
                MyBase.Tables.Add(New qutnotesDataTable(ds.Tables("qutnotes")))
            End If
            If (Not (ds.Tables("qutslssplit")) Is Nothing) Then
                MyBase.Tables.Add(New qutslssplitDataTable(ds.Tables("qutslssplit")))
            End If
            If (Not (ds.Tables("sls999")) Is Nothing) Then
                MyBase.Tables.Add(New sls999DataTable(ds.Tables("sls999")))
            End If
            If (Not (ds.Tables("QUTLU1")) Is Nothing) Then
                MyBase.Tables.Add(New QUTLU1DataTable(ds.Tables("QUTLU1")))
            End If
            If (Not (ds.Tables("QuoteRealLU")) Is Nothing) Then
                MyBase.Tables.Add(New QuoteRealLUDataTable(ds.Tables("QuoteRealLU")))
            End If
            If (Not (ds.Tables("quotelines")) Is Nothing) Then
                MyBase.Tables.Add(New quotelinesDataTable(ds.Tables("quotelines")))
            End If
            If (Not (ds.Tables("namedetail")) Is Nothing) Then
                MyBase.Tables.Add(New namedetailDataTable(ds.Tables("namedetail")))
            End If
            If (Not (ds.Tables("namedefaults")) Is Nothing) Then
                MyBase.Tables.Add(New namedefaultsDataTable(ds.Tables("namedefaults")))
            End If
            If (Not (ds.Tables("admingroup")) Is Nothing) Then
                MyBase.Tables.Add(New admingroupDataTable(ds.Tables("admingroup")))
            End If
            If (Not (ds.Tables("adminuser")) Is Nothing) Then
                MyBase.Tables.Add(New adminuserDataTable(ds.Tables("adminuser")))
            End If
            If (Not (ds.Tables("namecontact")) Is Nothing) Then
                MyBase.Tables.Add(New namecontactDataTable(ds.Tables("namecontact")))
            End If
            If (Not (ds.Tables("QuoteRealNDUL")) Is Nothing) Then
                MyBase.Tables.Add(New QuoteRealNDULDataTable(ds.Tables("QuoteRealNDUL")))
            End If
            If (Not (ds.Tables("SpecRegFollowUp")) Is Nothing) Then
                MyBase.Tables.Add(New SpecRegFollowUpDataTable(ds.Tables("SpecRegFollowUp")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property mfglookup2() As mfglookup2DataTable
        Get
            Return Me.tablemfglookup2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property project() As projectDataTable
        Get
            Return Me.tableproject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property projectcust() As projectcustDataTable
        Get
            Return Me.tableprojectcust
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property quote() As quoteDataTable
        Get
            Return Me.tablequote
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qutlineprice() As qutlinepriceDataTable
        Get
            Return Me.tablequtlineprice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qutnotes() As qutnotesDataTable
        Get
            Return Me.tablequtnotes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qutslssplit() As qutslssplitDataTable
        Get
            Return Me.tablequtslssplit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sls999() As sls999DataTable
        Get
            Return Me.tablesls999
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QUTLU1() As QUTLU1DataTable
        Get
            Return Me.tableQUTLU1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QuoteRealLU() As QuoteRealLUDataTable
        Get
            Return Me.tableQuoteRealLU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property quotelines() As quotelinesDataTable
        Get
            Return Me.tablequotelines
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property namedetail() As namedetailDataTable
        Get
            Return Me.tablenamedetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property namedefaults() As namedefaultsDataTable
        Get
            Return Me.tablenamedefaults
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property admingroup() As admingroupDataTable
        Get
            Return Me.tableadmingroup
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property adminuser() As adminuserDataTable
        Get
            Return Me.tableadminuser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property namecontact() As namecontactDataTable
        Get
            Return Me.tablenamecontact
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QuoteRealNDUL() As QuoteRealNDULDataTable
        Get
            Return Me.tableQuoteRealNDUL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpecRegFollowUp() As SpecRegFollowUpDataTable
        Get
            Return Me.tableSpecRegFollowUp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsSaw8 = CType(MyBase.Clone,dsSaw8)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("mfglookup2")) Is Nothing) Then
                MyBase.Tables.Add(New mfglookup2DataTable(ds.Tables("mfglookup2")))
            End If
            If (Not (ds.Tables("project")) Is Nothing) Then
                MyBase.Tables.Add(New projectDataTable(ds.Tables("project")))
            End If
            If (Not (ds.Tables("projectcust")) Is Nothing) Then
                MyBase.Tables.Add(New projectcustDataTable(ds.Tables("projectcust")))
            End If
            If (Not (ds.Tables("quote")) Is Nothing) Then
                MyBase.Tables.Add(New quoteDataTable(ds.Tables("quote")))
            End If
            If (Not (ds.Tables("qutlineprice")) Is Nothing) Then
                MyBase.Tables.Add(New qutlinepriceDataTable(ds.Tables("qutlineprice")))
            End If
            If (Not (ds.Tables("qutnotes")) Is Nothing) Then
                MyBase.Tables.Add(New qutnotesDataTable(ds.Tables("qutnotes")))
            End If
            If (Not (ds.Tables("qutslssplit")) Is Nothing) Then
                MyBase.Tables.Add(New qutslssplitDataTable(ds.Tables("qutslssplit")))
            End If
            If (Not (ds.Tables("sls999")) Is Nothing) Then
                MyBase.Tables.Add(New sls999DataTable(ds.Tables("sls999")))
            End If
            If (Not (ds.Tables("QUTLU1")) Is Nothing) Then
                MyBase.Tables.Add(New QUTLU1DataTable(ds.Tables("QUTLU1")))
            End If
            If (Not (ds.Tables("QuoteRealLU")) Is Nothing) Then
                MyBase.Tables.Add(New QuoteRealLUDataTable(ds.Tables("QuoteRealLU")))
            End If
            If (Not (ds.Tables("quotelines")) Is Nothing) Then
                MyBase.Tables.Add(New quotelinesDataTable(ds.Tables("quotelines")))
            End If
            If (Not (ds.Tables("namedetail")) Is Nothing) Then
                MyBase.Tables.Add(New namedetailDataTable(ds.Tables("namedetail")))
            End If
            If (Not (ds.Tables("namedefaults")) Is Nothing) Then
                MyBase.Tables.Add(New namedefaultsDataTable(ds.Tables("namedefaults")))
            End If
            If (Not (ds.Tables("admingroup")) Is Nothing) Then
                MyBase.Tables.Add(New admingroupDataTable(ds.Tables("admingroup")))
            End If
            If (Not (ds.Tables("adminuser")) Is Nothing) Then
                MyBase.Tables.Add(New adminuserDataTable(ds.Tables("adminuser")))
            End If
            If (Not (ds.Tables("namecontact")) Is Nothing) Then
                MyBase.Tables.Add(New namecontactDataTable(ds.Tables("namecontact")))
            End If
            If (Not (ds.Tables("QuoteRealNDUL")) Is Nothing) Then
                MyBase.Tables.Add(New QuoteRealNDULDataTable(ds.Tables("QuoteRealNDUL")))
            End If
            If (Not (ds.Tables("SpecRegFollowUp")) Is Nothing) Then
                MyBase.Tables.Add(New SpecRegFollowUpDataTable(ds.Tables("SpecRegFollowUp")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablemfglookup2 = CType(MyBase.Tables("mfglookup2"),mfglookup2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablemfglookup2) Is Nothing) Then
                Me.tablemfglookup2.InitVars
            End If
        End If
        Me.tableproject = CType(MyBase.Tables("project"),projectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproject) Is Nothing) Then
                Me.tableproject.InitVars
            End If
        End If
        Me.tableprojectcust = CType(MyBase.Tables("projectcust"),projectcustDataTable)
        If (initTable = true) Then
            If (Not (Me.tableprojectcust) Is Nothing) Then
                Me.tableprojectcust.InitVars
            End If
        End If
        Me.tablequote = CType(MyBase.Tables("quote"),quoteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablequote) Is Nothing) Then
                Me.tablequote.InitVars
            End If
        End If
        Me.tablequtlineprice = CType(MyBase.Tables("qutlineprice"),qutlinepriceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablequtlineprice) Is Nothing) Then
                Me.tablequtlineprice.InitVars
            End If
        End If
        Me.tablequtnotes = CType(MyBase.Tables("qutnotes"),qutnotesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablequtnotes) Is Nothing) Then
                Me.tablequtnotes.InitVars
            End If
        End If
        Me.tablequtslssplit = CType(MyBase.Tables("qutslssplit"),qutslssplitDataTable)
        If (initTable = true) Then
            If (Not (Me.tablequtslssplit) Is Nothing) Then
                Me.tablequtslssplit.InitVars
            End If
        End If
        Me.tablesls999 = CType(MyBase.Tables("sls999"),sls999DataTable)
        If (initTable = true) Then
            If (Not (Me.tablesls999) Is Nothing) Then
                Me.tablesls999.InitVars
            End If
        End If
        Me.tableQUTLU1 = CType(MyBase.Tables("QUTLU1"),QUTLU1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableQUTLU1) Is Nothing) Then
                Me.tableQUTLU1.InitVars
            End If
        End If
        Me.tableQuoteRealLU = CType(MyBase.Tables("QuoteRealLU"),QuoteRealLUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQuoteRealLU) Is Nothing) Then
                Me.tableQuoteRealLU.InitVars
            End If
        End If
        Me.tablequotelines = CType(MyBase.Tables("quotelines"),quotelinesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablequotelines) Is Nothing) Then
                Me.tablequotelines.InitVars
            End If
        End If
        Me.tablenamedetail = CType(MyBase.Tables("namedetail"),namedetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tablenamedetail) Is Nothing) Then
                Me.tablenamedetail.InitVars
            End If
        End If
        Me.tablenamedefaults = CType(MyBase.Tables("namedefaults"),namedefaultsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablenamedefaults) Is Nothing) Then
                Me.tablenamedefaults.InitVars
            End If
        End If
        Me.tableadmingroup = CType(MyBase.Tables("admingroup"),admingroupDataTable)
        If (initTable = true) Then
            If (Not (Me.tableadmingroup) Is Nothing) Then
                Me.tableadmingroup.InitVars
            End If
        End If
        Me.tableadminuser = CType(MyBase.Tables("adminuser"),adminuserDataTable)
        If (initTable = true) Then
            If (Not (Me.tableadminuser) Is Nothing) Then
                Me.tableadminuser.InitVars
            End If
        End If
        Me.tablenamecontact = CType(MyBase.Tables("namecontact"),namecontactDataTable)
        If (initTable = true) Then
            If (Not (Me.tablenamecontact) Is Nothing) Then
                Me.tablenamecontact.InitVars
            End If
        End If
        Me.tableQuoteRealNDUL = CType(MyBase.Tables("QuoteRealNDUL"),QuoteRealNDULDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQuoteRealNDUL) Is Nothing) Then
                Me.tableQuoteRealNDUL.InitVars
            End If
        End If
        Me.tableSpecRegFollowUp = CType(MyBase.Tables("SpecRegFollowUp"),SpecRegFollowUpDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSpecRegFollowUp) Is Nothing) Then
                Me.tableSpecRegFollowUp.InitVars
            End If
        End If
        Me.relationfk_qutlineprice = Me.Relations("fk_qutlineprice")
        Me.relationfk_quotelines = Me.Relations("fk_quotelines")
        Me.relationfk_quote_1 = Me.Relations("fk_quote_1")
        Me.relationfk_qutnotes = Me.Relations("fk_qutnotes")
        Me.relationfk_qutslssplit = Me.Relations("fk_qutslssplit")
        Me.relationfk_qutnotes1 = Me.Relations("fk_qutnotes1")
        Me.relationfk_qutslssplit1 = Me.Relations("fk_qutslssplit1")
        Me.relationfk_quotelines1 = Me.Relations("fk_quotelines1")
        Me.relationFKNameDefaults = Me.Relations("FKNameDefaults")
        Me.relationFKContactCode = Me.Relations("FKContactCode")
        Me._relationFK_qutnotes = Me.Relations("FK_qutnotes")
        Me._relationFK_qutslssplit = Me.Relations("FK_qutslssplit")
        Me._relationFK_quotelines = Me.Relations("FK_quotelines")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsSaw8"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsSaw8.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablemfglookup2 = New mfglookup2DataTable()
        MyBase.Tables.Add(Me.tablemfglookup2)
        Me.tableproject = New projectDataTable()
        MyBase.Tables.Add(Me.tableproject)
        Me.tableprojectcust = New projectcustDataTable()
        MyBase.Tables.Add(Me.tableprojectcust)
        Me.tablequote = New quoteDataTable()
        MyBase.Tables.Add(Me.tablequote)
        Me.tablequtlineprice = New qutlinepriceDataTable()
        MyBase.Tables.Add(Me.tablequtlineprice)
        Me.tablequtnotes = New qutnotesDataTable()
        MyBase.Tables.Add(Me.tablequtnotes)
        Me.tablequtslssplit = New qutslssplitDataTable()
        MyBase.Tables.Add(Me.tablequtslssplit)
        Me.tablesls999 = New sls999DataTable()
        MyBase.Tables.Add(Me.tablesls999)
        Me.tableQUTLU1 = New QUTLU1DataTable()
        MyBase.Tables.Add(Me.tableQUTLU1)
        Me.tableQuoteRealLU = New QuoteRealLUDataTable()
        MyBase.Tables.Add(Me.tableQuoteRealLU)
        Me.tablequotelines = New quotelinesDataTable()
        MyBase.Tables.Add(Me.tablequotelines)
        Me.tablenamedetail = New namedetailDataTable()
        MyBase.Tables.Add(Me.tablenamedetail)
        Me.tablenamedefaults = New namedefaultsDataTable()
        MyBase.Tables.Add(Me.tablenamedefaults)
        Me.tableadmingroup = New admingroupDataTable()
        MyBase.Tables.Add(Me.tableadmingroup)
        Me.tableadminuser = New adminuserDataTable()
        MyBase.Tables.Add(Me.tableadminuser)
        Me.tablenamecontact = New namecontactDataTable()
        MyBase.Tables.Add(Me.tablenamecontact)
        Me.tableQuoteRealNDUL = New QuoteRealNDULDataTable()
        MyBase.Tables.Add(Me.tableQuoteRealNDUL)
        Me.tableSpecRegFollowUp = New SpecRegFollowUpDataTable()
        MyBase.Tables.Add(Me.tableSpecRegFollowUp)
        Me.relationfk_qutlineprice = New Global.System.Data.DataRelation("fk_qutlineprice", New Global.System.Data.DataColumn() {Me.tablequotelines.LineIDColumn}, New Global.System.Data.DataColumn() {Me.tablequtlineprice.LineIDColumn}, false)
        Me.Relations.Add(Me.relationfk_qutlineprice)
        Me.relationfk_quotelines = New Global.System.Data.DataRelation("fk_quotelines", New Global.System.Data.DataColumn() {Me.tablequote.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequotelines.QuoteIDColumn}, false)
        Me.Relations.Add(Me.relationfk_quotelines)
        Me.relationfk_quote_1 = New Global.System.Data.DataRelation("fk_quote_1", New Global.System.Data.DataColumn() {Me.tableQUTLU1.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tablequote.ProjectIDColumn}, false)
        Me.Relations.Add(Me.relationfk_quote_1)
        Me.relationfk_qutnotes = New Global.System.Data.DataRelation("fk_qutnotes", New Global.System.Data.DataColumn() {Me.tablequote.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequtnotes.QuoteIDColumn}, false)
        Me.Relations.Add(Me.relationfk_qutnotes)
        Me.relationfk_qutslssplit = New Global.System.Data.DataRelation("fk_qutslssplit", New Global.System.Data.DataColumn() {Me.tablequote.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequtslssplit.QuoteIDColumn}, false)
        Me.Relations.Add(Me.relationfk_qutslssplit)
        Me.relationfk_qutnotes1 = New Global.System.Data.DataRelation("fk_qutnotes1", New Global.System.Data.DataColumn() {Me.tableQUTLU1.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequtnotes.QuoteIDColumn}, false)
        Me.Relations.Add(Me.relationfk_qutnotes1)
        Me.relationfk_qutslssplit1 = New Global.System.Data.DataRelation("fk_qutslssplit1", New Global.System.Data.DataColumn() {Me.tableQUTLU1.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequtslssplit.QuoteIDColumn}, false)
        Me.Relations.Add(Me.relationfk_qutslssplit1)
        Me.relationfk_quotelines1 = New Global.System.Data.DataRelation("fk_quotelines1", New Global.System.Data.DataColumn() {Me.tableQUTLU1.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequotelines.QuoteIDColumn}, false)
        Me.Relations.Add(Me.relationfk_quotelines1)
        Me.relationFKNameDefaults = New Global.System.Data.DataRelation("FKNameDefaults", New Global.System.Data.DataColumn() {Me.tablenamedetail.CodeColumn}, New Global.System.Data.DataColumn() {Me.tablenamedefaults.NCodeColumn}, false)
        Me.Relations.Add(Me.relationFKNameDefaults)
        Me.relationFKContactCode = New Global.System.Data.DataRelation("FKContactCode", New Global.System.Data.DataColumn() {Me.tablenamedetail.CodeColumn}, New Global.System.Data.DataColumn() {Me.tablenamecontact.CodeColumn}, false)
        Me.Relations.Add(Me.relationFKContactCode)
        Me._relationFK_qutnotes = New Global.System.Data.DataRelation("FK_qutnotes", New Global.System.Data.DataColumn() {Me.tableSpecRegFollowUp.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequtnotes.QuoteIDColumn}, false)
        Me.Relations.Add(Me._relationFK_qutnotes)
        Me._relationFK_qutslssplit = New Global.System.Data.DataRelation("FK_qutslssplit", New Global.System.Data.DataColumn() {Me.tableSpecRegFollowUp.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequtslssplit.QuoteIDColumn}, false)
        Me.Relations.Add(Me._relationFK_qutslssplit)
        Me._relationFK_quotelines = New Global.System.Data.DataRelation("FK_quotelines", New Global.System.Data.DataColumn() {Me.tableSpecRegFollowUp.QuoteIDColumn}, New Global.System.Data.DataColumn() {Me.tablequotelines.QuoteIDColumn}, false)
        Me.Relations.Add(Me._relationFK_quotelines)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializemfglookup2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeproject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeprojectcust() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializequote() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializequtlineprice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializequtnotes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializequtslssplit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializesls999() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeQUTLU1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeQuoteRealLU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializequotelines() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializenamedetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializenamedefaults() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeadmingroup() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeadminuser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializenamecontact() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeQuoteRealNDUL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSpecRegFollowUp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsSaw8 = New dsSaw8()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub mfglookup2RowChangeEventHandler(ByVal sender As Object, ByVal e As mfglookup2RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub projectRowChangeEventHandler(ByVal sender As Object, ByVal e As projectRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub projectcustRowChangeEventHandler(ByVal sender As Object, ByVal e As projectcustRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub quoteRowChangeEventHandler(ByVal sender As Object, ByVal e As quoteRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub qutlinepriceRowChangeEventHandler(ByVal sender As Object, ByVal e As qutlinepriceRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub qutnotesRowChangeEventHandler(ByVal sender As Object, ByVal e As qutnotesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub qutslssplitRowChangeEventHandler(ByVal sender As Object, ByVal e As qutslssplitRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub sls999RowChangeEventHandler(ByVal sender As Object, ByVal e As sls999RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub QUTLU1RowChangeEventHandler(ByVal sender As Object, ByVal e As QUTLU1RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub QuoteRealLURowChangeEventHandler(ByVal sender As Object, ByVal e As QuoteRealLURowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub quotelinesRowChangeEventHandler(ByVal sender As Object, ByVal e As quotelinesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub namedetailRowChangeEventHandler(ByVal sender As Object, ByVal e As namedetailRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub namedefaultsRowChangeEventHandler(ByVal sender As Object, ByVal e As namedefaultsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub admingroupRowChangeEventHandler(ByVal sender As Object, ByVal e As admingroupRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub adminuserRowChangeEventHandler(ByVal sender As Object, ByVal e As adminuserRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub namecontactRowChangeEventHandler(ByVal sender As Object, ByVal e As namecontactRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub QuoteRealNDULRowChangeEventHandler(ByVal sender As Object, ByVal e As QuoteRealNDULRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SpecRegFollowUpRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecRegFollowUpRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class mfglookup2DataTable
        Inherits Global.System.Data.TypedTableBase(Of mfglookup2Row)
        
        Private columncode As Global.System.Data.DataColumn
        
        Private columnFirmname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "mfglookup2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FirmnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirmname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As mfglookup2Row
            Get
                Return CType(Me.Rows(index),mfglookup2Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event mfglookup2RowChanging As mfglookup2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event mfglookup2RowChanged As mfglookup2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event mfglookup2RowDeleting As mfglookup2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event mfglookup2RowDeleted As mfglookup2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addmfglookup2Row(ByVal row As mfglookup2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addmfglookup2Row(ByVal code As String, ByVal Firmname As String) As mfglookup2Row
            Dim rowmfglookup2Row As mfglookup2Row = CType(Me.NewRow,mfglookup2Row)
            Dim columnValuesArray() As Object = New Object() {code, Firmname}
            rowmfglookup2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowmfglookup2Row)
            Return rowmfglookup2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As mfglookup2DataTable = CType(MyBase.Clone,mfglookup2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New mfglookup2DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncode = MyBase.Columns("code")
            Me.columnFirmname = MyBase.Columns("Firmname")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columnFirmname = New Global.System.Data.DataColumn("Firmname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirmname)
            Me.columncode.MaxLength = 8
            Me.columnFirmname.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newmfglookup2Row() As mfglookup2Row
            Return CType(Me.NewRow,mfglookup2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New mfglookup2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(mfglookup2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mfglookup2RowChangedEvent) Is Nothing) Then
                RaiseEvent mfglookup2RowChanged(Me, New mfglookup2RowChangeEvent(CType(e.Row,mfglookup2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mfglookup2RowChangingEvent) Is Nothing) Then
                RaiseEvent mfglookup2RowChanging(Me, New mfglookup2RowChangeEvent(CType(e.Row,mfglookup2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mfglookup2RowDeletedEvent) Is Nothing) Then
                RaiseEvent mfglookup2RowDeleted(Me, New mfglookup2RowChangeEvent(CType(e.Row,mfglookup2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mfglookup2RowDeletingEvent) Is Nothing) Then
                RaiseEvent mfglookup2RowDeleting(Me, New mfglookup2RowChangeEvent(CType(e.Row,mfglookup2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removemfglookup2Row(ByVal row As mfglookup2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "mfglookup2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class projectDataTable
        Inherits Global.System.Data.TypedTableBase(Of projectRow)
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnProjectName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnProjectFolder As Global.System.Data.DataColumn
        
        Private columnProjectControl As Global.System.Data.DataColumn
        
        Private columnMarketSegment As Global.System.Data.DataColumn
        
        Private columnEstimatedValue As Global.System.Data.DataColumn
        
        Private columnServiceCode As Global.System.Data.DataColumn
        
        Private columnLastChgBy As Global.System.Data.DataColumn
        
        Private columnLastChgDate As Global.System.Data.DataColumn
        
        Private columnProbability As Global.System.Data.DataColumn
        
        Private columnProjectDesc As Global.System.Data.DataColumn
        
        Private columnBidDate As Global.System.Data.DataColumn
        
        Private columnBidTime As Global.System.Data.DataColumn
        
        Private columnPRADate As Global.System.Data.DataColumn
        
        Private columnEstDelivDate As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnFollowBy As Global.System.Data.DataColumn
        
        Private columnOrderEntryBy As Global.System.Data.DataColumn
        
        Private columnShipmentBy As Global.System.Data.DataColumn
        
        Private columnRetrCode As Global.System.Data.DataColumn
        
        Private columnCSR As Global.System.Data.DataColumn
        
        Private columnSLSP As Global.System.Data.DataColumn
        
        Private columnProjMGR As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnProjectCode As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnDistPO As Global.System.Data.DataColumn
        
        Private columnReference As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnSell As Global.System.Data.DataColumn
        
        Private columnBilled As Global.System.Data.DataColumn
        
        Private columnPaid As Global.System.Data.DataColumn
        
        Private columnLockedBy As Global.System.Data.DataColumn
        
        Private columnLastSaveDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "project"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectFolderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectFolder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarketSegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EstimatedValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstimatedValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ServiceCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServiceCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProbabilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProbability
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRADateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRADate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EstDelivDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstDelivDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FollowByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFollowBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderEntryByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderEntryBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShipmentByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipmentBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RetrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjMGRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjMGR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DistPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BilledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LockedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLockedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastSaveDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastSaveDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As projectRow
            Get
                Return CType(Me.Rows(index),projectRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event projectRowChanging As projectRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event projectRowChanged As projectRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event projectRowDeleting As projectRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event projectRowDeleted As projectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddprojectRow(ByVal row As projectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddprojectRow( _
                    ByVal ProjectID As UInteger,  _
                    ByVal ProjectName As String,  _
                    ByVal Address As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal Country As String,  _
                    ByVal EntryDate As Date,  _
                    ByVal Status As String,  _
                    ByVal ProjectFolder As String,  _
                    ByVal ProjectControl As String,  _
                    ByVal MarketSegment As String,  _
                    ByVal EstimatedValue As Decimal,  _
                    ByVal ServiceCode As String,  _
                    ByVal LastChgBy As String,  _
                    ByVal LastChgDate As Date,  _
                    ByVal Probability As Decimal,  _
                    ByVal ProjectDesc As String,  _
                    ByVal BidDate As Date,  _
                    ByVal BidTime As System.TimeSpan,  _
                    ByVal PRADate As String,  _
                    ByVal EstDelivDate As String,  _
                    ByVal Password As String,  _
                    ByVal FollowBy As String,  _
                    ByVal OrderEntryBy As String,  _
                    ByVal ShipmentBy As String,  _
                    ByVal RetrCode As String,  _
                    ByVal CSR As String,  _
                    ByVal SLSP As String,  _
                    ByVal ProjMGR As String,  _
                    ByVal BranchCode As String,  _
                    ByVal ProjectCode As String,  _
                    ByVal Location As String,  _
                    ByVal DistPO As String,  _
                    ByVal Reference As String,  _
                    ByVal Cost As Decimal,  _
                    ByVal Sell As Decimal,  _
                    ByVal Billed As Decimal,  _
                    ByVal Paid As Decimal,  _
                    ByVal LockedBy As String,  _
                    ByVal LastSaveDate As Date) As projectRow
            Dim rowprojectRow As projectRow = CType(Me.NewRow,projectRow)
            Dim columnValuesArray() As Object = New Object() {ProjectID, ProjectName, Address, Address2, City, State, Zip, Country, EntryDate, Status, ProjectFolder, ProjectControl, MarketSegment, EstimatedValue, ServiceCode, LastChgBy, LastChgDate, Probability, ProjectDesc, BidDate, BidTime, PRADate, EstDelivDate, Password, FollowBy, OrderEntryBy, ShipmentBy, RetrCode, CSR, SLSP, ProjMGR, BranchCode, ProjectCode, Location, DistPO, Reference, Cost, Sell, Billed, Paid, LockedBy, LastSaveDate}
            rowprojectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowprojectRow)
            Return rowprojectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProjectID(ByVal ProjectID As UInteger) As projectRow
            Return CType(Me.Rows.Find(New Object() {ProjectID}),projectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As projectDataTable = CType(MyBase.Clone,projectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New projectDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnProjectName = MyBase.Columns("ProjectName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnProjectFolder = MyBase.Columns("ProjectFolder")
            Me.columnProjectControl = MyBase.Columns("ProjectControl")
            Me.columnMarketSegment = MyBase.Columns("MarketSegment")
            Me.columnEstimatedValue = MyBase.Columns("EstimatedValue")
            Me.columnServiceCode = MyBase.Columns("ServiceCode")
            Me.columnLastChgBy = MyBase.Columns("LastChgBy")
            Me.columnLastChgDate = MyBase.Columns("LastChgDate")
            Me.columnProbability = MyBase.Columns("Probability")
            Me.columnProjectDesc = MyBase.Columns("ProjectDesc")
            Me.columnBidDate = MyBase.Columns("BidDate")
            Me.columnBidTime = MyBase.Columns("BidTime")
            Me.columnPRADate = MyBase.Columns("PRADate")
            Me.columnEstDelivDate = MyBase.Columns("EstDelivDate")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnFollowBy = MyBase.Columns("FollowBy")
            Me.columnOrderEntryBy = MyBase.Columns("OrderEntryBy")
            Me.columnShipmentBy = MyBase.Columns("ShipmentBy")
            Me.columnRetrCode = MyBase.Columns("RetrCode")
            Me.columnCSR = MyBase.Columns("CSR")
            Me.columnSLSP = MyBase.Columns("SLSP")
            Me.columnProjMGR = MyBase.Columns("ProjMGR")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnProjectCode = MyBase.Columns("ProjectCode")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnDistPO = MyBase.Columns("DistPO")
            Me.columnReference = MyBase.Columns("Reference")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnSell = MyBase.Columns("Sell")
            Me.columnBilled = MyBase.Columns("Billed")
            Me.columnPaid = MyBase.Columns("Paid")
            Me.columnLockedBy = MyBase.Columns("LockedBy")
            Me.columnLastSaveDate = MyBase.Columns("LastSaveDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnProjectName = New Global.System.Data.DataColumn("ProjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnProjectFolder = New Global.System.Data.DataColumn("ProjectFolder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectFolder)
            Me.columnProjectControl = New Global.System.Data.DataColumn("ProjectControl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectControl)
            Me.columnMarketSegment = New Global.System.Data.DataColumn("MarketSegment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketSegment)
            Me.columnEstimatedValue = New Global.System.Data.DataColumn("EstimatedValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstimatedValue)
            Me.columnServiceCode = New Global.System.Data.DataColumn("ServiceCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServiceCode)
            Me.columnLastChgBy = New Global.System.Data.DataColumn("LastChgBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgBy)
            Me.columnLastChgDate = New Global.System.Data.DataColumn("LastChgDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgDate)
            Me.columnProbability = New Global.System.Data.DataColumn("Probability", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProbability)
            Me.columnProjectDesc = New Global.System.Data.DataColumn("ProjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectDesc)
            Me.columnBidDate = New Global.System.Data.DataColumn("BidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidDate)
            Me.columnBidTime = New Global.System.Data.DataColumn("BidTime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidTime)
            Me.columnPRADate = New Global.System.Data.DataColumn("PRADate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRADate)
            Me.columnEstDelivDate = New Global.System.Data.DataColumn("EstDelivDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstDelivDate)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnFollowBy = New Global.System.Data.DataColumn("FollowBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFollowBy)
            Me.columnOrderEntryBy = New Global.System.Data.DataColumn("OrderEntryBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderEntryBy)
            Me.columnShipmentBy = New Global.System.Data.DataColumn("ShipmentBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipmentBy)
            Me.columnRetrCode = New Global.System.Data.DataColumn("RetrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrCode)
            Me.columnCSR = New Global.System.Data.DataColumn("CSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSR)
            Me.columnSLSP = New Global.System.Data.DataColumn("SLSP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSP)
            Me.columnProjMGR = New Global.System.Data.DataColumn("ProjMGR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjMGR)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnProjectCode = New Global.System.Data.DataColumn("ProjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectCode)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnDistPO = New Global.System.Data.DataColumn("DistPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistPO)
            Me.columnReference = New Global.System.Data.DataColumn("Reference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnSell = New Global.System.Data.DataColumn("Sell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell)
            Me.columnBilled = New Global.System.Data.DataColumn("Billed", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilled)
            Me.columnPaid = New Global.System.Data.DataColumn("Paid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaid)
            Me.columnLockedBy = New Global.System.Data.DataColumn("LockedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLockedBy)
            Me.columnLastSaveDate = New Global.System.Data.DataColumn("LastSaveDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastSaveDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProjectID}, true))
            Me.columnProjectID.AllowDBNull = false
            Me.columnProjectID.Unique = true
            Me.columnProjectName.AllowDBNull = false
            Me.columnProjectName.MaxLength = 40
            Me.columnAddress.AllowDBNull = false
            Me.columnAddress.MaxLength = 35
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 35
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 20
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 10
            Me.columnZip.AllowDBNull = false
            Me.columnZip.MaxLength = 10
            Me.columnCountry.AllowDBNull = false
            Me.columnCountry.MaxLength = 20
            Me.columnEntryDate.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 6
            Me.columnProjectFolder.AllowDBNull = false
            Me.columnProjectFolder.MaxLength = 100
            Me.columnProjectControl.AllowDBNull = false
            Me.columnProjectControl.MaxLength = 1
            Me.columnMarketSegment.AllowDBNull = false
            Me.columnMarketSegment.MaxLength = 20
            Me.columnEstimatedValue.AllowDBNull = false
            Me.columnServiceCode.AllowDBNull = false
            Me.columnServiceCode.MaxLength = 20
            Me.columnLastChgBy.AllowDBNull = false
            Me.columnLastChgBy.MaxLength = 3
            Me.columnLastChgDate.AllowDBNull = false
            Me.columnProbability.AllowDBNull = false
            Me.columnProjectDesc.AllowDBNull = false
            Me.columnProjectDesc.MaxLength = 50
            Me.columnPRADate.AllowDBNull = false
            Me.columnPRADate.MaxLength = 8
            Me.columnEstDelivDate.AllowDBNull = false
            Me.columnEstDelivDate.MaxLength = 8
            Me.columnPassword.AllowDBNull = false
            Me.columnPassword.MaxLength = 20
            Me.columnFollowBy.AllowDBNull = false
            Me.columnFollowBy.MaxLength = 20
            Me.columnOrderEntryBy.AllowDBNull = false
            Me.columnOrderEntryBy.MaxLength = 10
            Me.columnShipmentBy.AllowDBNull = false
            Me.columnShipmentBy.MaxLength = 14
            Me.columnRetrCode.AllowDBNull = false
            Me.columnRetrCode.MaxLength = 15
            Me.columnCSR.AllowDBNull = false
            Me.columnCSR.MaxLength = 3
            Me.columnSLSP.AllowDBNull = false
            Me.columnSLSP.MaxLength = 3
            Me.columnProjMGR.AllowDBNull = false
            Me.columnProjMGR.MaxLength = 3
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnProjectCode.AllowDBNull = false
            Me.columnProjectCode.MaxLength = 10
            Me.columnLocation.AllowDBNull = false
            Me.columnLocation.MaxLength = 20
            Me.columnDistPO.AllowDBNull = false
            Me.columnDistPO.MaxLength = 25
            Me.columnReference.AllowDBNull = false
            Me.columnReference.MaxLength = 20
            Me.columnCost.AllowDBNull = false
            Me.columnSell.AllowDBNull = false
            Me.columnBilled.AllowDBNull = false
            Me.columnPaid.AllowDBNull = false
            Me.columnLockedBy.AllowDBNull = false
            Me.columnLockedBy.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewprojectRow() As projectRow
            Return CType(Me.NewRow,projectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New projectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(projectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.projectRowChangedEvent) Is Nothing) Then
                RaiseEvent projectRowChanged(Me, New projectRowChangeEvent(CType(e.Row,projectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.projectRowChangingEvent) Is Nothing) Then
                RaiseEvent projectRowChanging(Me, New projectRowChangeEvent(CType(e.Row,projectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.projectRowDeletedEvent) Is Nothing) Then
                RaiseEvent projectRowDeleted(Me, New projectRowChangeEvent(CType(e.Row,projectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.projectRowDeletingEvent) Is Nothing) Then
                RaiseEvent projectRowDeleting(Me, New projectRowChangeEvent(CType(e.Row,projectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveprojectRow(ByVal row As projectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "projectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class projectcustDataTable
        Inherits Global.System.Data.TypedTableBase(Of projectcustRow)
        
        Private columnProjectCustID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnQuoteCode As Global.System.Data.DataColumn
        
        Private columnNCode As Global.System.Data.DataColumn
        
        Private columnFirmName As Global.System.Data.DataColumn
        
        Private columnContactName As Global.System.Data.DataColumn
        
        Private columnSLSCode As Global.System.Data.DataColumn
        
        Private columnGot As Global.System.Data.DataColumn
        
        Private columnTypec As Global.System.Data.DataColumn
        
        Private columnMFGQuoteNumber As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnSell As Global.System.Data.DataColumn
        
        Private columnComm As Global.System.Data.DataColumn
        
        Private columnOverage As Global.System.Data.DataColumn
        
        Private columnQuoteToDate As Global.System.Data.DataColumn
        
        Private columnOrdDate As Global.System.Data.DataColumn
        
        Private columnNotGot As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnSPANumber As Global.System.Data.DataColumn
        
        Private columnSpecCross As Global.System.Data.DataColumn
        
        Private columnLotUnit As Global.System.Data.DataColumn
        
        Private columnLPCost As Global.System.Data.DataColumn
        
        Private columnLPSell As Global.System.Data.DataColumn
        
        Private columnLPComm As Global.System.Data.DataColumn
        
        Private columnLampsIncl As Global.System.Data.DataColumn
        
        Private columnTerms As Global.System.Data.DataColumn
        
        Private columnFOB As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnLeadTime As Global.System.Data.DataColumn
        
        Private columnLastChgDate As Global.System.Data.DataColumn
        
        Private columnLastChgBy As Global.System.Data.DataColumn
        
        Private columnRequested As Global.System.Data.DataColumn
        
        Private columnFileName As Global.System.Data.DataColumn
        
        Private columnJobName As Global.System.Data.DataColumn
        
        Private columnMarketSegment As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnBidDate As Global.System.Data.DataColumn
        
        Private columnSLSQ As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnRetrCode As Global.System.Data.DataColumn
        
        Private columnSelectCode As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnCSR As Global.System.Data.DataColumn
        
        Private columnLotUnit1 As Global.System.Data.DataColumn
        
        Private columnStockJob As Global.System.Data.DataColumn
        
        Private columnEnteredBy As Global.System.Data.DataColumn
        
        Private columnPRADate As Global.System.Data.DataColumn
        
        Private columnEstDelivDate As Global.System.Data.DataColumn
        
        Private columnFollowBy As Global.System.Data.DataColumn
        
        Private columnOrderEntryBy As Global.System.Data.DataColumn
        
        Private columnShipmentBy As Global.System.Data.DataColumn
        
        Private columnSpecifiers As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "projectcust"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectCustIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectCustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FirmNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirmName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContactNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MFGQuoteNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFGQuoteNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteToDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteToDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NotGotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotGot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPANumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPANumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCrossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCross
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPSellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LampsInclColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLampsIncl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TermsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LeadTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RequestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FileNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JobNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarketSegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RetrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SelectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotUnit1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotUnit1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StockJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EnteredByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnteredBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRADateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRADate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EstDelivDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstDelivDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FollowByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFollowBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderEntryByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderEntryBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShipmentByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipmentBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecifiersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecifiers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As projectcustRow
            Get
                Return CType(Me.Rows(index),projectcustRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event projectcustRowChanging As projectcustRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event projectcustRowChanged As projectcustRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event projectcustRowDeleting As projectcustRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event projectcustRowDeleted As projectcustRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddprojectcustRow(ByVal row As projectcustRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddprojectcustRow( _
                    ByVal ProjectCustID As UInteger,  _
                    ByVal ProjectID As UInteger,  _
                    ByVal QuoteCode As String,  _
                    ByVal NCode As String,  _
                    ByVal FirmName As String,  _
                    ByVal ContactName As String,  _
                    ByVal SLSCode As String,  _
                    ByVal Got As Boolean,  _
                    ByVal Typec As String,  _
                    ByVal MFGQuoteNumber As String,  _
                    ByVal Cost As Decimal,  _
                    ByVal Sell As Decimal,  _
                    ByVal Comm As Decimal,  _
                    ByVal Overage As Decimal,  _
                    ByVal QuoteToDate As Date,  _
                    ByVal OrdDate As Date,  _
                    ByVal NotGot As Boolean,  _
                    ByVal Comments As String,  _
                    ByVal SPANumber As String,  _
                    ByVal SpecCross As String,  _
                    ByVal LotUnit As String,  _
                    ByVal LPCost As Decimal,  _
                    ByVal LPSell As Decimal,  _
                    ByVal LPComm As Decimal,  _
                    ByVal LampsIncl As String,  _
                    ByVal Terms As String,  _
                    ByVal FOB As String,  _
                    ByVal QuoteID As UInteger,  _
                    ByVal BranchCode As String,  _
                    ByVal LeadTime As String,  _
                    ByVal LastChgDate As Date,  _
                    ByVal LastChgBy As String,  _
                    ByVal Requested As String,  _
                    ByVal FileName As String,  _
                    ByVal JobName As String,  _
                    ByVal MarketSegment As String,  _
                    ByVal EntryDate As Date,  _
                    ByVal BidDate As Date,  _
                    ByVal SLSQ As String,  _
                    ByVal Status As String,  _
                    ByVal RetrCode As String,  _
                    ByVal SelectCode As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal CSR As String,  _
                    ByVal LotUnit1 As String,  _
                    ByVal StockJob As String,  _
                    ByVal EnteredBy As String,  _
                    ByVal PRADate As String,  _
                    ByVal EstDelivDate As String,  _
                    ByVal FollowBy As String,  _
                    ByVal OrderEntryBy As String,  _
                    ByVal ShipmentBy As String,  _
                    ByVal Specifiers As String) As projectcustRow
            Dim rowprojectcustRow As projectcustRow = CType(Me.NewRow,projectcustRow)
            Dim columnValuesArray() As Object = New Object() {ProjectCustID, ProjectID, QuoteCode, NCode, FirmName, ContactName, SLSCode, Got, Typec, MFGQuoteNumber, Cost, Sell, Comm, Overage, QuoteToDate, OrdDate, NotGot, Comments, SPANumber, SpecCross, LotUnit, LPCost, LPSell, LPComm, LampsIncl, Terms, FOB, QuoteID, BranchCode, LeadTime, LastChgDate, LastChgBy, Requested, FileName, JobName, MarketSegment, EntryDate, BidDate, SLSQ, Status, RetrCode, SelectCode, City, State, CSR, LotUnit1, StockJob, EnteredBy, PRADate, EstDelivDate, FollowBy, OrderEntryBy, ShipmentBy, Specifiers}
            rowprojectcustRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowprojectcustRow)
            Return rowprojectcustRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProjectCustID(ByVal ProjectCustID As UInteger) As projectcustRow
            Return CType(Me.Rows.Find(New Object() {ProjectCustID}),projectcustRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As projectcustDataTable = CType(MyBase.Clone,projectcustDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New projectcustDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProjectCustID = MyBase.Columns("ProjectCustID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnQuoteCode = MyBase.Columns("QuoteCode")
            Me.columnNCode = MyBase.Columns("NCode")
            Me.columnFirmName = MyBase.Columns("FirmName")
            Me.columnContactName = MyBase.Columns("ContactName")
            Me.columnSLSCode = MyBase.Columns("SLSCode")
            Me.columnGot = MyBase.Columns("Got")
            Me.columnTypec = MyBase.Columns("Typec")
            Me.columnMFGQuoteNumber = MyBase.Columns("MFGQuoteNumber")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnSell = MyBase.Columns("Sell")
            Me.columnComm = MyBase.Columns("Comm")
            Me.columnOverage = MyBase.Columns("Overage")
            Me.columnQuoteToDate = MyBase.Columns("QuoteToDate")
            Me.columnOrdDate = MyBase.Columns("OrdDate")
            Me.columnNotGot = MyBase.Columns("NotGot")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnSPANumber = MyBase.Columns("SPANumber")
            Me.columnSpecCross = MyBase.Columns("SpecCross")
            Me.columnLotUnit = MyBase.Columns("LotUnit")
            Me.columnLPCost = MyBase.Columns("LPCost")
            Me.columnLPSell = MyBase.Columns("LPSell")
            Me.columnLPComm = MyBase.Columns("LPComm")
            Me.columnLampsIncl = MyBase.Columns("LampsIncl")
            Me.columnTerms = MyBase.Columns("Terms")
            Me.columnFOB = MyBase.Columns("FOB")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnLeadTime = MyBase.Columns("LeadTime")
            Me.columnLastChgDate = MyBase.Columns("LastChgDate")
            Me.columnLastChgBy = MyBase.Columns("LastChgBy")
            Me.columnRequested = MyBase.Columns("Requested")
            Me.columnFileName = MyBase.Columns("FileName")
            Me.columnJobName = MyBase.Columns("JobName")
            Me.columnMarketSegment = MyBase.Columns("MarketSegment")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnBidDate = MyBase.Columns("BidDate")
            Me.columnSLSQ = MyBase.Columns("SLSQ")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnRetrCode = MyBase.Columns("RetrCode")
            Me.columnSelectCode = MyBase.Columns("SelectCode")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnCSR = MyBase.Columns("CSR")
            Me.columnLotUnit1 = MyBase.Columns("LotUnit1")
            Me.columnStockJob = MyBase.Columns("StockJob")
            Me.columnEnteredBy = MyBase.Columns("EnteredBy")
            Me.columnPRADate = MyBase.Columns("PRADate")
            Me.columnEstDelivDate = MyBase.Columns("EstDelivDate")
            Me.columnFollowBy = MyBase.Columns("FollowBy")
            Me.columnOrderEntryBy = MyBase.Columns("OrderEntryBy")
            Me.columnShipmentBy = MyBase.Columns("ShipmentBy")
            Me.columnSpecifiers = MyBase.Columns("Specifiers")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProjectCustID = New Global.System.Data.DataColumn("ProjectCustID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectCustID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnQuoteCode = New Global.System.Data.DataColumn("QuoteCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteCode)
            Me.columnNCode = New Global.System.Data.DataColumn("NCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCode)
            Me.columnFirmName = New Global.System.Data.DataColumn("FirmName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirmName)
            Me.columnContactName = New Global.System.Data.DataColumn("ContactName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactName)
            Me.columnSLSCode = New Global.System.Data.DataColumn("SLSCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSCode)
            Me.columnGot = New Global.System.Data.DataColumn("Got", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGot)
            Me.columnTypec = New Global.System.Data.DataColumn("Typec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypec)
            Me.columnMFGQuoteNumber = New Global.System.Data.DataColumn("MFGQuoteNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFGQuoteNumber)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnSell = New Global.System.Data.DataColumn("Sell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell)
            Me.columnComm = New Global.System.Data.DataColumn("Comm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComm)
            Me.columnOverage = New Global.System.Data.DataColumn("Overage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverage)
            Me.columnQuoteToDate = New Global.System.Data.DataColumn("QuoteToDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteToDate)
            Me.columnOrdDate = New Global.System.Data.DataColumn("OrdDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdDate)
            Me.columnNotGot = New Global.System.Data.DataColumn("NotGot", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotGot)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnSPANumber = New Global.System.Data.DataColumn("SPANumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPANumber)
            Me.columnSpecCross = New Global.System.Data.DataColumn("SpecCross", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCross)
            Me.columnLotUnit = New Global.System.Data.DataColumn("LotUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotUnit)
            Me.columnLPCost = New Global.System.Data.DataColumn("LPCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPCost)
            Me.columnLPSell = New Global.System.Data.DataColumn("LPSell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPSell)
            Me.columnLPComm = New Global.System.Data.DataColumn("LPComm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPComm)
            Me.columnLampsIncl = New Global.System.Data.DataColumn("LampsIncl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLampsIncl)
            Me.columnTerms = New Global.System.Data.DataColumn("Terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerms)
            Me.columnFOB = New Global.System.Data.DataColumn("FOB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOB)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnLeadTime = New Global.System.Data.DataColumn("LeadTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadTime)
            Me.columnLastChgDate = New Global.System.Data.DataColumn("LastChgDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgDate)
            Me.columnLastChgBy = New Global.System.Data.DataColumn("LastChgBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgBy)
            Me.columnRequested = New Global.System.Data.DataColumn("Requested", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequested)
            Me.columnFileName = New Global.System.Data.DataColumn("FileName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileName)
            Me.columnJobName = New Global.System.Data.DataColumn("JobName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobName)
            Me.columnMarketSegment = New Global.System.Data.DataColumn("MarketSegment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketSegment)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnBidDate = New Global.System.Data.DataColumn("BidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidDate)
            Me.columnSLSQ = New Global.System.Data.DataColumn("SLSQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSQ)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnRetrCode = New Global.System.Data.DataColumn("RetrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrCode)
            Me.columnSelectCode = New Global.System.Data.DataColumn("SelectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectCode)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnCSR = New Global.System.Data.DataColumn("CSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSR)
            Me.columnLotUnit1 = New Global.System.Data.DataColumn("LotUnit1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotUnit1)
            Me.columnStockJob = New Global.System.Data.DataColumn("StockJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockJob)
            Me.columnEnteredBy = New Global.System.Data.DataColumn("EnteredBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnteredBy)
            Me.columnPRADate = New Global.System.Data.DataColumn("PRADate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRADate)
            Me.columnEstDelivDate = New Global.System.Data.DataColumn("EstDelivDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstDelivDate)
            Me.columnFollowBy = New Global.System.Data.DataColumn("FollowBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFollowBy)
            Me.columnOrderEntryBy = New Global.System.Data.DataColumn("OrderEntryBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderEntryBy)
            Me.columnShipmentBy = New Global.System.Data.DataColumn("ShipmentBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipmentBy)
            Me.columnSpecifiers = New Global.System.Data.DataColumn("Specifiers", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecifiers)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProjectCustID}, true))
            Me.columnProjectCustID.AllowDBNull = false
            Me.columnProjectCustID.Unique = true
            Me.columnProjectID.AllowDBNull = false
            Me.columnQuoteCode.AllowDBNull = false
            Me.columnQuoteCode.MaxLength = 20
            Me.columnNCode.AllowDBNull = false
            Me.columnNCode.MaxLength = 8
            Me.columnFirmName.AllowDBNull = false
            Me.columnFirmName.MaxLength = 45
            Me.columnContactName.AllowDBNull = false
            Me.columnContactName.MaxLength = 45
            Me.columnSLSCode.AllowDBNull = false
            Me.columnSLSCode.MaxLength = 3
            Me.columnGot.AllowDBNull = false
            Me.columnTypec.AllowDBNull = false
            Me.columnTypec.MaxLength = 1
            Me.columnMFGQuoteNumber.AllowDBNull = false
            Me.columnMFGQuoteNumber.MaxLength = 20
            Me.columnCost.AllowDBNull = false
            Me.columnSell.AllowDBNull = false
            Me.columnComm.AllowDBNull = false
            Me.columnOverage.AllowDBNull = false
            Me.columnQuoteToDate.AllowDBNull = false
            Me.columnOrdDate.AllowDBNull = false
            Me.columnNotGot.AllowDBNull = false
            Me.columnComments.AllowDBNull = false
            Me.columnComments.MaxLength = 100
            Me.columnSPANumber.AllowDBNull = false
            Me.columnSPANumber.MaxLength = 20
            Me.columnSpecCross.AllowDBNull = false
            Me.columnSpecCross.MaxLength = 1
            Me.columnLotUnit.AllowDBNull = false
            Me.columnLotUnit.MaxLength = 1
            Me.columnLPCost.AllowDBNull = false
            Me.columnLPSell.AllowDBNull = false
            Me.columnLPComm.AllowDBNull = false
            Me.columnLampsIncl.AllowDBNull = false
            Me.columnLampsIncl.MaxLength = 1
            Me.columnTerms.AllowDBNull = false
            Me.columnTerms.MaxLength = 65535
            Me.columnFOB.AllowDBNull = false
            Me.columnFOB.MaxLength = 40
            Me.columnQuoteID.AllowDBNull = false
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnLeadTime.AllowDBNull = false
            Me.columnLeadTime.MaxLength = 20
            Me.columnLastChgDate.AllowDBNull = false
            Me.columnLastChgBy.AllowDBNull = false
            Me.columnLastChgBy.MaxLength = 3
            Me.columnRequested.AllowDBNull = false
            Me.columnRequested.MaxLength = 1
            Me.columnFileName.AllowDBNull = false
            Me.columnFileName.MaxLength = 30
            Me.columnJobName.AllowDBNull = false
            Me.columnJobName.MaxLength = 40
            Me.columnMarketSegment.AllowDBNull = false
            Me.columnMarketSegment.MaxLength = 20
            Me.columnEntryDate.AllowDBNull = false
            Me.columnBidDate.AllowDBNull = false
            Me.columnSLSQ.AllowDBNull = false
            Me.columnSLSQ.MaxLength = 3
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 6
            Me.columnRetrCode.AllowDBNull = false
            Me.columnRetrCode.MaxLength = 15
            Me.columnSelectCode.AllowDBNull = false
            Me.columnSelectCode.MaxLength = 1
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 20
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 10
            Me.columnCSR.AllowDBNull = false
            Me.columnCSR.MaxLength = 3
            Me.columnLotUnit1.AllowDBNull = false
            Me.columnLotUnit1.MaxLength = 1
            Me.columnStockJob.AllowDBNull = false
            Me.columnStockJob.MaxLength = 1
            Me.columnEnteredBy.AllowDBNull = false
            Me.columnEnteredBy.MaxLength = 3
            Me.columnPRADate.AllowDBNull = false
            Me.columnPRADate.MaxLength = 10
            Me.columnEstDelivDate.AllowDBNull = false
            Me.columnEstDelivDate.MaxLength = 10
            Me.columnFollowBy.AllowDBNull = false
            Me.columnFollowBy.MaxLength = 16
            Me.columnOrderEntryBy.AllowDBNull = false
            Me.columnOrderEntryBy.MaxLength = 10
            Me.columnShipmentBy.AllowDBNull = false
            Me.columnShipmentBy.MaxLength = 14
            Me.columnSpecifiers.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewprojectcustRow() As projectcustRow
            Return CType(Me.NewRow,projectcustRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New projectcustRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(projectcustRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.projectcustRowChangedEvent) Is Nothing) Then
                RaiseEvent projectcustRowChanged(Me, New projectcustRowChangeEvent(CType(e.Row,projectcustRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.projectcustRowChangingEvent) Is Nothing) Then
                RaiseEvent projectcustRowChanging(Me, New projectcustRowChangeEvent(CType(e.Row,projectcustRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.projectcustRowDeletedEvent) Is Nothing) Then
                RaiseEvent projectcustRowDeleted(Me, New projectcustRowChangeEvent(CType(e.Row,projectcustRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.projectcustRowDeletingEvent) Is Nothing) Then
                RaiseEvent projectcustRowDeleting(Me, New projectcustRowChangeEvent(CType(e.Row,projectcustRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveprojectcustRow(ByVal row As projectcustRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "projectcustDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class quoteDataTable
        Inherits Global.System.Data.TypedTableBase(Of quoteRow)
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnQuoteCode As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnBidDate As Global.System.Data.DataColumn
        
        Private columnBidTime As Global.System.Data.DataColumn
        
        Private columnSLSQ As Global.System.Data.DataColumn
        
        Private columnLotUnit As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnStockJob As Global.System.Data.DataColumn
        
        Private columnEnteredBy As Global.System.Data.DataColumn
        
        Private columnCSR As Global.System.Data.DataColumn
        
        Private columnLastChgBy As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnSell As Global.System.Data.DataColumn
        
        Private columnComm As Global.System.Data.DataColumn
        
        Private columnHeaderTab As Global.System.Data.DataColumn
        
        Private columnRetrCode As Global.System.Data.DataColumn
        
        Private columnLinesYN As Global.System.Data.DataColumn
        
        Private columnSelectCode As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnLPCost As Global.System.Data.DataColumn
        
        Private columnLPSell As Global.System.Data.DataColumn
        
        Private columnPRADate As Global.System.Data.DataColumn
        
        Private columnEstDelivDate As Global.System.Data.DataColumn
        
        Private columnFollowBy As Global.System.Data.DataColumn
        
        Private columnOrderEntryBy As Global.System.Data.DataColumn
        
        Private columnShipmentBy As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnLightingGear As Global.System.Data.DataColumn
        
        Private columnDimming As Global.System.Data.DataColumn
        
        Private columnLastDateTime As Global.System.Data.DataColumn
        
        Private columnBidBoard As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnLeadTime As Global.System.Data.DataColumn
        
        Private columnLockedBy As Global.System.Data.DataColumn
        
        Private columnSpecCross As Global.System.Data.DataColumn
        
        Private columnProbability As Global.System.Data.DataColumn
        
        Private columnTypeOfJob As Global.System.Data.DataColumn
        
        Private columnSpecCredit As Global.System.Data.DataColumn
        
        Private columnProbability1 As Global.System.Data.DataColumn
        
        Private columnMarketSegment As Global.System.Data.DataColumn
        
        Private columnSpecCredit1 As Global.System.Data.DataColumn
        
        Private columnSubmCover As Global.System.Data.DataColumn
        
        Private columnSubmSinglePDF As Global.System.Data.DataColumn
        
        Private columnJobName As Global.System.Data.DataColumn
        
        Private columnLastSaveDate As Global.System.Data.DataColumn
        
        Private columnLockOut As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "quote"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StockJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EnteredByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnteredBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HeaderTabColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeaderTab
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RetrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LinesYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLinesYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SelectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPSellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRADateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRADate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EstDelivDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstDelivDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FollowByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFollowBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderEntryByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderEntryBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShipmentByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipmentBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LightingGearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLightingGear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DimmingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDimming
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidBoardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidBoard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LeadTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LockedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLockedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCrossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCross
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProbabilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProbability
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeOfJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Probability1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnProbability1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarketSegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCredit1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCredit1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SubmCoverColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubmCover
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SubmSinglePDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubmSinglePDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JobNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastSaveDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastSaveDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LockOutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLockOut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As quoteRow
            Get
                Return CType(Me.Rows(index),quoteRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event quoteRowChanging As quoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event quoteRowChanged As quoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event quoteRowDeleting As quoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event quoteRowDeleted As quoteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddquoteRow(ByVal row As quoteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddquoteRow( _
                    ByVal QuoteID As UInteger,  _
                    ByVal parentQUTLU1RowByfk_quote_1 As QUTLU1Row,  _
                    ByVal QuoteCode As String,  _
                    ByVal EntryDate As Date,  _
                    ByVal BidDate As Date,  _
                    ByVal BidTime As System.TimeSpan,  _
                    ByVal SLSQ As String,  _
                    ByVal LotUnit As String,  _
                    ByVal Status As String,  _
                    ByVal StockJob As String,  _
                    ByVal EnteredBy As String,  _
                    ByVal CSR As String,  _
                    ByVal LastChgBy As String,  _
                    ByVal Cost As Decimal,  _
                    ByVal Sell As Decimal,  _
                    ByVal Comm As Decimal,  _
                    ByVal HeaderTab As String,  _
                    ByVal RetrCode As String,  _
                    ByVal LinesYN As String,  _
                    ByVal SelectCode As String,  _
                    ByVal Password As String,  _
                    ByVal LPCost As Decimal,  _
                    ByVal LPSell As Decimal,  _
                    ByVal PRADate As String,  _
                    ByVal EstDelivDate As String,  _
                    ByVal FollowBy As String,  _
                    ByVal OrderEntryBy As String,  _
                    ByVal ShipmentBy As String,  _
                    ByVal Remarks As String,  _
                    ByVal LightingGear As String,  _
                    ByVal Dimming As String,  _
                    ByVal LastDateTime As Date,  _
                    ByVal BidBoard As String,  _
                    ByVal BranchCode As String,  _
                    ByVal Address As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal Country As String,  _
                    ByVal Location As String,  _
                    ByVal LeadTime As String,  _
                    ByVal LockedBy As String,  _
                    ByVal SpecCross As String,  _
                    ByVal Probability As String,  _
                    ByVal TypeOfJob As String,  _
                    ByVal SpecCredit As String,  _
                    ByVal Probability1 As Decimal,  _
                    ByVal MarketSegment As String,  _
                    ByVal SpecCredit1 As Decimal,  _
                    ByVal SubmCover As String,  _
                    ByVal SubmSinglePDF As String,  _
                    ByVal JobName As String,  _
                    ByVal LastSaveDate As Date,  _
                    ByVal LockOut As String) As quoteRow
            Dim rowquoteRow As quoteRow = CType(Me.NewRow,quoteRow)
            Dim columnValuesArray() As Object = New Object() {QuoteID, Nothing, QuoteCode, EntryDate, BidDate, BidTime, SLSQ, LotUnit, Status, StockJob, EnteredBy, CSR, LastChgBy, Cost, Sell, Comm, HeaderTab, RetrCode, LinesYN, SelectCode, Password, LPCost, LPSell, PRADate, EstDelivDate, FollowBy, OrderEntryBy, ShipmentBy, Remarks, LightingGear, Dimming, LastDateTime, BidBoard, BranchCode, Address, Address2, City, State, Zip, Country, Location, LeadTime, LockedBy, SpecCross, Probability, TypeOfJob, SpecCredit, Probability1, MarketSegment, SpecCredit1, SubmCover, SubmSinglePDF, JobName, LastSaveDate, LockOut}
            If (Not (parentQUTLU1RowByfk_quote_1) Is Nothing) Then
                columnValuesArray(1) = parentQUTLU1RowByfk_quote_1(0)
            End If
            rowquoteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowquoteRow)
            Return rowquoteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByQuoteID(ByVal QuoteID As UInteger) As quoteRow
            Return CType(Me.Rows.Find(New Object() {QuoteID}),quoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As quoteDataTable = CType(MyBase.Clone,quoteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New quoteDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnQuoteID = MyBase.Columns("QuoteID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnQuoteCode = MyBase.Columns("QuoteCode")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnBidDate = MyBase.Columns("BidDate")
            Me.columnBidTime = MyBase.Columns("BidTime")
            Me.columnSLSQ = MyBase.Columns("SLSQ")
            Me.columnLotUnit = MyBase.Columns("LotUnit")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnStockJob = MyBase.Columns("StockJob")
            Me.columnEnteredBy = MyBase.Columns("EnteredBy")
            Me.columnCSR = MyBase.Columns("CSR")
            Me.columnLastChgBy = MyBase.Columns("LastChgBy")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnSell = MyBase.Columns("Sell")
            Me.columnComm = MyBase.Columns("Comm")
            Me.columnHeaderTab = MyBase.Columns("HeaderTab")
            Me.columnRetrCode = MyBase.Columns("RetrCode")
            Me.columnLinesYN = MyBase.Columns("LinesYN")
            Me.columnSelectCode = MyBase.Columns("SelectCode")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnLPCost = MyBase.Columns("LPCost")
            Me.columnLPSell = MyBase.Columns("LPSell")
            Me.columnPRADate = MyBase.Columns("PRADate")
            Me.columnEstDelivDate = MyBase.Columns("EstDelivDate")
            Me.columnFollowBy = MyBase.Columns("FollowBy")
            Me.columnOrderEntryBy = MyBase.Columns("OrderEntryBy")
            Me.columnShipmentBy = MyBase.Columns("ShipmentBy")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnLightingGear = MyBase.Columns("LightingGear")
            Me.columnDimming = MyBase.Columns("Dimming")
            Me.columnLastDateTime = MyBase.Columns("LastDateTime")
            Me.columnBidBoard = MyBase.Columns("BidBoard")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnLeadTime = MyBase.Columns("LeadTime")
            Me.columnLockedBy = MyBase.Columns("LockedBy")
            Me.columnSpecCross = MyBase.Columns("SpecCross")
            Me.columnProbability = MyBase.Columns("Probability")
            Me.columnTypeOfJob = MyBase.Columns("TypeOfJob")
            Me.columnSpecCredit = MyBase.Columns("SpecCredit")
            Me.columnProbability1 = MyBase.Columns("Probability1")
            Me.columnMarketSegment = MyBase.Columns("MarketSegment")
            Me.columnSpecCredit1 = MyBase.Columns("SpecCredit1")
            Me.columnSubmCover = MyBase.Columns("SubmCover")
            Me.columnSubmSinglePDF = MyBase.Columns("SubmSinglePDF")
            Me.columnJobName = MyBase.Columns("JobName")
            Me.columnLastSaveDate = MyBase.Columns("LastSaveDate")
            Me.columnLockOut = MyBase.Columns("LockOut")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnQuoteCode = New Global.System.Data.DataColumn("QuoteCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteCode)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnBidDate = New Global.System.Data.DataColumn("BidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidDate)
            Me.columnBidTime = New Global.System.Data.DataColumn("BidTime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidTime)
            Me.columnSLSQ = New Global.System.Data.DataColumn("SLSQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSQ)
            Me.columnLotUnit = New Global.System.Data.DataColumn("LotUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotUnit)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnStockJob = New Global.System.Data.DataColumn("StockJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockJob)
            Me.columnEnteredBy = New Global.System.Data.DataColumn("EnteredBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnteredBy)
            Me.columnCSR = New Global.System.Data.DataColumn("CSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSR)
            Me.columnLastChgBy = New Global.System.Data.DataColumn("LastChgBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgBy)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnSell = New Global.System.Data.DataColumn("Sell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell)
            Me.columnComm = New Global.System.Data.DataColumn("Comm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComm)
            Me.columnHeaderTab = New Global.System.Data.DataColumn("HeaderTab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeaderTab)
            Me.columnRetrCode = New Global.System.Data.DataColumn("RetrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrCode)
            Me.columnLinesYN = New Global.System.Data.DataColumn("LinesYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLinesYN)
            Me.columnSelectCode = New Global.System.Data.DataColumn("SelectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectCode)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnLPCost = New Global.System.Data.DataColumn("LPCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPCost)
            Me.columnLPSell = New Global.System.Data.DataColumn("LPSell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPSell)
            Me.columnPRADate = New Global.System.Data.DataColumn("PRADate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRADate)
            Me.columnEstDelivDate = New Global.System.Data.DataColumn("EstDelivDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstDelivDate)
            Me.columnFollowBy = New Global.System.Data.DataColumn("FollowBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFollowBy)
            Me.columnOrderEntryBy = New Global.System.Data.DataColumn("OrderEntryBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderEntryBy)
            Me.columnShipmentBy = New Global.System.Data.DataColumn("ShipmentBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipmentBy)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnLightingGear = New Global.System.Data.DataColumn("LightingGear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLightingGear)
            Me.columnDimming = New Global.System.Data.DataColumn("Dimming", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDimming)
            Me.columnLastDateTime = New Global.System.Data.DataColumn("LastDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastDateTime)
            Me.columnBidBoard = New Global.System.Data.DataColumn("BidBoard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidBoard)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnLeadTime = New Global.System.Data.DataColumn("LeadTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadTime)
            Me.columnLockedBy = New Global.System.Data.DataColumn("LockedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLockedBy)
            Me.columnSpecCross = New Global.System.Data.DataColumn("SpecCross", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCross)
            Me.columnProbability = New Global.System.Data.DataColumn("Probability", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProbability)
            Me.columnTypeOfJob = New Global.System.Data.DataColumn("TypeOfJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfJob)
            Me.columnSpecCredit = New Global.System.Data.DataColumn("SpecCredit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCredit)
            Me.columnProbability1 = New Global.System.Data.DataColumn("Probability1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProbability1)
            Me.columnMarketSegment = New Global.System.Data.DataColumn("MarketSegment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketSegment)
            Me.columnSpecCredit1 = New Global.System.Data.DataColumn("SpecCredit1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCredit1)
            Me.columnSubmCover = New Global.System.Data.DataColumn("SubmCover", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubmCover)
            Me.columnSubmSinglePDF = New Global.System.Data.DataColumn("SubmSinglePDF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubmSinglePDF)
            Me.columnJobName = New Global.System.Data.DataColumn("JobName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobName)
            Me.columnLastSaveDate = New Global.System.Data.DataColumn("LastSaveDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastSaveDate)
            Me.columnLockOut = New Global.System.Data.DataColumn("LockOut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLockOut)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnQuoteID}, true))
            Me.columnQuoteID.AllowDBNull = false
            Me.columnQuoteID.Unique = true
            Me.columnProjectID.AllowDBNull = false
            Me.columnQuoteCode.AllowDBNull = false
            Me.columnQuoteCode.MaxLength = 10
            Me.columnEntryDate.AllowDBNull = false
            Me.columnSLSQ.AllowDBNull = false
            Me.columnSLSQ.MaxLength = 3
            Me.columnLotUnit.AllowDBNull = false
            Me.columnLotUnit.MaxLength = 1
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 6
            Me.columnStockJob.AllowDBNull = false
            Me.columnStockJob.MaxLength = 1
            Me.columnEnteredBy.AllowDBNull = false
            Me.columnEnteredBy.MaxLength = 3
            Me.columnCSR.AllowDBNull = false
            Me.columnCSR.MaxLength = 3
            Me.columnLastChgBy.AllowDBNull = false
            Me.columnLastChgBy.MaxLength = 3
            Me.columnCost.AllowDBNull = false
            Me.columnSell.AllowDBNull = false
            Me.columnComm.AllowDBNull = false
            Me.columnHeaderTab.AllowDBNull = false
            Me.columnHeaderTab.MaxLength = 1
            Me.columnRetrCode.AllowDBNull = false
            Me.columnRetrCode.MaxLength = 15
            Me.columnLinesYN.AllowDBNull = false
            Me.columnLinesYN.MaxLength = 1
            Me.columnSelectCode.AllowDBNull = false
            Me.columnSelectCode.MaxLength = 1
            Me.columnPassword.AllowDBNull = false
            Me.columnPassword.MaxLength = 20
            Me.columnLPCost.AllowDBNull = false
            Me.columnLPSell.AllowDBNull = false
            Me.columnPRADate.AllowDBNull = false
            Me.columnPRADate.MaxLength = 8
            Me.columnEstDelivDate.AllowDBNull = false
            Me.columnEstDelivDate.MaxLength = 10
            Me.columnFollowBy.AllowDBNull = false
            Me.columnFollowBy.MaxLength = 16
            Me.columnOrderEntryBy.AllowDBNull = false
            Me.columnOrderEntryBy.MaxLength = 10
            Me.columnShipmentBy.AllowDBNull = false
            Me.columnShipmentBy.MaxLength = 14
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 100
            Me.columnLightingGear.AllowDBNull = false
            Me.columnLightingGear.MaxLength = 1
            Me.columnDimming.AllowDBNull = false
            Me.columnDimming.MaxLength = 1
            Me.columnLastDateTime.AllowDBNull = false
            Me.columnBidBoard.AllowDBNull = false
            Me.columnBidBoard.MaxLength = 1
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnAddress.AllowDBNull = false
            Me.columnAddress.MaxLength = 35
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 35
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 20
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 10
            Me.columnZip.AllowDBNull = false
            Me.columnZip.MaxLength = 10
            Me.columnCountry.AllowDBNull = false
            Me.columnCountry.MaxLength = 20
            Me.columnLocation.AllowDBNull = false
            Me.columnLocation.MaxLength = 20
            Me.columnLeadTime.AllowDBNull = false
            Me.columnLeadTime.MaxLength = 20
            Me.columnLockedBy.AllowDBNull = false
            Me.columnSpecCross.AllowDBNull = false
            Me.columnTypeOfJob.AllowDBNull = false
            Me.columnProbability1.AllowDBNull = false
            Me.columnProbability1.Caption = "Probability"
            Me.columnMarketSegment.AllowDBNull = false
            Me.columnMarketSegment.MaxLength = 20
            Me.columnSpecCredit1.AllowDBNull = false
            Me.columnSpecCredit1.Caption = "SpecCredit"
            Me.columnSubmCover.AllowDBNull = false
            Me.columnSubmSinglePDF.AllowDBNull = false
            Me.columnJobName.AllowDBNull = false
            Me.columnJobName.DefaultValue = CType("",String)
            Me.columnJobName.MaxLength = 40
            Me.columnLockOut.AllowDBNull = false
            Me.columnLockOut.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewquoteRow() As quoteRow
            Return CType(Me.NewRow,quoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New quoteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(quoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.quoteRowChangedEvent) Is Nothing) Then
                RaiseEvent quoteRowChanged(Me, New quoteRowChangeEvent(CType(e.Row,quoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.quoteRowChangingEvent) Is Nothing) Then
                RaiseEvent quoteRowChanging(Me, New quoteRowChangeEvent(CType(e.Row,quoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.quoteRowDeletedEvent) Is Nothing) Then
                RaiseEvent quoteRowDeleted(Me, New quoteRowChangeEvent(CType(e.Row,quoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.quoteRowDeletingEvent) Is Nothing) Then
                RaiseEvent quoteRowDeleting(Me, New quoteRowChangeEvent(CType(e.Row,quoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovequoteRow(ByVal row As quoteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "quoteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qutlinepriceDataTable
        Inherits Global.System.Data.TypedTableBase(Of qutlinepriceRow)
        
        Private columnQutPrcID As Global.System.Data.DataColumn
        
        Private columnLineID As Global.System.Data.DataColumn
        
        Private columnPriceColumn As Global.System.Data.DataColumn
        
        Private columnColHeader As Global.System.Data.DataColumn
        
        Private columnPC As Global.System.Data.DataColumn
        
        Private columnRecalcFormula As Global.System.Data.DataColumn
        
        Private columnGot As Global.System.Data.DataColumn
        
        Private columnCustSPA As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qutlineprice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QutPrcIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQutPrcID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LineIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PriceColumnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriceColumn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColHeaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColHeader
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecalcFormulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecalcFormula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CustSPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustSPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qutlinepriceRow
            Get
                Return CType(Me.Rows(index),qutlinepriceRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutlinepriceRowChanging As qutlinepriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutlinepriceRowChanged As qutlinepriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutlinepriceRowDeleting As qutlinepriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutlinepriceRowDeleted As qutlinepriceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddqutlinepriceRow(ByVal row As qutlinepriceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddqutlinepriceRow(ByVal QutPrcID As UInteger, ByVal parentquotelinesRowByfk_qutlineprice As quotelinesRow, ByVal PriceColumn As String, ByVal ColHeader As String, ByVal PC As String, ByVal RecalcFormula As String, ByVal Got As String, ByVal CustSPA As String, ByVal BranchCode As String, ByVal QuoteID As UInteger) As qutlinepriceRow
            Dim rowqutlinepriceRow As qutlinepriceRow = CType(Me.NewRow,qutlinepriceRow)
            Dim columnValuesArray() As Object = New Object() {QutPrcID, Nothing, PriceColumn, ColHeader, PC, RecalcFormula, Got, CustSPA, BranchCode, QuoteID}
            If (Not (parentquotelinesRowByfk_qutlineprice) Is Nothing) Then
                columnValuesArray(1) = parentquotelinesRowByfk_qutlineprice(0)
            End If
            rowqutlinepriceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqutlinepriceRow)
            Return rowqutlinepriceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByQutPrcID(ByVal QutPrcID As UInteger) As qutlinepriceRow
            Return CType(Me.Rows.Find(New Object() {QutPrcID}),qutlinepriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qutlinepriceDataTable = CType(MyBase.Clone,qutlinepriceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qutlinepriceDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnQutPrcID = MyBase.Columns("QutPrcID")
            Me.columnLineID = MyBase.Columns("LineID")
            Me.columnPriceColumn = MyBase.Columns("PriceColumn")
            Me.columnColHeader = MyBase.Columns("ColHeader")
            Me.columnPC = MyBase.Columns("PC")
            Me.columnRecalcFormula = MyBase.Columns("RecalcFormula")
            Me.columnGot = MyBase.Columns("Got")
            Me.columnCustSPA = MyBase.Columns("CustSPA")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnQutPrcID = New Global.System.Data.DataColumn("QutPrcID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQutPrcID)
            Me.columnLineID = New Global.System.Data.DataColumn("LineID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineID)
            Me.columnPriceColumn = New Global.System.Data.DataColumn("PriceColumn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriceColumn)
            Me.columnColHeader = New Global.System.Data.DataColumn("ColHeader", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColHeader)
            Me.columnPC = New Global.System.Data.DataColumn("PC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPC)
            Me.columnRecalcFormula = New Global.System.Data.DataColumn("RecalcFormula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecalcFormula)
            Me.columnGot = New Global.System.Data.DataColumn("Got", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGot)
            Me.columnCustSPA = New Global.System.Data.DataColumn("CustSPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustSPA)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnQutPrcID}, true))
            Me.columnQutPrcID.AllowDBNull = false
            Me.columnQutPrcID.Unique = true
            Me.columnLineID.AllowDBNull = false
            Me.columnPriceColumn.AllowDBNull = false
            Me.columnPriceColumn.MaxLength = 10
            Me.columnColHeader.AllowDBNull = false
            Me.columnColHeader.MaxLength = 10
            Me.columnPC.AllowDBNull = false
            Me.columnPC.MaxLength = 2
            Me.columnRecalcFormula.AllowDBNull = false
            Me.columnRecalcFormula.MaxLength = 10
            Me.columnGot.AllowDBNull = false
            Me.columnGot.MaxLength = 1
            Me.columnCustSPA.AllowDBNull = false
            Me.columnCustSPA.MaxLength = 10
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnQuoteID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewqutlinepriceRow() As qutlinepriceRow
            Return CType(Me.NewRow,qutlinepriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qutlinepriceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qutlinepriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qutlinepriceRowChangedEvent) Is Nothing) Then
                RaiseEvent qutlinepriceRowChanged(Me, New qutlinepriceRowChangeEvent(CType(e.Row,qutlinepriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qutlinepriceRowChangingEvent) Is Nothing) Then
                RaiseEvent qutlinepriceRowChanging(Me, New qutlinepriceRowChangeEvent(CType(e.Row,qutlinepriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qutlinepriceRowDeletedEvent) Is Nothing) Then
                RaiseEvent qutlinepriceRowDeleted(Me, New qutlinepriceRowChangeEvent(CType(e.Row,qutlinepriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qutlinepriceRowDeletingEvent) Is Nothing) Then
                RaiseEvent qutlinepriceRowDeleting(Me, New qutlinepriceRowChangeEvent(CType(e.Row,qutlinepriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovequtlinepriceRow(ByVal row As qutlinepriceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qutlinepriceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qutnotesDataTable
        Inherits Global.System.Data.TypedTableBase(Of qutnotesRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qutnotes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qutnotesRow
            Get
                Return CType(Me.Rows(index),qutnotesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutnotesRowChanging As qutnotesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutnotesRowChanged As qutnotesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutnotesRowDeleting As qutnotesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutnotesRowDeleted As qutnotesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddqutnotesRow(ByVal row As qutnotesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddqutnotesRow(ByVal ID As UInteger, ByVal Notes As String, ByVal parentquoteRowByfk_qutnotes As quoteRow) As qutnotesRow
            Dim rowqutnotesRow As qutnotesRow = CType(Me.NewRow,qutnotesRow)
            Dim columnValuesArray() As Object = New Object() {ID, Notes, Nothing}
            If (Not (parentquoteRowByfk_qutnotes) Is Nothing) Then
                columnValuesArray(2) = parentquoteRowByfk_qutnotes(0)
            End If
            rowqutnotesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqutnotesRow)
            Return rowqutnotesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As UInteger) As qutnotesRow
            Return CType(Me.Rows.Find(New Object() {ID}),qutnotesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qutnotesDataTable = CType(MyBase.Clone,qutnotesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qutnotesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnNotes.MaxLength = 65535
            Me.columnQuoteID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewqutnotesRow() As qutnotesRow
            Return CType(Me.NewRow,qutnotesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qutnotesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qutnotesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qutnotesRowChangedEvent) Is Nothing) Then
                RaiseEvent qutnotesRowChanged(Me, New qutnotesRowChangeEvent(CType(e.Row,qutnotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qutnotesRowChangingEvent) Is Nothing) Then
                RaiseEvent qutnotesRowChanging(Me, New qutnotesRowChangeEvent(CType(e.Row,qutnotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qutnotesRowDeletedEvent) Is Nothing) Then
                RaiseEvent qutnotesRowDeleted(Me, New qutnotesRowChangeEvent(CType(e.Row,qutnotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qutnotesRowDeletingEvent) Is Nothing) Then
                RaiseEvent qutnotesRowDeleting(Me, New qutnotesRowChangeEvent(CType(e.Row,qutnotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovequtnotesRow(ByVal row As qutnotesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qutnotesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qutslssplitDataTable
        Inherits Global.System.Data.TypedTableBase(Of qutslssplitRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSLSCODE As Global.System.Data.DataColumn
        
        Private columnSLSSplit As Global.System.Data.DataColumn
        
        Private columnSLSNumber As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qutslssplit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSSplitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSSplit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qutslssplitRow
            Get
                Return CType(Me.Rows(index),qutslssplitRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutslssplitRowChanging As qutslssplitRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutslssplitRowChanged As qutslssplitRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutslssplitRowDeleting As qutslssplitRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event qutslssplitRowDeleted As qutslssplitRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddqutslssplitRow(ByVal row As qutslssplitRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddqutslssplitRow(ByVal ID As UInteger, ByVal SLSCODE As String, ByVal SLSSplit As Decimal, ByVal SLSNumber As String, ByVal parentquoteRowByfk_qutslssplit As quoteRow) As qutslssplitRow
            Dim rowqutslssplitRow As qutslssplitRow = CType(Me.NewRow,qutslssplitRow)
            Dim columnValuesArray() As Object = New Object() {ID, SLSCODE, SLSSplit, SLSNumber, Nothing}
            If (Not (parentquoteRowByfk_qutslssplit) Is Nothing) Then
                columnValuesArray(4) = parentquoteRowByfk_qutslssplit(0)
            End If
            rowqutslssplitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqutslssplitRow)
            Return rowqutslssplitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As UInteger) As qutslssplitRow
            Return CType(Me.Rows.Find(New Object() {ID}),qutslssplitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qutslssplitDataTable = CType(MyBase.Clone,qutslssplitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qutslssplitDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSLSCODE = MyBase.Columns("SLSCODE")
            Me.columnSLSSplit = MyBase.Columns("SLSSplit")
            Me.columnSLSNumber = MyBase.Columns("SLSNumber")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSLSCODE = New Global.System.Data.DataColumn("SLSCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSCODE)
            Me.columnSLSSplit = New Global.System.Data.DataColumn("SLSSplit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSSplit)
            Me.columnSLSNumber = New Global.System.Data.DataColumn("SLSNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSNumber)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnSLSCODE.AllowDBNull = false
            Me.columnSLSCODE.MaxLength = 3
            Me.columnSLSNumber.AllowDBNull = false
            Me.columnSLSNumber.MaxLength = 2
            Me.columnQuoteID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewqutslssplitRow() As qutslssplitRow
            Return CType(Me.NewRow,qutslssplitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qutslssplitRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qutslssplitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qutslssplitRowChangedEvent) Is Nothing) Then
                RaiseEvent qutslssplitRowChanged(Me, New qutslssplitRowChangeEvent(CType(e.Row,qutslssplitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qutslssplitRowChangingEvent) Is Nothing) Then
                RaiseEvent qutslssplitRowChanging(Me, New qutslssplitRowChangeEvent(CType(e.Row,qutslssplitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qutslssplitRowDeletedEvent) Is Nothing) Then
                RaiseEvent qutslssplitRowDeleted(Me, New qutslssplitRowChangeEvent(CType(e.Row,qutslssplitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qutslssplitRowDeletingEvent) Is Nothing) Then
                RaiseEvent qutslssplitRowDeleting(Me, New qutslssplitRowChangeEvent(CType(e.Row,qutslssplitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovequtslssplitRow(ByVal row As qutslssplitRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qutslssplitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sls999DataTable
        Inherits Global.System.Data.TypedTableBase(Of sls999Row)
        
        Private columnempcode As Global.System.Data.DataColumn
        
        Private columnempname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sls999"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property empcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnempcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property empnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnempname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sls999Row
            Get
                Return CType(Me.Rows(index),sls999Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sls999RowChanging As sls999RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sls999RowChanged As sls999RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sls999RowDeleting As sls999RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sls999RowDeleted As sls999RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addsls999Row(ByVal row As sls999Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addsls999Row(ByVal empcode As String, ByVal empname As String) As sls999Row
            Dim rowsls999Row As sls999Row = CType(Me.NewRow,sls999Row)
            Dim columnValuesArray() As Object = New Object() {empcode, empname}
            rowsls999Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowsls999Row)
            Return rowsls999Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sls999DataTable = CType(MyBase.Clone,sls999DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sls999DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnempcode = MyBase.Columns("empcode")
            Me.columnempname = MyBase.Columns("empname")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnempcode = New Global.System.Data.DataColumn("empcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnempcode)
            Me.columnempname = New Global.System.Data.DataColumn("empname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnempname)
            Me.columnempcode.MaxLength = 3
            Me.columnempname.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newsls999Row() As sls999Row
            Return CType(Me.NewRow,sls999Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sls999Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sls999Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sls999RowChangedEvent) Is Nothing) Then
                RaiseEvent sls999RowChanged(Me, New sls999RowChangeEvent(CType(e.Row,sls999Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sls999RowChangingEvent) Is Nothing) Then
                RaiseEvent sls999RowChanging(Me, New sls999RowChangeEvent(CType(e.Row,sls999Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sls999RowDeletedEvent) Is Nothing) Then
                RaiseEvent sls999RowDeleted(Me, New sls999RowChangeEvent(CType(e.Row,sls999Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sls999RowDeletingEvent) Is Nothing) Then
                RaiseEvent sls999RowDeleting(Me, New sls999RowChangeEvent(CType(e.Row,sls999Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removesls999Row(ByVal row As sls999Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sls999DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QUTLU1DataTable
        Inherits Global.System.Data.TypedTableBase(Of QUTLU1Row)
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        Private columnQuoteCode As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnBidDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnSLSQ As Global.System.Data.DataColumn
        
        Private columnEnteredBy As Global.System.Data.DataColumn
        
        Private columnSell As Global.System.Data.DataColumn
        
        Private columnBidTime As Global.System.Data.DataColumn
        
        Private columnLotUnit As Global.System.Data.DataColumn
        
        Private columnStockJob As Global.System.Data.DataColumn
        
        Private columnCSR As Global.System.Data.DataColumn
        
        Private columnLastChgBy As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnComm As Global.System.Data.DataColumn
        
        Private columnHeaderTab As Global.System.Data.DataColumn
        
        Private columnRetrCode As Global.System.Data.DataColumn
        
        Private columnLinesYN As Global.System.Data.DataColumn
        
        Private columnSelectCode As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnLPCost As Global.System.Data.DataColumn
        
        Private columnLPSell As Global.System.Data.DataColumn
        
        Private columnPRADate As Global.System.Data.DataColumn
        
        Private columnEstDelivDate As Global.System.Data.DataColumn
        
        Private columnFollowBy As Global.System.Data.DataColumn
        
        Private columnOrderEntryBy As Global.System.Data.DataColumn
        
        Private columnShipmentBy As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnLightingGear As Global.System.Data.DataColumn
        
        Private columnDimming As Global.System.Data.DataColumn
        
        Private columnLastDateTime As Global.System.Data.DataColumn
        
        Private columnBidBoard As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnMarketSegment As Global.System.Data.DataColumn
        
        Private columnProbability As Global.System.Data.DataColumn
        
        Private columnTypeOfJob As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnLeadTime As Global.System.Data.DataColumn
        
        Private columnLockedBy As Global.System.Data.DataColumn
        
        Private columnSourceQuote As Global.System.Data.DataColumn
        
        Private columnSpecCross As Global.System.Data.DataColumn
        
        Private columnSpecCredit As Global.System.Data.DataColumn
        
        Private columnSubmCover As Global.System.Data.DataColumn
        
        Private columnSubmSinglePDF As Global.System.Data.DataColumn
        
        Private columnJobName As Global.System.Data.DataColumn
        
        Private columnLastSaveDate As Global.System.Data.DataColumn
        
        Private columnLockOut As Global.System.Data.DataColumn
        
        Private columnArchitect As Global.System.Data.DataColumn
        
        Private columnContractor As Global.System.Data.DataColumn
        
        Private columnEngineer As Global.System.Data.DataColumn
        
        Private columnSpecifier As Global.System.Data.DataColumn
        
        Private columnCustomer As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QUTLU1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EnteredByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnteredBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StockJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HeaderTabColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeaderTab
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RetrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LinesYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLinesYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SelectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPSellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRADateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRADate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EstDelivDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstDelivDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FollowByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFollowBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderEntryByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderEntryBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShipmentByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipmentBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LightingGearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLightingGear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DimmingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDimming
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidBoardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidBoard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarketSegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProbabilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProbability
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeOfJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LeadTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LockedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLockedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SourceQuoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceQuote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCrossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCross
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SubmCoverColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubmCover
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SubmSinglePDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubmSinglePDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JobNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastSaveDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastSaveDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LockOutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLockOut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ArchitectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArchitect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContractorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EngineerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEngineer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecifierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecifier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CustomerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QUTLU1Row
            Get
                Return CType(Me.Rows(index),QUTLU1Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QUTLU1RowChanging As QUTLU1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QUTLU1RowChanged As QUTLU1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QUTLU1RowDeleting As QUTLU1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QUTLU1RowDeleted As QUTLU1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddQUTLU1Row(ByVal row As QUTLU1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddQUTLU1Row( _
                    ByVal ProjectID As UInteger,  _
                    ByVal QuoteID As UInteger,  _
                    ByVal QuoteCode As String,  _
                    ByVal EntryDate As Date,  _
                    ByVal BidDate As Date,  _
                    ByVal Status As String,  _
                    ByVal SLSQ As String,  _
                    ByVal EnteredBy As String,  _
                    ByVal Sell As Decimal,  _
                    ByVal BidTime As System.TimeSpan,  _
                    ByVal LotUnit As String,  _
                    ByVal StockJob As String,  _
                    ByVal CSR As String,  _
                    ByVal LastChgBy As String,  _
                    ByVal Cost As Decimal,  _
                    ByVal Comm As Decimal,  _
                    ByVal HeaderTab As String,  _
                    ByVal RetrCode As String,  _
                    ByVal LinesYN As String,  _
                    ByVal SelectCode As String,  _
                    ByVal Password As String,  _
                    ByVal LPCost As Decimal,  _
                    ByVal LPSell As Decimal,  _
                    ByVal PRADate As String,  _
                    ByVal EstDelivDate As String,  _
                    ByVal FollowBy As String,  _
                    ByVal OrderEntryBy As String,  _
                    ByVal ShipmentBy As String,  _
                    ByVal Remarks As String,  _
                    ByVal LightingGear As String,  _
                    ByVal Dimming As String,  _
                    ByVal LastDateTime As Date,  _
                    ByVal BidBoard As String,  _
                    ByVal BranchCode As String,  _
                    ByVal Address As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal Country As String,  _
                    ByVal MarketSegment As String,  _
                    ByVal Probability As Decimal,  _
                    ByVal TypeOfJob As String,  _
                    ByVal Location As String,  _
                    ByVal LeadTime As String,  _
                    ByVal LockedBy As String,  _
                    ByVal SourceQuote As String,  _
                    ByVal SpecCross As String,  _
                    ByVal SpecCredit As Decimal,  _
                    ByVal SubmCover As String,  _
                    ByVal SubmSinglePDF As String,  _
                    ByVal JobName As String,  _
                    ByVal LastSaveDate As Date,  _
                    ByVal LockOut As String,  _
                    ByVal Architect As String,  _
                    ByVal Contractor As String,  _
                    ByVal Engineer As String,  _
                    ByVal Specifier As String,  _
                    ByVal Customer As String) As QUTLU1Row
            Dim rowQUTLU1Row As QUTLU1Row = CType(Me.NewRow,QUTLU1Row)
            Dim columnValuesArray() As Object = New Object() {ProjectID, QuoteID, QuoteCode, EntryDate, BidDate, Status, SLSQ, EnteredBy, Sell, BidTime, LotUnit, StockJob, CSR, LastChgBy, Cost, Comm, HeaderTab, RetrCode, LinesYN, SelectCode, Password, LPCost, LPSell, PRADate, EstDelivDate, FollowBy, OrderEntryBy, ShipmentBy, Remarks, LightingGear, Dimming, LastDateTime, BidBoard, BranchCode, Address, Address2, City, State, Zip, Country, MarketSegment, Probability, TypeOfJob, Location, LeadTime, LockedBy, SourceQuote, SpecCross, SpecCredit, SubmCover, SubmSinglePDF, JobName, LastSaveDate, LockOut, Architect, Contractor, Engineer, Specifier, Customer}
            rowQUTLU1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowQUTLU1Row)
            Return rowQUTLU1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByQuoteID(ByVal QuoteID As UInteger) As QUTLU1Row
            Return CType(Me.Rows.Find(New Object() {QuoteID}),QUTLU1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QUTLU1DataTable = CType(MyBase.Clone,QUTLU1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QUTLU1DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
            Me.columnQuoteCode = MyBase.Columns("QuoteCode")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnBidDate = MyBase.Columns("BidDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnSLSQ = MyBase.Columns("SLSQ")
            Me.columnEnteredBy = MyBase.Columns("EnteredBy")
            Me.columnSell = MyBase.Columns("Sell")
            Me.columnBidTime = MyBase.Columns("BidTime")
            Me.columnLotUnit = MyBase.Columns("LotUnit")
            Me.columnStockJob = MyBase.Columns("StockJob")
            Me.columnCSR = MyBase.Columns("CSR")
            Me.columnLastChgBy = MyBase.Columns("LastChgBy")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnComm = MyBase.Columns("Comm")
            Me.columnHeaderTab = MyBase.Columns("HeaderTab")
            Me.columnRetrCode = MyBase.Columns("RetrCode")
            Me.columnLinesYN = MyBase.Columns("LinesYN")
            Me.columnSelectCode = MyBase.Columns("SelectCode")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnLPCost = MyBase.Columns("LPCost")
            Me.columnLPSell = MyBase.Columns("LPSell")
            Me.columnPRADate = MyBase.Columns("PRADate")
            Me.columnEstDelivDate = MyBase.Columns("EstDelivDate")
            Me.columnFollowBy = MyBase.Columns("FollowBy")
            Me.columnOrderEntryBy = MyBase.Columns("OrderEntryBy")
            Me.columnShipmentBy = MyBase.Columns("ShipmentBy")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnLightingGear = MyBase.Columns("LightingGear")
            Me.columnDimming = MyBase.Columns("Dimming")
            Me.columnLastDateTime = MyBase.Columns("LastDateTime")
            Me.columnBidBoard = MyBase.Columns("BidBoard")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnMarketSegment = MyBase.Columns("MarketSegment")
            Me.columnProbability = MyBase.Columns("Probability")
            Me.columnTypeOfJob = MyBase.Columns("TypeOfJob")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnLeadTime = MyBase.Columns("LeadTime")
            Me.columnLockedBy = MyBase.Columns("LockedBy")
            Me.columnSourceQuote = MyBase.Columns("SourceQuote")
            Me.columnSpecCross = MyBase.Columns("SpecCross")
            Me.columnSpecCredit = MyBase.Columns("SpecCredit")
            Me.columnSubmCover = MyBase.Columns("SubmCover")
            Me.columnSubmSinglePDF = MyBase.Columns("SubmSinglePDF")
            Me.columnJobName = MyBase.Columns("JobName")
            Me.columnLastSaveDate = MyBase.Columns("LastSaveDate")
            Me.columnLockOut = MyBase.Columns("LockOut")
            Me.columnArchitect = MyBase.Columns("Architect")
            Me.columnContractor = MyBase.Columns("Contractor")
            Me.columnEngineer = MyBase.Columns("Engineer")
            Me.columnSpecifier = MyBase.Columns("Specifier")
            Me.columnCustomer = MyBase.Columns("Customer")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.columnQuoteCode = New Global.System.Data.DataColumn("QuoteCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteCode)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnBidDate = New Global.System.Data.DataColumn("BidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnSLSQ = New Global.System.Data.DataColumn("SLSQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSQ)
            Me.columnEnteredBy = New Global.System.Data.DataColumn("EnteredBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnteredBy)
            Me.columnSell = New Global.System.Data.DataColumn("Sell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell)
            Me.columnBidTime = New Global.System.Data.DataColumn("BidTime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidTime)
            Me.columnLotUnit = New Global.System.Data.DataColumn("LotUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotUnit)
            Me.columnStockJob = New Global.System.Data.DataColumn("StockJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockJob)
            Me.columnCSR = New Global.System.Data.DataColumn("CSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSR)
            Me.columnLastChgBy = New Global.System.Data.DataColumn("LastChgBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgBy)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnComm = New Global.System.Data.DataColumn("Comm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComm)
            Me.columnHeaderTab = New Global.System.Data.DataColumn("HeaderTab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeaderTab)
            Me.columnRetrCode = New Global.System.Data.DataColumn("RetrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrCode)
            Me.columnLinesYN = New Global.System.Data.DataColumn("LinesYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLinesYN)
            Me.columnSelectCode = New Global.System.Data.DataColumn("SelectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectCode)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnLPCost = New Global.System.Data.DataColumn("LPCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPCost)
            Me.columnLPSell = New Global.System.Data.DataColumn("LPSell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPSell)
            Me.columnPRADate = New Global.System.Data.DataColumn("PRADate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRADate)
            Me.columnEstDelivDate = New Global.System.Data.DataColumn("EstDelivDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstDelivDate)
            Me.columnFollowBy = New Global.System.Data.DataColumn("FollowBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFollowBy)
            Me.columnOrderEntryBy = New Global.System.Data.DataColumn("OrderEntryBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderEntryBy)
            Me.columnShipmentBy = New Global.System.Data.DataColumn("ShipmentBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipmentBy)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnLightingGear = New Global.System.Data.DataColumn("LightingGear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLightingGear)
            Me.columnDimming = New Global.System.Data.DataColumn("Dimming", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDimming)
            Me.columnLastDateTime = New Global.System.Data.DataColumn("LastDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastDateTime)
            Me.columnBidBoard = New Global.System.Data.DataColumn("BidBoard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidBoard)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnMarketSegment = New Global.System.Data.DataColumn("MarketSegment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketSegment)
            Me.columnProbability = New Global.System.Data.DataColumn("Probability", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProbability)
            Me.columnTypeOfJob = New Global.System.Data.DataColumn("TypeOfJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfJob)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnLeadTime = New Global.System.Data.DataColumn("LeadTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadTime)
            Me.columnLockedBy = New Global.System.Data.DataColumn("LockedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLockedBy)
            Me.columnSourceQuote = New Global.System.Data.DataColumn("SourceQuote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceQuote)
            Me.columnSpecCross = New Global.System.Data.DataColumn("SpecCross", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCross)
            Me.columnSpecCredit = New Global.System.Data.DataColumn("SpecCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCredit)
            Me.columnSubmCover = New Global.System.Data.DataColumn("SubmCover", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubmCover)
            Me.columnSubmSinglePDF = New Global.System.Data.DataColumn("SubmSinglePDF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubmSinglePDF)
            Me.columnJobName = New Global.System.Data.DataColumn("JobName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobName)
            Me.columnLastSaveDate = New Global.System.Data.DataColumn("LastSaveDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastSaveDate)
            Me.columnLockOut = New Global.System.Data.DataColumn("LockOut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLockOut)
            Me.columnArchitect = New Global.System.Data.DataColumn("Architect", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArchitect)
            Me.columnContractor = New Global.System.Data.DataColumn("Contractor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractor)
            Me.columnEngineer = New Global.System.Data.DataColumn("Engineer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEngineer)
            Me.columnSpecifier = New Global.System.Data.DataColumn("Specifier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecifier)
            Me.columnCustomer = New Global.System.Data.DataColumn("Customer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnQuoteID}, true))
            Me.columnProjectID.AllowDBNull = false
            Me.columnQuoteID.AllowDBNull = false
            Me.columnQuoteID.Unique = true
            Me.columnQuoteCode.AllowDBNull = false
            Me.columnQuoteCode.MaxLength = 10
            Me.columnEntryDate.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 6
            Me.columnSLSQ.AllowDBNull = false
            Me.columnSLSQ.MaxLength = 3
            Me.columnEnteredBy.AllowDBNull = false
            Me.columnEnteredBy.MaxLength = 3
            Me.columnSell.AllowDBNull = false
            Me.columnLotUnit.AllowDBNull = false
            Me.columnLotUnit.MaxLength = 1
            Me.columnStockJob.AllowDBNull = false
            Me.columnStockJob.MaxLength = 1
            Me.columnCSR.AllowDBNull = false
            Me.columnCSR.MaxLength = 3
            Me.columnLastChgBy.AllowDBNull = false
            Me.columnLastChgBy.MaxLength = 3
            Me.columnCost.AllowDBNull = false
            Me.columnComm.AllowDBNull = false
            Me.columnHeaderTab.AllowDBNull = false
            Me.columnHeaderTab.MaxLength = 1
            Me.columnRetrCode.AllowDBNull = false
            Me.columnRetrCode.MaxLength = 15
            Me.columnLinesYN.AllowDBNull = false
            Me.columnLinesYN.MaxLength = 1
            Me.columnSelectCode.AllowDBNull = false
            Me.columnSelectCode.MaxLength = 1
            Me.columnPassword.AllowDBNull = false
            Me.columnPassword.MaxLength = 20
            Me.columnLPCost.AllowDBNull = false
            Me.columnLPSell.AllowDBNull = false
            Me.columnPRADate.AllowDBNull = false
            Me.columnPRADate.MaxLength = 8
            Me.columnEstDelivDate.AllowDBNull = false
            Me.columnEstDelivDate.MaxLength = 10
            Me.columnFollowBy.AllowDBNull = false
            Me.columnFollowBy.MaxLength = 16
            Me.columnOrderEntryBy.AllowDBNull = false
            Me.columnOrderEntryBy.MaxLength = 10
            Me.columnShipmentBy.AllowDBNull = false
            Me.columnShipmentBy.MaxLength = 14
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 100
            Me.columnLightingGear.AllowDBNull = false
            Me.columnLightingGear.MaxLength = 1
            Me.columnDimming.AllowDBNull = false
            Me.columnDimming.MaxLength = 1
            Me.columnLastDateTime.AllowDBNull = false
            Me.columnBidBoard.AllowDBNull = false
            Me.columnBidBoard.MaxLength = 1
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnAddress.AllowDBNull = false
            Me.columnAddress.MaxLength = 35
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 35
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 20
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 10
            Me.columnZip.AllowDBNull = false
            Me.columnZip.MaxLength = 10
            Me.columnCountry.AllowDBNull = false
            Me.columnCountry.MaxLength = 20
            Me.columnMarketSegment.AllowDBNull = false
            Me.columnMarketSegment.MaxLength = 10
            Me.columnProbability.AllowDBNull = false
            Me.columnTypeOfJob.AllowDBNull = false
            Me.columnLocation.AllowDBNull = false
            Me.columnLocation.MaxLength = 20
            Me.columnLeadTime.AllowDBNull = false
            Me.columnLeadTime.MaxLength = 20
            Me.columnLockedBy.AllowDBNull = false
            Me.columnLockedBy.MaxLength = 3
            Me.columnSourceQuote.AllowDBNull = false
            Me.columnSourceQuote.MaxLength = 10
            Me.columnSpecCross.AllowDBNull = false
            Me.columnSpecCross.MaxLength = 1
            Me.columnSpecCredit.AllowDBNull = false
            Me.columnSubmCover.AllowDBNull = false
            Me.columnSubmCover.MaxLength = 100
            Me.columnSubmSinglePDF.AllowDBNull = false
            Me.columnSubmSinglePDF.MaxLength = 100
            Me.columnJobName.AllowDBNull = false
            Me.columnJobName.MaxLength = 40
            Me.columnLockOut.AllowDBNull = false
            Me.columnLockOut.MaxLength = 1
            Me.columnArchitect.DefaultValue = CType("",String)
            Me.columnContractor.DefaultValue = CType("",String)
            Me.columnEngineer.DefaultValue = CType("",String)
            Me.columnSpecifier.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewQUTLU1Row() As QUTLU1Row
            Return CType(Me.NewRow,QUTLU1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QUTLU1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QUTLU1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QUTLU1RowChangedEvent) Is Nothing) Then
                RaiseEvent QUTLU1RowChanged(Me, New QUTLU1RowChangeEvent(CType(e.Row,QUTLU1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QUTLU1RowChangingEvent) Is Nothing) Then
                RaiseEvent QUTLU1RowChanging(Me, New QUTLU1RowChangeEvent(CType(e.Row,QUTLU1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QUTLU1RowDeletedEvent) Is Nothing) Then
                RaiseEvent QUTLU1RowDeleted(Me, New QUTLU1RowChangeEvent(CType(e.Row,QUTLU1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QUTLU1RowDeletingEvent) Is Nothing) Then
                RaiseEvent QUTLU1RowDeleting(Me, New QUTLU1RowChangeEvent(CType(e.Row,QUTLU1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveQUTLU1Row(ByVal row As QUTLU1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QUTLU1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QuoteRealLUDataTable
        Inherits Global.System.Data.TypedTableBase(Of QuoteRealLURow)
        
        Private columnProjectCustID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnQuoteCode As Global.System.Data.DataColumn
        
        Private columnNCode As Global.System.Data.DataColumn
        
        Private columnFirmName As Global.System.Data.DataColumn
        
        Private columnContactName As Global.System.Data.DataColumn
        
        Private columnSLSCode As Global.System.Data.DataColumn
        
        Private columnGot As Global.System.Data.DataColumn
        
        Private columnTypec As Global.System.Data.DataColumn
        
        Private columnMFGQuoteNumber As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnSell As Global.System.Data.DataColumn
        
        Private columnComm As Global.System.Data.DataColumn
        
        Private columnOverage As Global.System.Data.DataColumn
        
        Private columnOrdDate As Global.System.Data.DataColumn
        
        Private columnNotGot As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnSPANumber As Global.System.Data.DataColumn
        
        Private columnSpecCross As Global.System.Data.DataColumn
        
        Private columnLotUnit As Global.System.Data.DataColumn
        
        Private columnLPCost As Global.System.Data.DataColumn
        
        Private columnLPSell As Global.System.Data.DataColumn
        
        Private columnLPComm As Global.System.Data.DataColumn
        
        Private columnLampsIncl As Global.System.Data.DataColumn
        
        Private columnTerms As Global.System.Data.DataColumn
        
        Private columnFOB As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnProjectName As Global.System.Data.DataColumn
        
        Private columnMarketSegment As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnBidDate As Global.System.Data.DataColumn
        
        Private columnSLSQ As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnRetrCode As Global.System.Data.DataColumn
        
        Private columnSelectCode As Global.System.Data.DataColumn
        
        Private columnLastChgBy As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnCSR As Global.System.Data.DataColumn
        
        Private columnStockJob As Global.System.Data.DataColumn
        
        Private columnLastChgDate As Global.System.Data.DataColumn
        
        Private columnProbability As Global.System.Data.DataColumn
        
        Private columnBidTime As Global.System.Data.DataColumn
        
        Private columnEnteredBy As Global.System.Data.DataColumn
        
        Private columnPRADate As Global.System.Data.DataColumn
        
        Private columnEstDelivDate As Global.System.Data.DataColumn
        
        Private columnFollowBy As Global.System.Data.DataColumn
        
        Private columnOrderEntryBy As Global.System.Data.DataColumn
        
        Private columnShipmentBy As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnLastDateTime As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnLeadTime As Global.System.Data.DataColumn
        
        Private columnSourceQuote As Global.System.Data.DataColumn
        
        Private columnLockedBy As Global.System.Data.DataColumn
        
        Private columnTypeOfJob As Global.System.Data.DataColumn
        
        Private columnJobName As Global.System.Data.DataColumn
        
        Private columnSpecCredit As Global.System.Data.DataColumn
        
        Private columnQuoteToDate As Global.System.Data.DataColumn
        
        Private columnLotUnitQ As Global.System.Data.DataColumn
        
        Private columnCostQ As Global.System.Data.DataColumn
        
        Private columnSellQ As Global.System.Data.DataColumn
        
        Private columnCommQ As Global.System.Data.DataColumn
        
        Private columnLPCostQ As Global.System.Data.DataColumn
        
        Private columnLPSellQ As Global.System.Data.DataColumn
        
        Private columnBranchCodeQ As Global.System.Data.DataColumn
        
        Private columnSpecCrossQ As Global.System.Data.DataColumn
        
        Private columnMarketSegmentQ As Global.System.Data.DataColumn
        
        Private columnLeadTimeQ As Global.System.Data.DataColumn
        
        Private columnBusinessType As Global.System.Data.DataColumn
        
        Private columnSpecifiers As Global.System.Data.DataColumn
        
        Private columnArchitect As Global.System.Data.DataColumn
        
        Private columnEngineer As Global.System.Data.DataColumn
        
        Private columnContractor As Global.System.Data.DataColumn
        
        Private columnLightingDesigner As Global.System.Data.DataColumn
        
        Private columnSpecifier As Global.System.Data.DataColumn
        
        Private columnOther As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QuoteRealLU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectCustIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectCustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FirmNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirmName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContactNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MFGQuoteNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFGQuoteNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NotGotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotGot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPANumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPANumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCrossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCross
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPSellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LampsInclColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLampsIncl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TermsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarketSegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RetrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SelectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StockJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProbabilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProbability
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EnteredByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnteredBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRADateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRADate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EstDelivDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstDelivDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FollowByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFollowBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderEntryByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderEntryBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShipmentByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipmentBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LeadTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SourceQuoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceQuote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LockedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLockedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeOfJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JobNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteToDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteToDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotUnitQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotUnitQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSellQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCostQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPCostQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPSellQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPSellQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCodeQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCrossQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCrossQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarketSegmentQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketSegmentQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LeadTimeQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadTimeQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BusinessTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecifiersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecifiers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ArchitectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArchitect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EngineerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEngineer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContractorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LightingDesignerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLightingDesigner
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecifierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecifier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QuoteRealLURow
            Get
                Return CType(Me.Rows(index),QuoteRealLURow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QuoteRealLURowChanging As QuoteRealLURowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QuoteRealLURowChanged As QuoteRealLURowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QuoteRealLURowDeleting As QuoteRealLURowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QuoteRealLURowDeleted As QuoteRealLURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddQuoteRealLURow(ByVal row As QuoteRealLURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddQuoteRealLURow( _
                    ByVal ProjectCustID As UInteger,  _
                    ByVal ProjectID As UInteger,  _
                    ByVal QuoteCode As String,  _
                    ByVal NCode As String,  _
                    ByVal FirmName As String,  _
                    ByVal ContactName As String,  _
                    ByVal SLSCode As String,  _
                    ByVal Got As Boolean,  _
                    ByVal Typec As String,  _
                    ByVal MFGQuoteNumber As String,  _
                    ByVal Cost As Decimal,  _
                    ByVal Sell As Decimal,  _
                    ByVal Comm As Decimal,  _
                    ByVal Overage As Decimal,  _
                    ByVal OrdDate As Date,  _
                    ByVal NotGot As Boolean,  _
                    ByVal Comments As String,  _
                    ByVal SPANumber As String,  _
                    ByVal SpecCross As String,  _
                    ByVal LotUnit As String,  _
                    ByVal LPCost As Decimal,  _
                    ByVal LPSell As Decimal,  _
                    ByVal LPComm As Decimal,  _
                    ByVal LampsIncl As String,  _
                    ByVal Terms As String,  _
                    ByVal FOB As String,  _
                    ByVal QuoteID As UInteger,  _
                    ByVal BranchCode As String,  _
                    ByVal ProjectName As String,  _
                    ByVal MarketSegment As String,  _
                    ByVal EntryDate As Date,  _
                    ByVal BidDate As Date,  _
                    ByVal SLSQ As String,  _
                    ByVal Status As String,  _
                    ByVal RetrCode As String,  _
                    ByVal SelectCode As String,  _
                    ByVal LastChgBy As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal CSR As String,  _
                    ByVal StockJob As String,  _
                    ByVal LastChgDate As Date,  _
                    ByVal Probability As Decimal,  _
                    ByVal BidTime As System.TimeSpan,  _
                    ByVal EnteredBy As String,  _
                    ByVal PRADate As String,  _
                    ByVal EstDelivDate As String,  _
                    ByVal FollowBy As String,  _
                    ByVal OrderEntryBy As String,  _
                    ByVal ShipmentBy As String,  _
                    ByVal Remarks As String,  _
                    ByVal LastDateTime As Date,  _
                    ByVal Zip As String,  _
                    ByVal Country As String,  _
                    ByVal Location As String,  _
                    ByVal LeadTime As String,  _
                    ByVal SourceQuote As String,  _
                    ByVal LockedBy As String,  _
                    ByVal TypeOfJob As String,  _
                    ByVal JobName As String,  _
                    ByVal SpecCredit As Decimal,  _
                    ByVal QuoteToDate As Date,  _
                    ByVal LotUnitQ As String,  _
                    ByVal CostQ As Decimal,  _
                    ByVal SellQ As Decimal,  _
                    ByVal CommQ As Decimal,  _
                    ByVal LPCostQ As Decimal,  _
                    ByVal LPSellQ As Decimal,  _
                    ByVal BranchCodeQ As String,  _
                    ByVal SpecCrossQ As String,  _
                    ByVal MarketSegmentQ As String,  _
                    ByVal LeadTimeQ As String,  _
                    ByVal BusinessType As String,  _
                    ByVal Specifiers As String,  _
                    ByVal Architect As String,  _
                    ByVal Engineer As String,  _
                    ByVal Contractor As String,  _
                    ByVal LightingDesigner As String,  _
                    ByVal Specifier As String,  _
                    ByVal Other As String) As QuoteRealLURow
            Dim rowQuoteRealLURow As QuoteRealLURow = CType(Me.NewRow,QuoteRealLURow)
            Dim columnValuesArray() As Object = New Object() {ProjectCustID, ProjectID, QuoteCode, NCode, FirmName, ContactName, SLSCode, Got, Typec, MFGQuoteNumber, Cost, Sell, Comm, Overage, OrdDate, NotGot, Comments, SPANumber, SpecCross, LotUnit, LPCost, LPSell, LPComm, LampsIncl, Terms, FOB, QuoteID, BranchCode, ProjectName, MarketSegment, EntryDate, BidDate, SLSQ, Status, RetrCode, SelectCode, LastChgBy, City, State, CSR, StockJob, LastChgDate, Probability, BidTime, EnteredBy, PRADate, EstDelivDate, FollowBy, OrderEntryBy, ShipmentBy, Remarks, LastDateTime, Zip, Country, Location, LeadTime, SourceQuote, LockedBy, TypeOfJob, JobName, SpecCredit, QuoteToDate, LotUnitQ, CostQ, SellQ, CommQ, LPCostQ, LPSellQ, BranchCodeQ, SpecCrossQ, MarketSegmentQ, LeadTimeQ, BusinessType, Specifiers, Architect, Engineer, Contractor, LightingDesigner, Specifier, Other}
            rowQuoteRealLURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowQuoteRealLURow)
            Return rowQuoteRealLURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProjectCustID(ByVal ProjectCustID As UInteger) As QuoteRealLURow
            Return CType(Me.Rows.Find(New Object() {ProjectCustID}),QuoteRealLURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QuoteRealLUDataTable = CType(MyBase.Clone,QuoteRealLUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QuoteRealLUDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProjectCustID = MyBase.Columns("ProjectCustID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnQuoteCode = MyBase.Columns("QuoteCode")
            Me.columnNCode = MyBase.Columns("NCode")
            Me.columnFirmName = MyBase.Columns("FirmName")
            Me.columnContactName = MyBase.Columns("ContactName")
            Me.columnSLSCode = MyBase.Columns("SLSCode")
            Me.columnGot = MyBase.Columns("Got")
            Me.columnTypec = MyBase.Columns("Typec")
            Me.columnMFGQuoteNumber = MyBase.Columns("MFGQuoteNumber")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnSell = MyBase.Columns("Sell")
            Me.columnComm = MyBase.Columns("Comm")
            Me.columnOverage = MyBase.Columns("Overage")
            Me.columnOrdDate = MyBase.Columns("OrdDate")
            Me.columnNotGot = MyBase.Columns("NotGot")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnSPANumber = MyBase.Columns("SPANumber")
            Me.columnSpecCross = MyBase.Columns("SpecCross")
            Me.columnLotUnit = MyBase.Columns("LotUnit")
            Me.columnLPCost = MyBase.Columns("LPCost")
            Me.columnLPSell = MyBase.Columns("LPSell")
            Me.columnLPComm = MyBase.Columns("LPComm")
            Me.columnLampsIncl = MyBase.Columns("LampsIncl")
            Me.columnTerms = MyBase.Columns("Terms")
            Me.columnFOB = MyBase.Columns("FOB")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnProjectName = MyBase.Columns("ProjectName")
            Me.columnMarketSegment = MyBase.Columns("MarketSegment")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnBidDate = MyBase.Columns("BidDate")
            Me.columnSLSQ = MyBase.Columns("SLSQ")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnRetrCode = MyBase.Columns("RetrCode")
            Me.columnSelectCode = MyBase.Columns("SelectCode")
            Me.columnLastChgBy = MyBase.Columns("LastChgBy")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnCSR = MyBase.Columns("CSR")
            Me.columnStockJob = MyBase.Columns("StockJob")
            Me.columnLastChgDate = MyBase.Columns("LastChgDate")
            Me.columnProbability = MyBase.Columns("Probability")
            Me.columnBidTime = MyBase.Columns("BidTime")
            Me.columnEnteredBy = MyBase.Columns("EnteredBy")
            Me.columnPRADate = MyBase.Columns("PRADate")
            Me.columnEstDelivDate = MyBase.Columns("EstDelivDate")
            Me.columnFollowBy = MyBase.Columns("FollowBy")
            Me.columnOrderEntryBy = MyBase.Columns("OrderEntryBy")
            Me.columnShipmentBy = MyBase.Columns("ShipmentBy")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnLastDateTime = MyBase.Columns("LastDateTime")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnLeadTime = MyBase.Columns("LeadTime")
            Me.columnSourceQuote = MyBase.Columns("SourceQuote")
            Me.columnLockedBy = MyBase.Columns("LockedBy")
            Me.columnTypeOfJob = MyBase.Columns("TypeOfJob")
            Me.columnJobName = MyBase.Columns("JobName")
            Me.columnSpecCredit = MyBase.Columns("SpecCredit")
            Me.columnQuoteToDate = MyBase.Columns("QuoteToDate")
            Me.columnLotUnitQ = MyBase.Columns("LotUnitQ")
            Me.columnCostQ = MyBase.Columns("CostQ")
            Me.columnSellQ = MyBase.Columns("SellQ")
            Me.columnCommQ = MyBase.Columns("CommQ")
            Me.columnLPCostQ = MyBase.Columns("LPCostQ")
            Me.columnLPSellQ = MyBase.Columns("LPSellQ")
            Me.columnBranchCodeQ = MyBase.Columns("BranchCodeQ")
            Me.columnSpecCrossQ = MyBase.Columns("SpecCrossQ")
            Me.columnMarketSegmentQ = MyBase.Columns("MarketSegmentQ")
            Me.columnLeadTimeQ = MyBase.Columns("LeadTimeQ")
            Me.columnBusinessType = MyBase.Columns("BusinessType")
            Me.columnSpecifiers = MyBase.Columns("Specifiers")
            Me.columnArchitect = MyBase.Columns("Architect")
            Me.columnEngineer = MyBase.Columns("Engineer")
            Me.columnContractor = MyBase.Columns("Contractor")
            Me.columnLightingDesigner = MyBase.Columns("LightingDesigner")
            Me.columnSpecifier = MyBase.Columns("Specifier")
            Me.columnOther = MyBase.Columns("Other")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProjectCustID = New Global.System.Data.DataColumn("ProjectCustID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectCustID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnQuoteCode = New Global.System.Data.DataColumn("QuoteCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteCode)
            Me.columnNCode = New Global.System.Data.DataColumn("NCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCode)
            Me.columnFirmName = New Global.System.Data.DataColumn("FirmName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirmName)
            Me.columnContactName = New Global.System.Data.DataColumn("ContactName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactName)
            Me.columnSLSCode = New Global.System.Data.DataColumn("SLSCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSCode)
            Me.columnGot = New Global.System.Data.DataColumn("Got", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGot)
            Me.columnTypec = New Global.System.Data.DataColumn("Typec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypec)
            Me.columnMFGQuoteNumber = New Global.System.Data.DataColumn("MFGQuoteNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFGQuoteNumber)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnSell = New Global.System.Data.DataColumn("Sell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell)
            Me.columnComm = New Global.System.Data.DataColumn("Comm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComm)
            Me.columnOverage = New Global.System.Data.DataColumn("Overage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverage)
            Me.columnOrdDate = New Global.System.Data.DataColumn("OrdDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdDate)
            Me.columnNotGot = New Global.System.Data.DataColumn("NotGot", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotGot)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnSPANumber = New Global.System.Data.DataColumn("SPANumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPANumber)
            Me.columnSpecCross = New Global.System.Data.DataColumn("SpecCross", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCross)
            Me.columnLotUnit = New Global.System.Data.DataColumn("LotUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotUnit)
            Me.columnLPCost = New Global.System.Data.DataColumn("LPCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPCost)
            Me.columnLPSell = New Global.System.Data.DataColumn("LPSell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPSell)
            Me.columnLPComm = New Global.System.Data.DataColumn("LPComm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPComm)
            Me.columnLampsIncl = New Global.System.Data.DataColumn("LampsIncl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLampsIncl)
            Me.columnTerms = New Global.System.Data.DataColumn("Terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerms)
            Me.columnFOB = New Global.System.Data.DataColumn("FOB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOB)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnProjectName = New Global.System.Data.DataColumn("ProjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectName)
            Me.columnMarketSegment = New Global.System.Data.DataColumn("MarketSegment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketSegment)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnBidDate = New Global.System.Data.DataColumn("BidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidDate)
            Me.columnSLSQ = New Global.System.Data.DataColumn("SLSQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSQ)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnRetrCode = New Global.System.Data.DataColumn("RetrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrCode)
            Me.columnSelectCode = New Global.System.Data.DataColumn("SelectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectCode)
            Me.columnLastChgBy = New Global.System.Data.DataColumn("LastChgBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgBy)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnCSR = New Global.System.Data.DataColumn("CSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSR)
            Me.columnStockJob = New Global.System.Data.DataColumn("StockJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockJob)
            Me.columnLastChgDate = New Global.System.Data.DataColumn("LastChgDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgDate)
            Me.columnProbability = New Global.System.Data.DataColumn("Probability", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProbability)
            Me.columnBidTime = New Global.System.Data.DataColumn("BidTime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidTime)
            Me.columnEnteredBy = New Global.System.Data.DataColumn("EnteredBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnteredBy)
            Me.columnPRADate = New Global.System.Data.DataColumn("PRADate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRADate)
            Me.columnEstDelivDate = New Global.System.Data.DataColumn("EstDelivDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstDelivDate)
            Me.columnFollowBy = New Global.System.Data.DataColumn("FollowBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFollowBy)
            Me.columnOrderEntryBy = New Global.System.Data.DataColumn("OrderEntryBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderEntryBy)
            Me.columnShipmentBy = New Global.System.Data.DataColumn("ShipmentBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipmentBy)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnLastDateTime = New Global.System.Data.DataColumn("LastDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastDateTime)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnLeadTime = New Global.System.Data.DataColumn("LeadTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadTime)
            Me.columnSourceQuote = New Global.System.Data.DataColumn("SourceQuote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceQuote)
            Me.columnLockedBy = New Global.System.Data.DataColumn("LockedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLockedBy)
            Me.columnTypeOfJob = New Global.System.Data.DataColumn("TypeOfJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfJob)
            Me.columnJobName = New Global.System.Data.DataColumn("JobName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobName)
            Me.columnSpecCredit = New Global.System.Data.DataColumn("SpecCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCredit)
            Me.columnQuoteToDate = New Global.System.Data.DataColumn("QuoteToDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteToDate)
            Me.columnLotUnitQ = New Global.System.Data.DataColumn("LotUnitQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotUnitQ)
            Me.columnCostQ = New Global.System.Data.DataColumn("CostQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostQ)
            Me.columnSellQ = New Global.System.Data.DataColumn("SellQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSellQ)
            Me.columnCommQ = New Global.System.Data.DataColumn("CommQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommQ)
            Me.columnLPCostQ = New Global.System.Data.DataColumn("LPCostQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPCostQ)
            Me.columnLPSellQ = New Global.System.Data.DataColumn("LPSellQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPSellQ)
            Me.columnBranchCodeQ = New Global.System.Data.DataColumn("BranchCodeQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCodeQ)
            Me.columnSpecCrossQ = New Global.System.Data.DataColumn("SpecCrossQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCrossQ)
            Me.columnMarketSegmentQ = New Global.System.Data.DataColumn("MarketSegmentQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketSegmentQ)
            Me.columnLeadTimeQ = New Global.System.Data.DataColumn("LeadTimeQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadTimeQ)
            Me.columnBusinessType = New Global.System.Data.DataColumn("BusinessType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessType)
            Me.columnSpecifiers = New Global.System.Data.DataColumn("Specifiers", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecifiers)
            Me.columnArchitect = New Global.System.Data.DataColumn("Architect", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArchitect)
            Me.columnEngineer = New Global.System.Data.DataColumn("Engineer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEngineer)
            Me.columnContractor = New Global.System.Data.DataColumn("Contractor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractor)
            Me.columnLightingDesigner = New Global.System.Data.DataColumn("LightingDesigner", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLightingDesigner)
            Me.columnSpecifier = New Global.System.Data.DataColumn("Specifier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecifier)
            Me.columnOther = New Global.System.Data.DataColumn("Other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProjectCustID}, true))
            Me.columnProjectCustID.AllowDBNull = false
            Me.columnProjectCustID.Unique = true
            Me.columnProjectID.AllowDBNull = false
            Me.columnQuoteCode.AllowDBNull = false
            Me.columnQuoteCode.MaxLength = 20
            Me.columnNCode.AllowDBNull = false
            Me.columnNCode.MaxLength = 8
            Me.columnFirmName.AllowDBNull = false
            Me.columnFirmName.MaxLength = 45
            Me.columnContactName.AllowDBNull = false
            Me.columnContactName.MaxLength = 45
            Me.columnSLSCode.AllowDBNull = false
            Me.columnSLSCode.MaxLength = 3
            Me.columnGot.AllowDBNull = false
            Me.columnTypec.AllowDBNull = false
            Me.columnTypec.MaxLength = 1
            Me.columnMFGQuoteNumber.AllowDBNull = false
            Me.columnMFGQuoteNumber.MaxLength = 20
            Me.columnCost.AllowDBNull = false
            Me.columnSell.AllowDBNull = false
            Me.columnComm.AllowDBNull = false
            Me.columnOverage.AllowDBNull = false
            Me.columnOrdDate.AllowDBNull = false
            Me.columnNotGot.AllowDBNull = false
            Me.columnComments.AllowDBNull = false
            Me.columnComments.MaxLength = 100
            Me.columnSPANumber.AllowDBNull = false
            Me.columnSPANumber.MaxLength = 20
            Me.columnSpecCross.AllowDBNull = false
            Me.columnSpecCross.MaxLength = 1
            Me.columnLotUnit.AllowDBNull = false
            Me.columnLotUnit.MaxLength = 1
            Me.columnLPCost.AllowDBNull = false
            Me.columnLPSell.AllowDBNull = false
            Me.columnLPComm.AllowDBNull = false
            Me.columnLampsIncl.AllowDBNull = false
            Me.columnLampsIncl.MaxLength = 1
            Me.columnTerms.AllowDBNull = false
            Me.columnTerms.MaxLength = 65535
            Me.columnFOB.AllowDBNull = false
            Me.columnFOB.MaxLength = 40
            Me.columnQuoteID.AllowDBNull = false
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnProjectName.AllowDBNull = false
            Me.columnProjectName.MaxLength = 40
            Me.columnMarketSegment.AllowDBNull = false
            Me.columnMarketSegment.MaxLength = 20
            Me.columnEntryDate.AllowDBNull = false
            Me.columnSLSQ.AllowDBNull = false
            Me.columnSLSQ.MaxLength = 3
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 6
            Me.columnRetrCode.AllowDBNull = false
            Me.columnRetrCode.MaxLength = 15
            Me.columnSelectCode.AllowDBNull = false
            Me.columnSelectCode.MaxLength = 1
            Me.columnLastChgBy.AllowDBNull = false
            Me.columnLastChgBy.MaxLength = 3
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 20
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 10
            Me.columnCSR.AllowDBNull = false
            Me.columnCSR.MaxLength = 3
            Me.columnStockJob.AllowDBNull = false
            Me.columnStockJob.MaxLength = 1
            Me.columnLastChgDate.AllowDBNull = false
            Me.columnProbability.AllowDBNull = false
            Me.columnEnteredBy.AllowDBNull = false
            Me.columnEnteredBy.MaxLength = 3
            Me.columnPRADate.AllowDBNull = false
            Me.columnPRADate.MaxLength = 10
            Me.columnEstDelivDate.AllowDBNull = false
            Me.columnEstDelivDate.MaxLength = 10
            Me.columnFollowBy.AllowDBNull = false
            Me.columnFollowBy.MaxLength = 16
            Me.columnOrderEntryBy.AllowDBNull = false
            Me.columnOrderEntryBy.MaxLength = 10
            Me.columnShipmentBy.AllowDBNull = false
            Me.columnShipmentBy.MaxLength = 14
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 100
            Me.columnLastDateTime.AllowDBNull = false
            Me.columnZip.AllowDBNull = false
            Me.columnZip.MaxLength = 10
            Me.columnCountry.AllowDBNull = false
            Me.columnCountry.MaxLength = 20
            Me.columnLocation.AllowDBNull = false
            Me.columnLocation.MaxLength = 20
            Me.columnLeadTime.AllowDBNull = false
            Me.columnLeadTime.MaxLength = 20
            Me.columnSourceQuote.AllowDBNull = false
            Me.columnSourceQuote.MaxLength = 10
            Me.columnLockedBy.AllowDBNull = false
            Me.columnLockedBy.MaxLength = 3
            Me.columnTypeOfJob.AllowDBNull = false
            Me.columnTypeOfJob.MaxLength = 1
            Me.columnJobName.AllowDBNull = false
            Me.columnJobName.MaxLength = 40
            Me.columnSpecCredit.AllowDBNull = false
            Me.columnQuoteToDate.AllowDBNull = false
            Me.columnLotUnitQ.AllowDBNull = false
            Me.columnLotUnitQ.MaxLength = 1
            Me.columnCostQ.AllowDBNull = false
            Me.columnSellQ.AllowDBNull = false
            Me.columnCommQ.AllowDBNull = false
            Me.columnLPCostQ.AllowDBNull = false
            Me.columnLPSellQ.AllowDBNull = false
            Me.columnBranchCodeQ.AllowDBNull = false
            Me.columnBranchCodeQ.MaxLength = 3
            Me.columnSpecCrossQ.AllowDBNull = false
            Me.columnSpecCrossQ.MaxLength = 1
            Me.columnMarketSegmentQ.AllowDBNull = false
            Me.columnMarketSegmentQ.MaxLength = 20
            Me.columnLeadTimeQ.AllowDBNull = false
            Me.columnLeadTimeQ.MaxLength = 20
            Me.columnBusinessType.AllowDBNull = false
            Me.columnBusinessType.DefaultValue = CType("",String)
            Me.columnBusinessType.MaxLength = 1
            Me.columnSpecifiers.DefaultValue = CType("",String)
            Me.columnArchitect.DefaultValue = CType("",String)
            Me.columnEngineer.DefaultValue = CType("",String)
            Me.columnContractor.DefaultValue = CType("",String)
            Me.columnLightingDesigner.DefaultValue = CType("",String)
            Me.columnSpecifier.DefaultValue = CType("",String)
            Me.columnOther.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewQuoteRealLURow() As QuoteRealLURow
            Return CType(Me.NewRow,QuoteRealLURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QuoteRealLURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QuoteRealLURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QuoteRealLURowChangedEvent) Is Nothing) Then
                RaiseEvent QuoteRealLURowChanged(Me, New QuoteRealLURowChangeEvent(CType(e.Row,QuoteRealLURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QuoteRealLURowChangingEvent) Is Nothing) Then
                RaiseEvent QuoteRealLURowChanging(Me, New QuoteRealLURowChangeEvent(CType(e.Row,QuoteRealLURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QuoteRealLURowDeletedEvent) Is Nothing) Then
                RaiseEvent QuoteRealLURowDeleted(Me, New QuoteRealLURowChangeEvent(CType(e.Row,QuoteRealLURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QuoteRealLURowDeletingEvent) Is Nothing) Then
                RaiseEvent QuoteRealLURowDeleting(Me, New QuoteRealLURowChangeEvent(CType(e.Row,QuoteRealLURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveQuoteRealLURow(ByVal row As QuoteRealLURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QuoteRealLUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class quotelinesDataTable
        Inherits Global.System.Data.TypedTableBase(Of quotelinesRow)
        
        Private columnLineID As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnMFG As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnProdID As Global.System.Data.DataColumn
        
        Private columnLPMFG As Global.System.Data.DataColumn
        
        Private columnLPDesc As Global.System.Data.DataColumn
        
        Private columnLPProdID As Global.System.Data.DataColumn
        
        Private columnSpecCross As Global.System.Data.DataColumn
        
        Private columnSPANumber As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnLastChgDate As Global.System.Data.DataColumn
        
        Private columnLastChgBy As Global.System.Data.DataColumn
        
        Private columnActive As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnNoteLine As Global.System.Data.DataColumn
        
        Private columnGot As Global.System.Data.DataColumn
        
        Private columnLpCode As Global.System.Data.DataColumn
        
        Private columnLnSeq As Global.System.Data.DataColumn
        
        Private columnLnCode As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnSell As Global.System.Data.DataColumn
        
        Private columnComm As Global.System.Data.DataColumn
        
        Private columnUOverage As Global.System.Data.DataColumn
        
        Private columnPrice1 As Global.System.Data.DataColumn
        
        Private columnPrice2 As Global.System.Data.DataColumn
        
        Private columnPrice3 As Global.System.Data.DataColumn
        
        Private columnPrice4 As Global.System.Data.DataColumn
        
        Private columnPrice5 As Global.System.Data.DataColumn
        
        Private columnPrice6 As Global.System.Data.DataColumn
        
        Private columnPrice7 As Global.System.Data.DataColumn
        
        Private columnPrice8 As Global.System.Data.DataColumn
        
        Private columnPrice9 As Global.System.Data.DataColumn
        
        Private columnPrice10 As Global.System.Data.DataColumn
        
        Private columnLPCost As Global.System.Data.DataColumn
        
        Private columnLPSell As Global.System.Data.DataColumn
        
        Private columnLPQty As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnOverageSplit As Global.System.Data.DataColumn
        
        Private columnUM As Global.System.Data.DataColumn
        
        Private columnVendorCode As Global.System.Data.DataColumn
        
        Private columnPriceCode As Global.System.Data.DataColumn
        
        Private columnLampsIncl As Global.System.Data.DataColumn
        
        Private columnPaid As Global.System.Data.DataColumn
        
        Private _columnBkComm As Global.System.Data.DataColumn
        
        Private columnLastSaveDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "quotelines"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LineIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MFGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProdIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProdID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPMFGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPMFG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPProdIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPProdID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCrossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCross
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPANumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPANumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ActiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NoteLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoteLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LpCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLpCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LnSeqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLnSeq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LnCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UOverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Price10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPSellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OverageSplitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverageSplit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VendorCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PriceCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriceCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LampsInclColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLampsIncl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property _BkCommColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnBkComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastSaveDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastSaveDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As quotelinesRow
            Get
                Return CType(Me.Rows(index),quotelinesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event quotelinesRowChanging As quotelinesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event quotelinesRowChanged As quotelinesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event quotelinesRowDeleting As quotelinesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event quotelinesRowDeleted As quotelinesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddquotelinesRow(ByVal row As quotelinesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddquotelinesRow( _
                    ByVal LineID As UInteger,  _
                    ByVal parentquoteRowByfk_quotelines As quoteRow,  _
                    ByVal Type As String,  _
                    ByVal MFG As String,  _
                    ByVal Description As String,  _
                    ByVal ProdID As UInteger,  _
                    ByVal LPMFG As String,  _
                    ByVal LPDesc As String,  _
                    ByVal LPProdID As UInteger,  _
                    ByVal SpecCross As String,  _
                    ByVal SPANumber As String,  _
                    ByVal EntryDate As Date,  _
                    ByVal LastChgDate As Date,  _
                    ByVal LastChgBy As String,  _
                    ByVal Active As Boolean,  _
                    ByVal Comments As String,  _
                    ByVal NoteLine As Boolean,  _
                    ByVal Got As Boolean,  _
                    ByVal LPCode As String,  _
                    ByVal LnSeq As Decimal,  _
                    ByVal LnCode As String,  _
                    ByVal BranchCode As String,  _
                    ByVal Cost As String,  _
                    ByVal Sell As String,  _
                    ByVal Comm As String,  _
                    ByVal UOverage As String,  _
                    ByVal Price1 As String,  _
                    ByVal Price2 As String,  _
                    ByVal Price3 As String,  _
                    ByVal Price4 As String,  _
                    ByVal Price5 As String,  _
                    ByVal Price6 As String,  _
                    ByVal Price7 As String,  _
                    ByVal Price8 As String,  _
                    ByVal Price9 As String,  _
                    ByVal Price10 As String,  _
                    ByVal LPCost As String,  _
                    ByVal LPSell As String,  _
                    ByVal LPQty As String,  _
                    ByVal Qty As String,  _
                    ByVal OverageSplit As String,  _
                    ByVal UM As String,  _
                    ByVal VendorCode As String,  _
                    ByVal PriceCode As String,  _
                    ByVal LampsIncl As String,  _
                    ByVal Paid As String,  _
                    ByVal _BkComm As String,  _
                    ByVal LastSaveDate As Date) As quotelinesRow
            Dim rowquotelinesRow As quotelinesRow = CType(Me.NewRow,quotelinesRow)
            Dim columnValuesArray() As Object = New Object() {LineID, Nothing, Type, MFG, Description, ProdID, LPMFG, LPDesc, LPProdID, SpecCross, SPANumber, EntryDate, LastChgDate, LastChgBy, Active, Comments, NoteLine, Got, LPCode, LnSeq, LnCode, BranchCode, Cost, Sell, Comm, UOverage, Price1, Price2, Price3, Price4, Price5, Price6, Price7, Price8, Price9, Price10, LPCost, LPSell, LPQty, Qty, OverageSplit, UM, VendorCode, PriceCode, LampsIncl, Paid, _BkComm, LastSaveDate}
            If (Not (parentquoteRowByfk_quotelines) Is Nothing) Then
                columnValuesArray(1) = parentquoteRowByfk_quotelines(0)
            End If
            rowquotelinesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowquotelinesRow)
            Return rowquotelinesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByLineID(ByVal LineID As UInteger) As quotelinesRow
            Return CType(Me.Rows.Find(New Object() {LineID}),quotelinesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As quotelinesDataTable = CType(MyBase.Clone,quotelinesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New quotelinesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnLineID = MyBase.Columns("LineID")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
            Me.columnType = MyBase.Columns("Type")
            Me.columnMFG = MyBase.Columns("MFG")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnProdID = MyBase.Columns("ProdID")
            Me.columnLPMFG = MyBase.Columns("LPMFG")
            Me.columnLPDesc = MyBase.Columns("LPDesc")
            Me.columnLPProdID = MyBase.Columns("LPProdID")
            Me.columnSpecCross = MyBase.Columns("SpecCross")
            Me.columnSPANumber = MyBase.Columns("SPANumber")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnLastChgDate = MyBase.Columns("LastChgDate")
            Me.columnLastChgBy = MyBase.Columns("LastChgBy")
            Me.columnActive = MyBase.Columns("Active")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnNoteLine = MyBase.Columns("NoteLine")
            Me.columnGot = MyBase.Columns("Got")
            Me.columnLpCode = MyBase.Columns("LPCode")
            Me.columnLnSeq = MyBase.Columns("LnSeq")
            Me.columnLnCode = MyBase.Columns("LnCode")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnSell = MyBase.Columns("Sell")
            Me.columnComm = MyBase.Columns("Comm")
            Me.columnUOverage = MyBase.Columns("UOverage")
            Me.columnPrice1 = MyBase.Columns("Price1")
            Me.columnPrice2 = MyBase.Columns("Price2")
            Me.columnPrice3 = MyBase.Columns("Price3")
            Me.columnPrice4 = MyBase.Columns("Price4")
            Me.columnPrice5 = MyBase.Columns("Price5")
            Me.columnPrice6 = MyBase.Columns("Price6")
            Me.columnPrice7 = MyBase.Columns("Price7")
            Me.columnPrice8 = MyBase.Columns("Price8")
            Me.columnPrice9 = MyBase.Columns("Price9")
            Me.columnPrice10 = MyBase.Columns("Price10")
            Me.columnLPCost = MyBase.Columns("LPCost")
            Me.columnLPSell = MyBase.Columns("LPSell")
            Me.columnLPQty = MyBase.Columns("LPQty")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnOverageSplit = MyBase.Columns("OverageSplit")
            Me.columnUM = MyBase.Columns("UM")
            Me.columnVendorCode = MyBase.Columns("VendorCode")
            Me.columnPriceCode = MyBase.Columns("PriceCode")
            Me.columnLampsIncl = MyBase.Columns("LampsIncl")
            Me.columnPaid = MyBase.Columns("Paid")
            Me._columnBkComm = MyBase.Columns("BkComm")
            Me.columnLastSaveDate = MyBase.Columns("LastSaveDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnLineID = New Global.System.Data.DataColumn("LineID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineID)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnMFG = New Global.System.Data.DataColumn("MFG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFG)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnProdID = New Global.System.Data.DataColumn("ProdID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProdID)
            Me.columnLPMFG = New Global.System.Data.DataColumn("LPMFG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPMFG)
            Me.columnLPDesc = New Global.System.Data.DataColumn("LPDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPDesc)
            Me.columnLPProdID = New Global.System.Data.DataColumn("LPProdID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPProdID)
            Me.columnSpecCross = New Global.System.Data.DataColumn("SpecCross", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCross)
            Me.columnSPANumber = New Global.System.Data.DataColumn("SPANumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPANumber)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnLastChgDate = New Global.System.Data.DataColumn("LastChgDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgDate)
            Me.columnLastChgBy = New Global.System.Data.DataColumn("LastChgBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgBy)
            Me.columnActive = New Global.System.Data.DataColumn("Active", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActive)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnNoteLine = New Global.System.Data.DataColumn("NoteLine", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoteLine)
            Me.columnGot = New Global.System.Data.DataColumn("Got", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGot)
            Me.columnLpCode = New Global.System.Data.DataColumn("LPCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnLpCode.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "LpCodeColumn")
            Me.columnLpCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLpCode")
            Me.columnLpCode.ExtendedProperties.Add("Generator_UserColumnName", "LPCode")
            MyBase.Columns.Add(Me.columnLpCode)
            Me.columnLnSeq = New Global.System.Data.DataColumn("LnSeq", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLnSeq)
            Me.columnLnCode = New Global.System.Data.DataColumn("LnCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLnCode)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnSell = New Global.System.Data.DataColumn("Sell", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell)
            Me.columnComm = New Global.System.Data.DataColumn("Comm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComm)
            Me.columnUOverage = New Global.System.Data.DataColumn("UOverage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOverage)
            Me.columnPrice1 = New Global.System.Data.DataColumn("Price1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice1)
            Me.columnPrice2 = New Global.System.Data.DataColumn("Price2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice2)
            Me.columnPrice3 = New Global.System.Data.DataColumn("Price3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice3)
            Me.columnPrice4 = New Global.System.Data.DataColumn("Price4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice4)
            Me.columnPrice5 = New Global.System.Data.DataColumn("Price5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice5)
            Me.columnPrice6 = New Global.System.Data.DataColumn("Price6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice6)
            Me.columnPrice7 = New Global.System.Data.DataColumn("Price7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice7)
            Me.columnPrice8 = New Global.System.Data.DataColumn("Price8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice8)
            Me.columnPrice9 = New Global.System.Data.DataColumn("Price9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice9)
            Me.columnPrice10 = New Global.System.Data.DataColumn("Price10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice10)
            Me.columnLPCost = New Global.System.Data.DataColumn("LPCost", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPCost)
            Me.columnLPSell = New Global.System.Data.DataColumn("LPSell", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPSell)
            Me.columnLPQty = New Global.System.Data.DataColumn("LPQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPQty)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnOverageSplit = New Global.System.Data.DataColumn("OverageSplit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverageSplit)
            Me.columnUM = New Global.System.Data.DataColumn("UM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUM)
            Me.columnVendorCode = New Global.System.Data.DataColumn("VendorCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorCode)
            Me.columnPriceCode = New Global.System.Data.DataColumn("PriceCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriceCode)
            Me.columnLampsIncl = New Global.System.Data.DataColumn("LampsIncl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLampsIncl)
            Me.columnPaid = New Global.System.Data.DataColumn("Paid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaid)
            Me._columnBkComm = New Global.System.Data.DataColumn("BkComm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnBkComm.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_BkComm")
            Me._columnBkComm.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_BkCommColumn")
            Me._columnBkComm.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnBkComm")
            Me._columnBkComm.ExtendedProperties.Add("Generator_UserColumnName", "BkComm")
            MyBase.Columns.Add(Me._columnBkComm)
            Me.columnLastSaveDate = New Global.System.Data.DataColumn("LastSaveDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastSaveDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLineID}, true))
            Me.columnLineID.AllowDBNull = false
            Me.columnLineID.Unique = true
            Me.columnQuoteID.AllowDBNull = false
            Me.columnType.AllowDBNull = false
            Me.columnType.MaxLength = 10
            Me.columnMFG.AllowDBNull = false
            Me.columnMFG.MaxLength = 8
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 75
            Me.columnProdID.AllowDBNull = false
            Me.columnLPMFG.AllowDBNull = false
            Me.columnLPMFG.MaxLength = 8
            Me.columnLPDesc.AllowDBNull = false
            Me.columnLPDesc.MaxLength = 60
            Me.columnLPProdID.AllowDBNull = false
            Me.columnSpecCross.AllowDBNull = false
            Me.columnSpecCross.MaxLength = 1
            Me.columnSPANumber.AllowDBNull = false
            Me.columnSPANumber.MaxLength = 20
            Me.columnEntryDate.AllowDBNull = false
            Me.columnLastChgDate.AllowDBNull = false
            Me.columnLastChgBy.AllowDBNull = false
            Me.columnLastChgBy.MaxLength = 3
            Me.columnActive.AllowDBNull = false
            Me.columnComments.AllowDBNull = false
            Me.columnComments.MaxLength = 100
            Me.columnNoteLine.AllowDBNull = false
            Me.columnGot.AllowDBNull = false
            Me.columnLpCode.AllowDBNull = false
            Me.columnLpCode.MaxLength = 10
            Me.columnLnSeq.AllowDBNull = false
            Me.columnLnCode.AllowDBNull = false
            Me.columnLnCode.MaxLength = 3
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnCost.AllowDBNull = false
            Me.columnCost.MaxLength = 12
            Me.columnSell.AllowDBNull = false
            Me.columnSell.MaxLength = 12
            Me.columnComm.AllowDBNull = false
            Me.columnComm.MaxLength = 12
            Me.columnUOverage.AllowDBNull = false
            Me.columnUOverage.MaxLength = 12
            Me.columnPrice1.AllowDBNull = false
            Me.columnPrice1.MaxLength = 12
            Me.columnPrice2.AllowDBNull = false
            Me.columnPrice2.MaxLength = 12
            Me.columnPrice3.AllowDBNull = false
            Me.columnPrice3.MaxLength = 12
            Me.columnPrice4.AllowDBNull = false
            Me.columnPrice4.MaxLength = 12
            Me.columnPrice5.AllowDBNull = false
            Me.columnPrice5.MaxLength = 12
            Me.columnPrice6.AllowDBNull = false
            Me.columnPrice6.MaxLength = 12
            Me.columnPrice7.AllowDBNull = false
            Me.columnPrice7.MaxLength = 12
            Me.columnPrice8.AllowDBNull = false
            Me.columnPrice8.MaxLength = 12
            Me.columnPrice9.AllowDBNull = false
            Me.columnPrice9.MaxLength = 12
            Me.columnPrice10.AllowDBNull = false
            Me.columnPrice10.MaxLength = 12
            Me.columnLPCost.AllowDBNull = false
            Me.columnLPCost.MaxLength = 12
            Me.columnLPSell.AllowDBNull = false
            Me.columnLPSell.MaxLength = 12
            Me.columnLPQty.AllowDBNull = false
            Me.columnLPQty.MaxLength = 12
            Me.columnQty.AllowDBNull = false
            Me.columnQty.MaxLength = 12
            Me.columnOverageSplit.AllowDBNull = false
            Me.columnOverageSplit.MaxLength = 12
            Me.columnUM.AllowDBNull = false
            Me.columnUM.MaxLength = 2
            Me.columnVendorCode.AllowDBNull = false
            Me.columnVendorCode.MaxLength = 10
            Me.columnPriceCode.AllowDBNull = false
            Me._columnBkComm.AllowDBNull = false
            Me._columnBkComm.MaxLength = 12
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewquotelinesRow() As quotelinesRow
            Return CType(Me.NewRow,quotelinesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New quotelinesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(quotelinesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.quotelinesRowChangedEvent) Is Nothing) Then
                RaiseEvent quotelinesRowChanged(Me, New quotelinesRowChangeEvent(CType(e.Row,quotelinesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.quotelinesRowChangingEvent) Is Nothing) Then
                RaiseEvent quotelinesRowChanging(Me, New quotelinesRowChangeEvent(CType(e.Row,quotelinesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.quotelinesRowDeletedEvent) Is Nothing) Then
                RaiseEvent quotelinesRowDeleted(Me, New quotelinesRowChangeEvent(CType(e.Row,quotelinesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.quotelinesRowDeletingEvent) Is Nothing) Then
                RaiseEvent quotelinesRowDeleting(Me, New quotelinesRowChangeEvent(CType(e.Row,quotelinesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovequotelinesRow(ByVal row As quotelinesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "quotelinesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class namedetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of namedetailRow)
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnFirmName As Global.System.Data.DataColumn
        
        Private columnBusinessType As Global.System.Data.DataColumn
        
        Private columnRetrievalCodes As Global.System.Data.DataColumn
        
        Private columnSoldTo As Global.System.Data.DataColumn
        
        Private columnSLSRegion As Global.System.Data.DataColumn
        
        Private columnSLSTerritory As Global.System.Data.DataColumn
        
        Private columnSLSState As Global.System.Data.DataColumn
        
        Private columnCredit As Global.System.Data.DataColumn
        
        Private columnCreditLimit As Global.System.Data.DataColumn
        
        Private columnShippingInstr As Global.System.Data.DataColumn
        
        Private columnAddr1 As Global.System.Data.DataColumn
        
        Private columnAddr2 As Global.System.Data.DataColumn
        
        Private columnAddr3 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnLastChgBy As Global.System.Data.DataColumn
        
        Private columnCSR As Global.System.Data.DataColumn
        
        Private columnActive As Global.System.Data.DataColumn
        
        Private columnCounty As Global.System.Data.DataColumn
        
        Private columnTaxCode As Global.System.Data.DataColumn
        
        Private columnTaxID As Global.System.Data.DataColumn
        
        Private columnShipLoc As Global.System.Data.DataColumn
        
        Private columnOrdSelectCode As Global.System.Data.DataColumn
        
        Private columnLastChgDate As Global.System.Data.DataColumn
        
        Private columnShortName As Global.System.Data.DataColumn
        
        Private columnPriceGroup As Global.System.Data.DataColumn
        
        Private columnWebStatus As Global.System.Data.DataColumn
        
        Private columnReleaseNumber As Global.System.Data.DataColumn
        
        Private columnLastSaveDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "namedetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FirmNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirmName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BusinessTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RetrievalCodesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrievalCodes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SoldToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSoldTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSRegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSTerritoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSTerritory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CreditLimitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditLimit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShippingInstrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShippingInstr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Addr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Addr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Addr3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddr3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ActiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CountyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TaxCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TaxIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShipLocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipLoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdSelectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdSelectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShortNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShortName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PriceGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriceGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WebStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWebStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReleaseNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReleaseNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastSaveDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastSaveDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As namedetailRow
            Get
                Return CType(Me.Rows(index),namedetailRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namedetailRowChanging As namedetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namedetailRowChanged As namedetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namedetailRowDeleting As namedetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namedetailRowDeleted As namedetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddnamedetailRow(ByVal row As namedetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddnamedetailRow( _
                    ByVal Code As String,  _
                    ByVal FirmName As String,  _
                    ByVal BusinessType As String,  _
                    ByVal RetrievalCodes As String,  _
                    ByVal SoldTo As String,  _
                    ByVal SLSRegion As String,  _
                    ByVal SLSTerritory As String,  _
                    ByVal SLSState As String,  _
                    ByVal Credit As String,  _
                    ByVal CreditLimit As String,  _
                    ByVal ShippingInstr As String,  _
                    ByVal Addr1 As String,  _
                    ByVal Addr2 As String,  _
                    ByVal Addr3 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal Country As String,  _
                    ByVal LastChgBy As String,  _
                    ByVal CSR As String,  _
                    ByVal Active As String,  _
                    ByVal County As String,  _
                    ByVal TaxCode As String,  _
                    ByVal TaxID As String,  _
                    ByVal ShipLoc As String,  _
                    ByVal OrdSelectCode As String,  _
                    ByVal LastChgDate As Date,  _
                    ByVal ShortName As String,  _
                    ByVal PriceGroup As String,  _
                    ByVal WebStatus As Byte,  _
                    ByVal ReleaseNumber As String,  _
                    ByVal LastSaveDate As Date) As namedetailRow
            Dim rownamedetailRow As namedetailRow = CType(Me.NewRow,namedetailRow)
            Dim columnValuesArray() As Object = New Object() {Code, FirmName, BusinessType, RetrievalCodes, SoldTo, SLSRegion, SLSTerritory, SLSState, Credit, CreditLimit, ShippingInstr, Addr1, Addr2, Addr3, City, State, Zip, Country, LastChgBy, CSR, Active, County, TaxCode, TaxID, ShipLoc, OrdSelectCode, LastChgDate, ShortName, PriceGroup, WebStatus, ReleaseNumber, LastSaveDate}
            rownamedetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rownamedetailRow)
            Return rownamedetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCode(ByVal Code As String) As namedetailRow
            Return CType(Me.Rows.Find(New Object() {Code}),namedetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As namedetailDataTable = CType(MyBase.Clone,namedetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New namedetailDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCode = MyBase.Columns("Code")
            Me.columnFirmName = MyBase.Columns("FirmName")
            Me.columnBusinessType = MyBase.Columns("BusinessType")
            Me.columnRetrievalCodes = MyBase.Columns("RetrievalCodes")
            Me.columnSoldTo = MyBase.Columns("SoldTo")
            Me.columnSLSRegion = MyBase.Columns("SLSRegion")
            Me.columnSLSTerritory = MyBase.Columns("SLSTerritory")
            Me.columnSLSState = MyBase.Columns("SLSState")
            Me.columnCredit = MyBase.Columns("Credit")
            Me.columnCreditLimit = MyBase.Columns("CreditLimit")
            Me.columnShippingInstr = MyBase.Columns("ShippingInstr")
            Me.columnAddr1 = MyBase.Columns("Addr1")
            Me.columnAddr2 = MyBase.Columns("Addr2")
            Me.columnAddr3 = MyBase.Columns("Addr3")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnLastChgBy = MyBase.Columns("LastChgBy")
            Me.columnCSR = MyBase.Columns("CSR")
            Me.columnActive = MyBase.Columns("Active")
            Me.columnCounty = MyBase.Columns("County")
            Me.columnTaxCode = MyBase.Columns("TaxCode")
            Me.columnTaxID = MyBase.Columns("TaxID")
            Me.columnShipLoc = MyBase.Columns("ShipLoc")
            Me.columnOrdSelectCode = MyBase.Columns("OrdSelectCode")
            Me.columnLastChgDate = MyBase.Columns("LastChgDate")
            Me.columnShortName = MyBase.Columns("ShortName")
            Me.columnPriceGroup = MyBase.Columns("PriceGroup")
            Me.columnWebStatus = MyBase.Columns("WebStatus")
            Me.columnReleaseNumber = MyBase.Columns("ReleaseNumber")
            Me.columnLastSaveDate = MyBase.Columns("LastSaveDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnFirmName = New Global.System.Data.DataColumn("FirmName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirmName)
            Me.columnBusinessType = New Global.System.Data.DataColumn("BusinessType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessType)
            Me.columnRetrievalCodes = New Global.System.Data.DataColumn("RetrievalCodes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrievalCodes)
            Me.columnSoldTo = New Global.System.Data.DataColumn("SoldTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSoldTo)
            Me.columnSLSRegion = New Global.System.Data.DataColumn("SLSRegion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSRegion)
            Me.columnSLSTerritory = New Global.System.Data.DataColumn("SLSTerritory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSTerritory)
            Me.columnSLSState = New Global.System.Data.DataColumn("SLSState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSState)
            Me.columnCredit = New Global.System.Data.DataColumn("Credit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredit)
            Me.columnCreditLimit = New Global.System.Data.DataColumn("CreditLimit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditLimit)
            Me.columnShippingInstr = New Global.System.Data.DataColumn("ShippingInstr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShippingInstr)
            Me.columnAddr1 = New Global.System.Data.DataColumn("Addr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddr1)
            Me.columnAddr2 = New Global.System.Data.DataColumn("Addr2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddr2)
            Me.columnAddr3 = New Global.System.Data.DataColumn("Addr3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddr3)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnLastChgBy = New Global.System.Data.DataColumn("LastChgBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgBy)
            Me.columnCSR = New Global.System.Data.DataColumn("CSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSR)
            Me.columnActive = New Global.System.Data.DataColumn("Active", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActive)
            Me.columnCounty = New Global.System.Data.DataColumn("County", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounty)
            Me.columnTaxCode = New Global.System.Data.DataColumn("TaxCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxCode)
            Me.columnTaxID = New Global.System.Data.DataColumn("TaxID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxID)
            Me.columnShipLoc = New Global.System.Data.DataColumn("ShipLoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipLoc)
            Me.columnOrdSelectCode = New Global.System.Data.DataColumn("OrdSelectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdSelectCode)
            Me.columnLastChgDate = New Global.System.Data.DataColumn("LastChgDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgDate)
            Me.columnShortName = New Global.System.Data.DataColumn("ShortName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShortName)
            Me.columnPriceGroup = New Global.System.Data.DataColumn("PriceGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriceGroup)
            Me.columnWebStatus = New Global.System.Data.DataColumn("WebStatus", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWebStatus)
            Me.columnReleaseNumber = New Global.System.Data.DataColumn("ReleaseNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReleaseNumber)
            Me.columnLastSaveDate = New Global.System.Data.DataColumn("LastSaveDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastSaveDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCode}, true))
            Me.columnCode.AllowDBNull = false
            Me.columnCode.Unique = true
            Me.columnCode.MaxLength = 8
            Me.columnFirmName.AllowDBNull = false
            Me.columnFirmName.MaxLength = 35
            Me.columnBusinessType.AllowDBNull = false
            Me.columnBusinessType.MaxLength = 1
            Me.columnRetrievalCodes.AllowDBNull = false
            Me.columnRetrievalCodes.MaxLength = 10
            Me.columnSoldTo.AllowDBNull = false
            Me.columnSoldTo.MaxLength = 8
            Me.columnSLSRegion.AllowDBNull = false
            Me.columnSLSRegion.MaxLength = 3
            Me.columnSLSTerritory.AllowDBNull = false
            Me.columnSLSTerritory.MaxLength = 3
            Me.columnSLSState.AllowDBNull = false
            Me.columnSLSState.MaxLength = 2
            Me.columnCredit.AllowDBNull = false
            Me.columnCredit.MaxLength = 2
            Me.columnCreditLimit.AllowDBNull = false
            Me.columnCreditLimit.MaxLength = 3
            Me.columnShippingInstr.AllowDBNull = false
            Me.columnShippingInstr.MaxLength = 65535
            Me.columnAddr1.AllowDBNull = false
            Me.columnAddr1.MaxLength = 35
            Me.columnAddr2.AllowDBNull = false
            Me.columnAddr2.MaxLength = 35
            Me.columnAddr3.AllowDBNull = false
            Me.columnAddr3.MaxLength = 35
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 20
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 10
            Me.columnZip.AllowDBNull = false
            Me.columnZip.MaxLength = 10
            Me.columnCountry.AllowDBNull = false
            Me.columnCountry.MaxLength = 20
            Me.columnLastChgBy.AllowDBNull = false
            Me.columnLastChgBy.MaxLength = 3
            Me.columnCSR.AllowDBNull = false
            Me.columnCSR.MaxLength = 3
            Me.columnActive.AllowDBNull = false
            Me.columnActive.MaxLength = 1
            Me.columnCounty.AllowDBNull = false
            Me.columnCounty.MaxLength = 20
            Me.columnTaxCode.AllowDBNull = false
            Me.columnTaxCode.MaxLength = 10
            Me.columnTaxID.AllowDBNull = false
            Me.columnTaxID.MaxLength = 30
            Me.columnShipLoc.AllowDBNull = false
            Me.columnShipLoc.MaxLength = 3
            Me.columnOrdSelectCode.AllowDBNull = false
            Me.columnOrdSelectCode.MaxLength = 1
            Me.columnLastChgDate.AllowDBNull = false
            Me.columnShortName.AllowDBNull = false
            Me.columnShortName.MaxLength = 35
            Me.columnPriceGroup.AllowDBNull = false
            Me.columnPriceGroup.MaxLength = 8
            Me.columnWebStatus.AllowDBNull = false
            Me.columnReleaseNumber.AllowDBNull = false
            Me.columnReleaseNumber.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewnamedetailRow() As namedetailRow
            Return CType(Me.NewRow,namedetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New namedetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(namedetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.namedetailRowChangedEvent) Is Nothing) Then
                RaiseEvent namedetailRowChanged(Me, New namedetailRowChangeEvent(CType(e.Row,namedetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.namedetailRowChangingEvent) Is Nothing) Then
                RaiseEvent namedetailRowChanging(Me, New namedetailRowChangeEvent(CType(e.Row,namedetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.namedetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent namedetailRowDeleted(Me, New namedetailRowChangeEvent(CType(e.Row,namedetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.namedetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent namedetailRowDeleting(Me, New namedetailRowChangeEvent(CType(e.Row,namedetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovenamedetailRow(ByVal row As namedetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "namedetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class namedefaultsDataTable
        Inherits Global.System.Data.TypedTableBase(Of namedefaultsRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnNCode As Global.System.Data.DataColumn
        
        Private columnRecType As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "namedefaults"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As namedefaultsRow
            Get
                Return CType(Me.Rows(index),namedefaultsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namedefaultsRowChanging As namedefaultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namedefaultsRowChanged As namedefaultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namedefaultsRowDeleting As namedefaultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namedefaultsRowDeleted As namedefaultsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddnamedefaultsRow(ByVal row As namedefaultsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddnamedefaultsRow(ByVal id As UInteger, ByVal parentnamedetailRowByFKNameDefaults As namedetailRow, ByVal RecType As String, ByVal Category As String, ByVal Comments As String) As namedefaultsRow
            Dim rownamedefaultsRow As namedefaultsRow = CType(Me.NewRow,namedefaultsRow)
            Dim columnValuesArray() As Object = New Object() {id, Nothing, RecType, Category, Comments}
            If (Not (parentnamedetailRowByFKNameDefaults) Is Nothing) Then
                columnValuesArray(1) = parentnamedetailRowByFKNameDefaults(0)
            End If
            rownamedefaultsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rownamedefaultsRow)
            Return rownamedefaultsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As UInteger) As namedefaultsRow
            Return CType(Me.Rows.Find(New Object() {id}),namedefaultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As namedefaultsDataTable = CType(MyBase.Clone,namedefaultsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New namedefaultsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnNCode = MyBase.Columns("NCode")
            Me.columnRecType = MyBase.Columns("RecType")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnComments = MyBase.Columns("Comments")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnNCode = New Global.System.Data.DataColumn("NCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCode)
            Me.columnRecType = New Global.System.Data.DataColumn("RecType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecType)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnNCode.AllowDBNull = false
            Me.columnNCode.DefaultValue = CType("",String)
            Me.columnNCode.MaxLength = 8
            Me.columnRecType.AllowDBNull = false
            Me.columnRecType.DefaultValue = CType("",String)
            Me.columnRecType.MaxLength = 8
            Me.columnCategory.AllowDBNull = false
            Me.columnCategory.DefaultValue = CType("",String)
            Me.columnCategory.MaxLength = 8
            Me.columnComments.AllowDBNull = false
            Me.columnComments.DefaultValue = CType("",String)
            Me.columnComments.MaxLength = 65535
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewnamedefaultsRow() As namedefaultsRow
            Return CType(Me.NewRow,namedefaultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New namedefaultsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(namedefaultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.namedefaultsRowChangedEvent) Is Nothing) Then
                RaiseEvent namedefaultsRowChanged(Me, New namedefaultsRowChangeEvent(CType(e.Row,namedefaultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.namedefaultsRowChangingEvent) Is Nothing) Then
                RaiseEvent namedefaultsRowChanging(Me, New namedefaultsRowChangeEvent(CType(e.Row,namedefaultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.namedefaultsRowDeletedEvent) Is Nothing) Then
                RaiseEvent namedefaultsRowDeleted(Me, New namedefaultsRowChangeEvent(CType(e.Row,namedefaultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.namedefaultsRowDeletingEvent) Is Nothing) Then
                RaiseEvent namedefaultsRowDeleting(Me, New namedefaultsRowChangeEvent(CType(e.Row,namedefaultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovenamedefaultsRow(ByVal row As namedefaultsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "namedefaultsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class admingroupDataTable
        Inherits Global.System.Data.TypedTableBase(Of admingroupRow)
        
        Private columnGroupID As Global.System.Data.DataColumn
        
        Private columnGroupDescription As Global.System.Data.DataColumn
        
        Private columnDateAdded As Global.System.Data.DataColumn
        
        Private columnLastSavedDate As Global.System.Data.DataColumn
        
        Private columnLastSaveBy As Global.System.Data.DataColumn
        
        Private columnOrdSLSCode As Global.System.Data.DataColumn
        
        Private columnOrdSLSPct As Global.System.Data.DataColumn
        
        Private columnOrdSalesDol As Global.System.Data.DataColumn
        
        Private columnOrdCommDolPct As Global.System.Data.DataColumn
        
        Private columnOrderView As Global.System.Data.DataColumn
        
        Private columnOrdLock As Global.System.Data.DataColumn
        
        Private columnOrdPrtLUGrid As Global.System.Data.DataColumn
        
        Private columnQutSLSCode As Global.System.Data.DataColumn
        
        Private columnQutSLSPct As Global.System.Data.DataColumn
        
        Private columnQutSalesDol As Global.System.Data.DataColumn
        
        Private columnQutCommDolPct As Global.System.Data.DataColumn
        
        Private columnQuoteView As Global.System.Data.DataColumn
        
        Private columnQutLock As Global.System.Data.DataColumn
        
        Private columnQutPrtLUGrid As Global.System.Data.DataColumn
        
        Private columnProjSLSCode As Global.System.Data.DataColumn
        
        Private columnProjSLSPct As Global.System.Data.DataColumn
        
        Private columnProjSalesDol As Global.System.Data.DataColumn
        
        Private columnProjCommDolPct As Global.System.Data.DataColumn
        
        Private columnProjView As Global.System.Data.DataColumn
        
        Private columnProjLock As Global.System.Data.DataColumn
        
        Private columnProjAllowPrc As Global.System.Data.DataColumn
        
        Private columnProjAllowPO As Global.System.Data.DataColumn
        
        Private columnProjAllowBill As Global.System.Data.DataColumn
        
        Private columnProjPrtLUGrid As Global.System.Data.DataColumn
        
        Private columnNamSLS As Global.System.Data.DataColumn
        
        Private columnNamAddEdit As Global.System.Data.DataColumn
        
        Private columnNamView As Global.System.Data.DataColumn
        
        Private columnReportOrd As Global.System.Data.DataColumn
        
        Private columnReportInv As Global.System.Data.DataColumn
        
        Private columnReportQut As Global.System.Data.DataColumn
        
        Private columnReportProj As Global.System.Data.DataColumn
        
        Private columnReconcileInv As Global.System.Data.DataColumn
        
        Private columnNamOnlyChgSLS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "admingroup"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GroupIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GroupDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DateAddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateAdded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastSavedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastSavedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastSaveByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastSaveBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdSLSCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdSLSCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdSLSPctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdSLSPct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdSalesDolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdSalesDol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdCommDolPctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdCommDolPct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderViewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderView
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdLockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdLock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdPrtLUGridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdPrtLUGrid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QutSLSCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQutSLSCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QutSLSPctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQutSLSPct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QutSalesDolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQutSalesDol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QutCommDolPctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQutCommDolPct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteViewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteView
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QutLockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQutLock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QutPrtLUGridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQutPrtLUGrid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjSLSCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjSLSCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjSLSPctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjSLSPct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjSalesDolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjSalesDol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjCommDolPctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjCommDolPct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjViewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjView
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjLockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjLock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjAllowPrcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjAllowPrc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjAllowPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjAllowPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjAllowBillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjAllowBill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjPrtLUGridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjPrtLUGrid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NamSLSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNamSLS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NamAddEditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNamAddEdit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NamViewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNamView
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReportOrdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportOrd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReportInvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportInv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReportQutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportQut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReportProjColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportProj
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReconcileInvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReconcileInv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NamOnlyChgSLSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNamOnlyChgSLS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As admingroupRow
            Get
                Return CType(Me.Rows(index),admingroupRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event admingroupRowChanging As admingroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event admingroupRowChanged As admingroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event admingroupRowDeleting As admingroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event admingroupRowDeleted As admingroupRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddadmingroupRow(ByVal row As admingroupRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddadmingroupRow( _
                    ByVal GroupID As String,  _
                    ByVal GroupDescription As String,  _
                    ByVal DateAdded As Date,  _
                    ByVal LastSavedDate As Date,  _
                    ByVal LastSaveBy As String,  _
                    ByVal OrdSLSCode As String,  _
                    ByVal OrdSLSPct As String,  _
                    ByVal OrdSalesDol As String,  _
                    ByVal OrdCommDolPct As String,  _
                    ByVal OrderView As String,  _
                    ByVal OrdLock As String,  _
                    ByVal OrdPrtLUGrid As String,  _
                    ByVal QutSLSCode As String,  _
                    ByVal QutSLSPct As String,  _
                    ByVal QutSalesDol As String,  _
                    ByVal QutCommDolPct As String,  _
                    ByVal QuoteView As String,  _
                    ByVal QutLock As String,  _
                    ByVal QutPrtLUGrid As String,  _
                    ByVal ProjSLSCode As String,  _
                    ByVal ProjSLSPct As String,  _
                    ByVal ProjSalesDol As String,  _
                    ByVal ProjCommDolPct As String,  _
                    ByVal ProjView As String,  _
                    ByVal ProjLock As String,  _
                    ByVal ProjAllowPrc As String,  _
                    ByVal ProjAllowPO As String,  _
                    ByVal ProjAllowBill As String,  _
                    ByVal ProjPrtLUGrid As String,  _
                    ByVal NamSLS As String,  _
                    ByVal NamAddEdit As String,  _
                    ByVal NamView As String,  _
                    ByVal ReportOrd As String,  _
                    ByVal ReportInv As String,  _
                    ByVal ReportQut As String,  _
                    ByVal ReportProj As String,  _
                    ByVal ReconcileInv As String,  _
                    ByVal NamOnlyChgSLS As String) As admingroupRow
            Dim rowadmingroupRow As admingroupRow = CType(Me.NewRow,admingroupRow)
            Dim columnValuesArray() As Object = New Object() {GroupID, GroupDescription, DateAdded, LastSavedDate, LastSaveBy, OrdSLSCode, OrdSLSPct, OrdSalesDol, OrdCommDolPct, OrderView, OrdLock, OrdPrtLUGrid, QutSLSCode, QutSLSPct, QutSalesDol, QutCommDolPct, QuoteView, QutLock, QutPrtLUGrid, ProjSLSCode, ProjSLSPct, ProjSalesDol, ProjCommDolPct, ProjView, ProjLock, ProjAllowPrc, ProjAllowPO, ProjAllowBill, ProjPrtLUGrid, NamSLS, NamAddEdit, NamView, ReportOrd, ReportInv, ReportQut, ReportProj, ReconcileInv, NamOnlyChgSLS}
            rowadmingroupRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowadmingroupRow)
            Return rowadmingroupRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByGroupID(ByVal GroupID As String) As admingroupRow
            Return CType(Me.Rows.Find(New Object() {GroupID}),admingroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As admingroupDataTable = CType(MyBase.Clone,admingroupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New admingroupDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnGroupDescription = MyBase.Columns("GroupDescription")
            Me.columnDateAdded = MyBase.Columns("DateAdded")
            Me.columnLastSavedDate = MyBase.Columns("LastSavedDate")
            Me.columnLastSaveBy = MyBase.Columns("LastSaveBy")
            Me.columnOrdSLSCode = MyBase.Columns("OrdSLSCode")
            Me.columnOrdSLSPct = MyBase.Columns("OrdSLSPct")
            Me.columnOrdSalesDol = MyBase.Columns("OrdSalesDol")
            Me.columnOrdCommDolPct = MyBase.Columns("OrdCommDolPct")
            Me.columnOrderView = MyBase.Columns("OrderView")
            Me.columnOrdLock = MyBase.Columns("OrdLock")
            Me.columnOrdPrtLUGrid = MyBase.Columns("OrdPrtLUGrid")
            Me.columnQutSLSCode = MyBase.Columns("QutSLSCode")
            Me.columnQutSLSPct = MyBase.Columns("QutSLSPct")
            Me.columnQutSalesDol = MyBase.Columns("QutSalesDol")
            Me.columnQutCommDolPct = MyBase.Columns("QutCommDolPct")
            Me.columnQuoteView = MyBase.Columns("QuoteView")
            Me.columnQutLock = MyBase.Columns("QutLock")
            Me.columnQutPrtLUGrid = MyBase.Columns("QutPrtLUGrid")
            Me.columnProjSLSCode = MyBase.Columns("ProjSLSCode")
            Me.columnProjSLSPct = MyBase.Columns("ProjSLSPct")
            Me.columnProjSalesDol = MyBase.Columns("ProjSalesDol")
            Me.columnProjCommDolPct = MyBase.Columns("ProjCommDolPct")
            Me.columnProjView = MyBase.Columns("ProjView")
            Me.columnProjLock = MyBase.Columns("ProjLock")
            Me.columnProjAllowPrc = MyBase.Columns("ProjAllowPrc")
            Me.columnProjAllowPO = MyBase.Columns("ProjAllowPO")
            Me.columnProjAllowBill = MyBase.Columns("ProjAllowBill")
            Me.columnProjPrtLUGrid = MyBase.Columns("ProjPrtLUGrid")
            Me.columnNamSLS = MyBase.Columns("NamSLS")
            Me.columnNamAddEdit = MyBase.Columns("NamAddEdit")
            Me.columnNamView = MyBase.Columns("NamView")
            Me.columnReportOrd = MyBase.Columns("ReportOrd")
            Me.columnReportInv = MyBase.Columns("ReportInv")
            Me.columnReportQut = MyBase.Columns("ReportQut")
            Me.columnReportProj = MyBase.Columns("ReportProj")
            Me.columnReconcileInv = MyBase.Columns("ReconcileInv")
            Me.columnNamOnlyChgSLS = MyBase.Columns("NamOnlyChgSLS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGroupID = New Global.System.Data.DataColumn("GroupID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnGroupDescription = New Global.System.Data.DataColumn("GroupDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupDescription)
            Me.columnDateAdded = New Global.System.Data.DataColumn("DateAdded", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAdded)
            Me.columnLastSavedDate = New Global.System.Data.DataColumn("LastSavedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastSavedDate)
            Me.columnLastSaveBy = New Global.System.Data.DataColumn("LastSaveBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastSaveBy)
            Me.columnOrdSLSCode = New Global.System.Data.DataColumn("OrdSLSCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdSLSCode)
            Me.columnOrdSLSPct = New Global.System.Data.DataColumn("OrdSLSPct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdSLSPct)
            Me.columnOrdSalesDol = New Global.System.Data.DataColumn("OrdSalesDol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdSalesDol)
            Me.columnOrdCommDolPct = New Global.System.Data.DataColumn("OrdCommDolPct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdCommDolPct)
            Me.columnOrderView = New Global.System.Data.DataColumn("OrderView", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderView)
            Me.columnOrdLock = New Global.System.Data.DataColumn("OrdLock", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdLock)
            Me.columnOrdPrtLUGrid = New Global.System.Data.DataColumn("OrdPrtLUGrid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdPrtLUGrid)
            Me.columnQutSLSCode = New Global.System.Data.DataColumn("QutSLSCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQutSLSCode)
            Me.columnQutSLSPct = New Global.System.Data.DataColumn("QutSLSPct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQutSLSPct)
            Me.columnQutSalesDol = New Global.System.Data.DataColumn("QutSalesDol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQutSalesDol)
            Me.columnQutCommDolPct = New Global.System.Data.DataColumn("QutCommDolPct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQutCommDolPct)
            Me.columnQuoteView = New Global.System.Data.DataColumn("QuoteView", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteView)
            Me.columnQutLock = New Global.System.Data.DataColumn("QutLock", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQutLock)
            Me.columnQutPrtLUGrid = New Global.System.Data.DataColumn("QutPrtLUGrid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQutPrtLUGrid)
            Me.columnProjSLSCode = New Global.System.Data.DataColumn("ProjSLSCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjSLSCode)
            Me.columnProjSLSPct = New Global.System.Data.DataColumn("ProjSLSPct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjSLSPct)
            Me.columnProjSalesDol = New Global.System.Data.DataColumn("ProjSalesDol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjSalesDol)
            Me.columnProjCommDolPct = New Global.System.Data.DataColumn("ProjCommDolPct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjCommDolPct)
            Me.columnProjView = New Global.System.Data.DataColumn("ProjView", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjView)
            Me.columnProjLock = New Global.System.Data.DataColumn("ProjLock", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjLock)
            Me.columnProjAllowPrc = New Global.System.Data.DataColumn("ProjAllowPrc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjAllowPrc)
            Me.columnProjAllowPO = New Global.System.Data.DataColumn("ProjAllowPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjAllowPO)
            Me.columnProjAllowBill = New Global.System.Data.DataColumn("ProjAllowBill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjAllowBill)
            Me.columnProjPrtLUGrid = New Global.System.Data.DataColumn("ProjPrtLUGrid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjPrtLUGrid)
            Me.columnNamSLS = New Global.System.Data.DataColumn("NamSLS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNamSLS)
            Me.columnNamAddEdit = New Global.System.Data.DataColumn("NamAddEdit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNamAddEdit)
            Me.columnNamView = New Global.System.Data.DataColumn("NamView", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNamView)
            Me.columnReportOrd = New Global.System.Data.DataColumn("ReportOrd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportOrd)
            Me.columnReportInv = New Global.System.Data.DataColumn("ReportInv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportInv)
            Me.columnReportQut = New Global.System.Data.DataColumn("ReportQut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportQut)
            Me.columnReportProj = New Global.System.Data.DataColumn("ReportProj", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportProj)
            Me.columnReconcileInv = New Global.System.Data.DataColumn("ReconcileInv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReconcileInv)
            Me.columnNamOnlyChgSLS = New Global.System.Data.DataColumn("NamOnlyChgSLS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNamOnlyChgSLS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGroupID}, true))
            Me.columnGroupID.AllowDBNull = false
            Me.columnGroupID.Unique = true
            Me.columnGroupID.MaxLength = 8
            Me.columnGroupDescription.MaxLength = 65535
            Me.columnLastSaveBy.AllowDBNull = false
            Me.columnLastSaveBy.MaxLength = 3
            Me.columnOrdSLSCode.AllowDBNull = false
            Me.columnOrdSLSCode.MaxLength = 1
            Me.columnOrdSLSPct.AllowDBNull = false
            Me.columnOrdSLSPct.MaxLength = 1
            Me.columnOrdSalesDol.AllowDBNull = false
            Me.columnOrdSalesDol.MaxLength = 1
            Me.columnOrdCommDolPct.AllowDBNull = false
            Me.columnOrdCommDolPct.MaxLength = 1
            Me.columnOrderView.AllowDBNull = false
            Me.columnOrderView.MaxLength = 1
            Me.columnOrdLock.AllowDBNull = false
            Me.columnOrdLock.MaxLength = 8
            Me.columnOrdPrtLUGrid.AllowDBNull = false
            Me.columnOrdPrtLUGrid.MaxLength = 1
            Me.columnQutSLSCode.AllowDBNull = false
            Me.columnQutSLSCode.MaxLength = 1
            Me.columnQutSLSPct.AllowDBNull = false
            Me.columnQutSLSPct.MaxLength = 1
            Me.columnQutSalesDol.AllowDBNull = false
            Me.columnQutSalesDol.MaxLength = 1
            Me.columnQutCommDolPct.AllowDBNull = false
            Me.columnQutCommDolPct.MaxLength = 1
            Me.columnQuoteView.AllowDBNull = false
            Me.columnQuoteView.MaxLength = 1
            Me.columnQutLock.AllowDBNull = false
            Me.columnQutLock.MaxLength = 8
            Me.columnQutPrtLUGrid.AllowDBNull = false
            Me.columnQutPrtLUGrid.MaxLength = 1
            Me.columnProjSLSCode.AllowDBNull = false
            Me.columnProjSLSCode.MaxLength = 1
            Me.columnProjSLSPct.AllowDBNull = false
            Me.columnProjSLSPct.MaxLength = 1
            Me.columnProjSalesDol.AllowDBNull = false
            Me.columnProjSalesDol.MaxLength = 1
            Me.columnProjCommDolPct.AllowDBNull = false
            Me.columnProjCommDolPct.MaxLength = 1
            Me.columnProjView.AllowDBNull = false
            Me.columnProjView.MaxLength = 1
            Me.columnProjLock.AllowDBNull = false
            Me.columnProjLock.MaxLength = 8
            Me.columnProjAllowPrc.AllowDBNull = false
            Me.columnProjAllowPrc.MaxLength = 1
            Me.columnProjAllowPO.AllowDBNull = false
            Me.columnProjAllowPO.MaxLength = 1
            Me.columnProjAllowBill.AllowDBNull = false
            Me.columnProjAllowBill.MaxLength = 1
            Me.columnProjPrtLUGrid.AllowDBNull = false
            Me.columnProjPrtLUGrid.MaxLength = 1
            Me.columnNamSLS.AllowDBNull = false
            Me.columnNamSLS.MaxLength = 1
            Me.columnNamAddEdit.AllowDBNull = false
            Me.columnNamAddEdit.MaxLength = 1
            Me.columnNamView.AllowDBNull = false
            Me.columnNamView.MaxLength = 1
            Me.columnReportOrd.AllowDBNull = false
            Me.columnReportOrd.MaxLength = 1
            Me.columnReportInv.AllowDBNull = false
            Me.columnReportInv.MaxLength = 1
            Me.columnReportQut.AllowDBNull = false
            Me.columnReportQut.MaxLength = 1
            Me.columnReportProj.AllowDBNull = false
            Me.columnReportProj.MaxLength = 1
            Me.columnReconcileInv.AllowDBNull = false
            Me.columnReconcileInv.MaxLength = 1
            Me.columnNamOnlyChgSLS.AllowDBNull = false
            Me.columnNamOnlyChgSLS.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewadmingroupRow() As admingroupRow
            Return CType(Me.NewRow,admingroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New admingroupRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(admingroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.admingroupRowChangedEvent) Is Nothing) Then
                RaiseEvent admingroupRowChanged(Me, New admingroupRowChangeEvent(CType(e.Row,admingroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.admingroupRowChangingEvent) Is Nothing) Then
                RaiseEvent admingroupRowChanging(Me, New admingroupRowChangeEvent(CType(e.Row,admingroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.admingroupRowDeletedEvent) Is Nothing) Then
                RaiseEvent admingroupRowDeleted(Me, New admingroupRowChangeEvent(CType(e.Row,admingroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.admingroupRowDeletingEvent) Is Nothing) Then
                RaiseEvent admingroupRowDeleting(Me, New admingroupRowChangeEvent(CType(e.Row,admingroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveadmingroupRow(ByVal row As admingroupRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "admingroupDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class adminuserDataTable
        Inherits Global.System.Data.TypedTableBase(Of adminuserRow)
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnAdmin As Global.System.Data.DataColumn
        
        Private columnGroupID As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnPasswordExpires As Global.System.Data.DataColumn
        
        Private columnPasswordDate As Global.System.Data.DataColumn
        
        Private columnAdminBranches As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "adminuser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AdminColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdmin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GroupIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PasswordExpiresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasswordExpires
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PasswordDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasswordDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AdminBranchesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdminBranches
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As adminuserRow
            Get
                Return CType(Me.Rows(index),adminuserRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event adminuserRowChanging As adminuserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event adminuserRowChanged As adminuserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event adminuserRowDeleting As adminuserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event adminuserRowDeleted As adminuserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddadminuserRow(ByVal row As adminuserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddadminuserRow(ByVal UserID As String, ByVal Admin As String, ByVal GroupID As String, ByVal Password As String, ByVal PasswordExpires As Byte, ByVal PasswordDate As Date, ByVal AdminBranches As String) As adminuserRow
            Dim rowadminuserRow As adminuserRow = CType(Me.NewRow,adminuserRow)
            Dim columnValuesArray() As Object = New Object() {UserID, Admin, GroupID, Password, PasswordExpires, PasswordDate, AdminBranches}
            rowadminuserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowadminuserRow)
            Return rowadminuserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByUserID(ByVal UserID As String) As adminuserRow
            Return CType(Me.Rows.Find(New Object() {UserID}),adminuserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As adminuserDataTable = CType(MyBase.Clone,adminuserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New adminuserDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnAdmin = MyBase.Columns("Admin")
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnPasswordExpires = MyBase.Columns("PasswordExpires")
            Me.columnPasswordDate = MyBase.Columns("PasswordDate")
            Me.columnAdminBranches = MyBase.Columns("AdminBranches")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnAdmin = New Global.System.Data.DataColumn("Admin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdmin)
            Me.columnGroupID = New Global.System.Data.DataColumn("GroupID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnPasswordExpires = New Global.System.Data.DataColumn("PasswordExpires", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasswordExpires)
            Me.columnPasswordDate = New Global.System.Data.DataColumn("PasswordDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasswordDate)
            Me.columnAdminBranches = New Global.System.Data.DataColumn("AdminBranches", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdminBranches)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUserID}, true))
            Me.columnUserID.AllowDBNull = false
            Me.columnUserID.Unique = true
            Me.columnUserID.MaxLength = 3
            Me.columnAdmin.MaxLength = 8
            Me.columnGroupID.MaxLength = 8
            Me.columnPassword.AllowDBNull = false
            Me.columnPassword.MaxLength = 20
            Me.columnPasswordExpires.AllowDBNull = false
            Me.columnAdminBranches.MaxLength = 65535
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewadminuserRow() As adminuserRow
            Return CType(Me.NewRow,adminuserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New adminuserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(adminuserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.adminuserRowChangedEvent) Is Nothing) Then
                RaiseEvent adminuserRowChanged(Me, New adminuserRowChangeEvent(CType(e.Row,adminuserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.adminuserRowChangingEvent) Is Nothing) Then
                RaiseEvent adminuserRowChanging(Me, New adminuserRowChangeEvent(CType(e.Row,adminuserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.adminuserRowDeletedEvent) Is Nothing) Then
                RaiseEvent adminuserRowDeleted(Me, New adminuserRowChangeEvent(CType(e.Row,adminuserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.adminuserRowDeletingEvent) Is Nothing) Then
                RaiseEvent adminuserRowDeleting(Me, New adminuserRowChangeEvent(CType(e.Row,adminuserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveadminuserRow(ByVal row As adminuserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "adminuserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class namecontactDataTable
        Inherits Global.System.Data.TypedTableBase(Of namecontactRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnEmpName As Global.System.Data.DataColumn
        
        Private columnJobDesc As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDear As Global.System.Data.DataColumn
        
        Private columnEmpCode As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnExt As Global.System.Data.DataColumn
        
        Private columnActive As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "namecontact"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EmpNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JobDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EmpCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ExtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ActiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As namecontactRow
            Get
                Return CType(Me.Rows(index),namecontactRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namecontactRowChanging As namecontactRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namecontactRowChanged As namecontactRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namecontactRowDeleting As namecontactRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event namecontactRowDeleted As namecontactRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddnamecontactRow(ByVal row As namecontactRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddnamecontactRow(ByVal id As UInteger, ByVal parentnamedetailRowByFKContactCode As namedetailRow, ByVal Category As String, ByVal EmpName As String, ByVal JobDesc As String, ByVal Phone As String, ByVal Fax As String, ByVal Email As String, ByVal Dear As String, ByVal EmpCode As String, ByVal BranchCode As String, ByVal CellPhone As String, ByVal Ext As String, ByVal Active As String) As namecontactRow
            Dim rownamecontactRow As namecontactRow = CType(Me.NewRow,namecontactRow)
            Dim columnValuesArray() As Object = New Object() {id, Nothing, Category, EmpName, JobDesc, Phone, Fax, Email, Dear, EmpCode, BranchCode, CellPhone, Ext, Active}
            If (Not (parentnamedetailRowByFKContactCode) Is Nothing) Then
                columnValuesArray(1) = parentnamedetailRowByFKContactCode(0)
            End If
            rownamecontactRow.ItemArray = columnValuesArray
            Me.Rows.Add(rownamecontactRow)
            Return rownamecontactRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As UInteger) As namecontactRow
            Return CType(Me.Rows.Find(New Object() {id}),namecontactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As namecontactDataTable = CType(MyBase.Clone,namecontactDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New namecontactDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnCode = MyBase.Columns("Code")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnEmpName = MyBase.Columns("EmpName")
            Me.columnJobDesc = MyBase.Columns("JobDesc")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDear = MyBase.Columns("Dear")
            Me.columnEmpCode = MyBase.Columns("EmpCode")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnExt = MyBase.Columns("Ext")
            Me.columnActive = MyBase.Columns("Active")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnEmpName = New Global.System.Data.DataColumn("EmpName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpName)
            Me.columnJobDesc = New Global.System.Data.DataColumn("JobDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobDesc)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDear = New Global.System.Data.DataColumn("Dear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDear)
            Me.columnEmpCode = New Global.System.Data.DataColumn("EmpCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpCode)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnExt = New Global.System.Data.DataColumn("Ext", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExt)
            Me.columnActive = New Global.System.Data.DataColumn("Active", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActive)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnCode.AllowDBNull = false
            Me.columnCode.MaxLength = 8
            Me.columnCategory.AllowDBNull = false
            Me.columnCategory.MaxLength = 6
            Me.columnEmpName.AllowDBNull = false
            Me.columnEmpName.MaxLength = 35
            Me.columnJobDesc.AllowDBNull = false
            Me.columnJobDesc.MaxLength = 35
            Me.columnPhone.AllowDBNull = false
            Me.columnPhone.MaxLength = 30
            Me.columnFax.AllowDBNull = false
            Me.columnFax.MaxLength = 30
            Me.columnEmail.AllowDBNull = false
            Me.columnEmail.MaxLength = 100
            Me.columnDear.AllowDBNull = false
            Me.columnDear.MaxLength = 35
            Me.columnEmpCode.AllowDBNull = false
            Me.columnEmpCode.MaxLength = 3
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnCellPhone.AllowDBNull = false
            Me.columnCellPhone.MaxLength = 30
            Me.columnExt.AllowDBNull = false
            Me.columnExt.MaxLength = 5
            Me.columnActive.AllowDBNull = false
            Me.columnActive.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewnamecontactRow() As namecontactRow
            Return CType(Me.NewRow,namecontactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New namecontactRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(namecontactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.namecontactRowChangedEvent) Is Nothing) Then
                RaiseEvent namecontactRowChanged(Me, New namecontactRowChangeEvent(CType(e.Row,namecontactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.namecontactRowChangingEvent) Is Nothing) Then
                RaiseEvent namecontactRowChanging(Me, New namecontactRowChangeEvent(CType(e.Row,namecontactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.namecontactRowDeletedEvent) Is Nothing) Then
                RaiseEvent namecontactRowDeleted(Me, New namecontactRowChangeEvent(CType(e.Row,namecontactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.namecontactRowDeletingEvent) Is Nothing) Then
                RaiseEvent namecontactRowDeleting(Me, New namecontactRowChangeEvent(CType(e.Row,namecontactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovenamecontactRow(ByVal row As namecontactRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "namecontactDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QuoteRealNDULDataTable
        Inherits Global.System.Data.TypedTableBase(Of QuoteRealNDULRow)
        
        Private columnBUsinessType As Global.System.Data.DataColumn
        
        Private columnProjectCustID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnQuoteCode As Global.System.Data.DataColumn
        
        Private columnNCode As Global.System.Data.DataColumn
        
        Private columnFirmName As Global.System.Data.DataColumn
        
        Private columnContactName As Global.System.Data.DataColumn
        
        Private columnSLSCode As Global.System.Data.DataColumn
        
        Private columnGot As Global.System.Data.DataColumn
        
        Private columnTypec As Global.System.Data.DataColumn
        
        Private columnMFGQuoteNumber As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnSell As Global.System.Data.DataColumn
        
        Private columnComm As Global.System.Data.DataColumn
        
        Private columnOverage As Global.System.Data.DataColumn
        
        Private columnQuoteToDate As Global.System.Data.DataColumn
        
        Private columnOrdDate As Global.System.Data.DataColumn
        
        Private columnNotGot As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnSPANumber As Global.System.Data.DataColumn
        
        Private columnSpecCross As Global.System.Data.DataColumn
        
        Private columnLotUnit As Global.System.Data.DataColumn
        
        Private columnLPCost As Global.System.Data.DataColumn
        
        Private columnLPSell As Global.System.Data.DataColumn
        
        Private columnLPComm As Global.System.Data.DataColumn
        
        Private columnLampsIncl As Global.System.Data.DataColumn
        
        Private columnTerms As Global.System.Data.DataColumn
        
        Private columnFOB As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        Private columnBranchCode As Global.System.Data.DataColumn
        
        Private columnLeadTime As Global.System.Data.DataColumn
        
        Private columnLastChgDate As Global.System.Data.DataColumn
        
        Private columnLastChgBy As Global.System.Data.DataColumn
        
        Private columnRequested As Global.System.Data.DataColumn
        
        Private columnFileName As Global.System.Data.DataColumn
        
        Private columnSellQ As Global.System.Data.DataColumn
        
        Private columnCostQ As Global.System.Data.DataColumn
        
        Private columnCommQ As Global.System.Data.DataColumn
        
        Private columnJobName As Global.System.Data.DataColumn
        
        Private columnMarketSegment As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnBidDate As Global.System.Data.DataColumn
        
        Private columnSLSQ As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnRetrCode As Global.System.Data.DataColumn
        
        Private columnSelectCode As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnlastChgBy1 As Global.System.Data.DataColumn
        
        Private columnCSR As Global.System.Data.DataColumn
        
        Private columnLotUnit1 As Global.System.Data.DataColumn
        
        Private columnStockJob As Global.System.Data.DataColumn
        
        Private columnTypeOfJob As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QuoteRealNDUL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BUsinessTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUsinessType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectCustIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectCustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FirmNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirmName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ContactNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MFGQuoteNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFGQuoteNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteToDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteToDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrdDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NotGotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotGot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPANumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPANumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecCrossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecCross
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPSellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LPCommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LampsInclColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLampsIncl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TermsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BranchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LeadTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChgByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChgBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RequestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FileNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSellQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JobNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarketSegmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketSegment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RetrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SelectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property lastChgBy1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastChgBy1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotUnit1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotUnit1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StockJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeOfJobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QuoteRealNDULRow
            Get
                Return CType(Me.Rows(index),QuoteRealNDULRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QuoteRealNDULRowChanging As QuoteRealNDULRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QuoteRealNDULRowChanged As QuoteRealNDULRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QuoteRealNDULRowDeleting As QuoteRealNDULRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event QuoteRealNDULRowDeleted As QuoteRealNDULRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddQuoteRealNDULRow(ByVal row As QuoteRealNDULRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddQuoteRealNDULRow( _
                    ByVal BUsinessType As String,  _
                    ByVal ProjectCustID As UInteger,  _
                    ByVal ProjectID As UInteger,  _
                    ByVal QuoteCode As String,  _
                    ByVal NCode As String,  _
                    ByVal FirmName As String,  _
                    ByVal ContactName As String,  _
                    ByVal SLSCode As String,  _
                    ByVal Got As Boolean,  _
                    ByVal Typec As String,  _
                    ByVal MFGQuoteNumber As String,  _
                    ByVal Cost As Decimal,  _
                    ByVal Sell As Decimal,  _
                    ByVal Comm As Decimal,  _
                    ByVal Overage As Decimal,  _
                    ByVal QuoteToDate As Date,  _
                    ByVal OrdDate As Date,  _
                    ByVal NotGot As Boolean,  _
                    ByVal Comments As String,  _
                    ByVal SPANumber As String,  _
                    ByVal SpecCross As String,  _
                    ByVal LotUnit As String,  _
                    ByVal LPCost As Decimal,  _
                    ByVal LPSell As Decimal,  _
                    ByVal LPComm As Decimal,  _
                    ByVal LampsIncl As String,  _
                    ByVal Terms As String,  _
                    ByVal FOB As String,  _
                    ByVal QuoteID As UInteger,  _
                    ByVal BranchCode As String,  _
                    ByVal LeadTime As String,  _
                    ByVal LastChgDate As Date,  _
                    ByVal LastChgBy As String,  _
                    ByVal Requested As String,  _
                    ByVal FileName As String,  _
                    ByVal SellQ As Decimal,  _
                    ByVal CostQ As Decimal,  _
                    ByVal CommQ As Decimal,  _
                    ByVal JobName As String,  _
                    ByVal MarketSegment As String,  _
                    ByVal EntryDate As Date,  _
                    ByVal BidDate As Date,  _
                    ByVal SLSQ As String,  _
                    ByVal Status As String,  _
                    ByVal RetrCode As String,  _
                    ByVal SelectCode As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal lastChgBy1 As String,  _
                    ByVal CSR As String,  _
                    ByVal LotUnit1 As String,  _
                    ByVal StockJob As String,  _
                    ByVal TypeOfJob As String) As QuoteRealNDULRow
            Dim rowQuoteRealNDULRow As QuoteRealNDULRow = CType(Me.NewRow,QuoteRealNDULRow)
            Dim columnValuesArray() As Object = New Object() {BUsinessType, ProjectCustID, ProjectID, QuoteCode, NCode, FirmName, ContactName, SLSCode, Got, Typec, MFGQuoteNumber, Cost, Sell, Comm, Overage, QuoteToDate, OrdDate, NotGot, Comments, SPANumber, SpecCross, LotUnit, LPCost, LPSell, LPComm, LampsIncl, Terms, FOB, QuoteID, BranchCode, LeadTime, LastChgDate, LastChgBy, Requested, FileName, SellQ, CostQ, CommQ, JobName, MarketSegment, EntryDate, BidDate, SLSQ, Status, RetrCode, SelectCode, City, State, lastChgBy1, CSR, LotUnit1, StockJob, TypeOfJob}
            rowQuoteRealNDULRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowQuoteRealNDULRow)
            Return rowQuoteRealNDULRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProjectCustID(ByVal ProjectCustID As UInteger) As QuoteRealNDULRow
            Return CType(Me.Rows.Find(New Object() {ProjectCustID}),QuoteRealNDULRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QuoteRealNDULDataTable = CType(MyBase.Clone,QuoteRealNDULDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QuoteRealNDULDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnBUsinessType = MyBase.Columns("BUsinessType")
            Me.columnProjectCustID = MyBase.Columns("ProjectCustID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnQuoteCode = MyBase.Columns("QuoteCode")
            Me.columnNCode = MyBase.Columns("NCode")
            Me.columnFirmName = MyBase.Columns("FirmName")
            Me.columnContactName = MyBase.Columns("ContactName")
            Me.columnSLSCode = MyBase.Columns("SLSCode")
            Me.columnGot = MyBase.Columns("Got")
            Me.columnTypec = MyBase.Columns("Typec")
            Me.columnMFGQuoteNumber = MyBase.Columns("MFGQuoteNumber")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnSell = MyBase.Columns("Sell")
            Me.columnComm = MyBase.Columns("Comm")
            Me.columnOverage = MyBase.Columns("Overage")
            Me.columnQuoteToDate = MyBase.Columns("QuoteToDate")
            Me.columnOrdDate = MyBase.Columns("OrdDate")
            Me.columnNotGot = MyBase.Columns("NotGot")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnSPANumber = MyBase.Columns("SPANumber")
            Me.columnSpecCross = MyBase.Columns("SpecCross")
            Me.columnLotUnit = MyBase.Columns("LotUnit")
            Me.columnLPCost = MyBase.Columns("LPCost")
            Me.columnLPSell = MyBase.Columns("LPSell")
            Me.columnLPComm = MyBase.Columns("LPComm")
            Me.columnLampsIncl = MyBase.Columns("LampsIncl")
            Me.columnTerms = MyBase.Columns("Terms")
            Me.columnFOB = MyBase.Columns("FOB")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
            Me.columnBranchCode = MyBase.Columns("BranchCode")
            Me.columnLeadTime = MyBase.Columns("LeadTime")
            Me.columnLastChgDate = MyBase.Columns("LastChgDate")
            Me.columnLastChgBy = MyBase.Columns("LastChgBy")
            Me.columnRequested = MyBase.Columns("Requested")
            Me.columnFileName = MyBase.Columns("FileName")
            Me.columnSellQ = MyBase.Columns("SellQ")
            Me.columnCostQ = MyBase.Columns("CostQ")
            Me.columnCommQ = MyBase.Columns("CommQ")
            Me.columnJobName = MyBase.Columns("JobName")
            Me.columnMarketSegment = MyBase.Columns("MarketSegment")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnBidDate = MyBase.Columns("BidDate")
            Me.columnSLSQ = MyBase.Columns("SLSQ")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnRetrCode = MyBase.Columns("RetrCode")
            Me.columnSelectCode = MyBase.Columns("SelectCode")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnlastChgBy1 = MyBase.Columns("lastChgBy1")
            Me.columnCSR = MyBase.Columns("CSR")
            Me.columnLotUnit1 = MyBase.Columns("LotUnit1")
            Me.columnStockJob = MyBase.Columns("StockJob")
            Me.columnTypeOfJob = MyBase.Columns("TypeOfJob")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnBUsinessType = New Global.System.Data.DataColumn("BUsinessType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUsinessType)
            Me.columnProjectCustID = New Global.System.Data.DataColumn("ProjectCustID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectCustID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnQuoteCode = New Global.System.Data.DataColumn("QuoteCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteCode)
            Me.columnNCode = New Global.System.Data.DataColumn("NCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCode)
            Me.columnFirmName = New Global.System.Data.DataColumn("FirmName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirmName)
            Me.columnContactName = New Global.System.Data.DataColumn("ContactName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactName)
            Me.columnSLSCode = New Global.System.Data.DataColumn("SLSCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSCode)
            Me.columnGot = New Global.System.Data.DataColumn("Got", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGot)
            Me.columnTypec = New Global.System.Data.DataColumn("Typec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypec)
            Me.columnMFGQuoteNumber = New Global.System.Data.DataColumn("MFGQuoteNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFGQuoteNumber)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnSell = New Global.System.Data.DataColumn("Sell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell)
            Me.columnComm = New Global.System.Data.DataColumn("Comm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComm)
            Me.columnOverage = New Global.System.Data.DataColumn("Overage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverage)
            Me.columnQuoteToDate = New Global.System.Data.DataColumn("QuoteToDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteToDate)
            Me.columnOrdDate = New Global.System.Data.DataColumn("OrdDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdDate)
            Me.columnNotGot = New Global.System.Data.DataColumn("NotGot", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotGot)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnSPANumber = New Global.System.Data.DataColumn("SPANumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPANumber)
            Me.columnSpecCross = New Global.System.Data.DataColumn("SpecCross", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecCross)
            Me.columnLotUnit = New Global.System.Data.DataColumn("LotUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotUnit)
            Me.columnLPCost = New Global.System.Data.DataColumn("LPCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPCost)
            Me.columnLPSell = New Global.System.Data.DataColumn("LPSell", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPSell)
            Me.columnLPComm = New Global.System.Data.DataColumn("LPComm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPComm)
            Me.columnLampsIncl = New Global.System.Data.DataColumn("LampsIncl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLampsIncl)
            Me.columnTerms = New Global.System.Data.DataColumn("Terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerms)
            Me.columnFOB = New Global.System.Data.DataColumn("FOB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOB)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.columnBranchCode = New Global.System.Data.DataColumn("BranchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranchCode)
            Me.columnLeadTime = New Global.System.Data.DataColumn("LeadTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadTime)
            Me.columnLastChgDate = New Global.System.Data.DataColumn("LastChgDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgDate)
            Me.columnLastChgBy = New Global.System.Data.DataColumn("LastChgBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChgBy)
            Me.columnRequested = New Global.System.Data.DataColumn("Requested", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequested)
            Me.columnFileName = New Global.System.Data.DataColumn("FileName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileName)
            Me.columnSellQ = New Global.System.Data.DataColumn("SellQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSellQ)
            Me.columnCostQ = New Global.System.Data.DataColumn("CostQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostQ)
            Me.columnCommQ = New Global.System.Data.DataColumn("CommQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommQ)
            Me.columnJobName = New Global.System.Data.DataColumn("JobName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobName)
            Me.columnMarketSegment = New Global.System.Data.DataColumn("MarketSegment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketSegment)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnBidDate = New Global.System.Data.DataColumn("BidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBidDate)
            Me.columnSLSQ = New Global.System.Data.DataColumn("SLSQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSQ)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnRetrCode = New Global.System.Data.DataColumn("RetrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrCode)
            Me.columnSelectCode = New Global.System.Data.DataColumn("SelectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectCode)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnlastChgBy1 = New Global.System.Data.DataColumn("lastChgBy1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastChgBy1)
            Me.columnCSR = New Global.System.Data.DataColumn("CSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSR)
            Me.columnLotUnit1 = New Global.System.Data.DataColumn("LotUnit1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotUnit1)
            Me.columnStockJob = New Global.System.Data.DataColumn("StockJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockJob)
            Me.columnTypeOfJob = New Global.System.Data.DataColumn("TypeOfJob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfJob)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProjectCustID}, true))
            Me.columnBUsinessType.AllowDBNull = false
            Me.columnBUsinessType.MaxLength = 1
            Me.columnProjectCustID.AllowDBNull = false
            Me.columnProjectCustID.Unique = true
            Me.columnProjectID.AllowDBNull = false
            Me.columnQuoteCode.AllowDBNull = false
            Me.columnQuoteCode.MaxLength = 20
            Me.columnNCode.AllowDBNull = false
            Me.columnNCode.MaxLength = 8
            Me.columnFirmName.AllowDBNull = false
            Me.columnFirmName.MaxLength = 45
            Me.columnContactName.AllowDBNull = false
            Me.columnContactName.MaxLength = 45
            Me.columnSLSCode.AllowDBNull = false
            Me.columnSLSCode.MaxLength = 3
            Me.columnGot.AllowDBNull = false
            Me.columnTypec.AllowDBNull = false
            Me.columnTypec.MaxLength = 1
            Me.columnMFGQuoteNumber.AllowDBNull = false
            Me.columnMFGQuoteNumber.MaxLength = 25
            Me.columnCost.AllowDBNull = false
            Me.columnSell.AllowDBNull = false
            Me.columnComm.AllowDBNull = false
            Me.columnOverage.AllowDBNull = false
            Me.columnQuoteToDate.AllowDBNull = false
            Me.columnOrdDate.AllowDBNull = false
            Me.columnNotGot.AllowDBNull = false
            Me.columnComments.AllowDBNull = false
            Me.columnComments.MaxLength = 100
            Me.columnSPANumber.AllowDBNull = false
            Me.columnSPANumber.MaxLength = 25
            Me.columnSpecCross.AllowDBNull = false
            Me.columnSpecCross.MaxLength = 1
            Me.columnLotUnit.AllowDBNull = false
            Me.columnLotUnit.MaxLength = 1
            Me.columnLPCost.AllowDBNull = false
            Me.columnLPSell.AllowDBNull = false
            Me.columnLPComm.AllowDBNull = false
            Me.columnLampsIncl.AllowDBNull = false
            Me.columnLampsIncl.MaxLength = 1
            Me.columnTerms.AllowDBNull = false
            Me.columnTerms.MaxLength = 65535
            Me.columnFOB.AllowDBNull = false
            Me.columnFOB.MaxLength = 40
            Me.columnQuoteID.AllowDBNull = false
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchCode.MaxLength = 3
            Me.columnLeadTime.AllowDBNull = false
            Me.columnLeadTime.MaxLength = 20
            Me.columnLastChgDate.AllowDBNull = false
            Me.columnLastChgBy.AllowDBNull = false
            Me.columnLastChgBy.MaxLength = 3
            Me.columnRequested.AllowDBNull = false
            Me.columnRequested.MaxLength = 1
            Me.columnFileName.AllowDBNull = false
            Me.columnFileName.MaxLength = 30
            Me.columnSellQ.AllowDBNull = false
            Me.columnCostQ.AllowDBNull = false
            Me.columnCommQ.AllowDBNull = false
            Me.columnJobName.AllowDBNull = false
            Me.columnJobName.MaxLength = 40
            Me.columnMarketSegment.AllowDBNull = false
            Me.columnMarketSegment.MaxLength = 20
            Me.columnEntryDate.AllowDBNull = false
            Me.columnSLSQ.AllowDBNull = false
            Me.columnSLSQ.MaxLength = 3
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 6
            Me.columnRetrCode.AllowDBNull = false
            Me.columnRetrCode.MaxLength = 15
            Me.columnSelectCode.AllowDBNull = false
            Me.columnSelectCode.MaxLength = 1
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 20
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 10
            Me.columnlastChgBy1.AllowDBNull = false
            Me.columnlastChgBy1.MaxLength = 3
            Me.columnCSR.AllowDBNull = false
            Me.columnCSR.MaxLength = 3
            Me.columnLotUnit1.AllowDBNull = false
            Me.columnLotUnit1.MaxLength = 1
            Me.columnStockJob.AllowDBNull = false
            Me.columnStockJob.MaxLength = 1
            Me.columnTypeOfJob.AllowDBNull = false
            Me.columnTypeOfJob.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewQuoteRealNDULRow() As QuoteRealNDULRow
            Return CType(Me.NewRow,QuoteRealNDULRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QuoteRealNDULRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QuoteRealNDULRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QuoteRealNDULRowChangedEvent) Is Nothing) Then
                RaiseEvent QuoteRealNDULRowChanged(Me, New QuoteRealNDULRowChangeEvent(CType(e.Row,QuoteRealNDULRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QuoteRealNDULRowChangingEvent) Is Nothing) Then
                RaiseEvent QuoteRealNDULRowChanging(Me, New QuoteRealNDULRowChangeEvent(CType(e.Row,QuoteRealNDULRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QuoteRealNDULRowDeletedEvent) Is Nothing) Then
                RaiseEvent QuoteRealNDULRowDeleted(Me, New QuoteRealNDULRowChangeEvent(CType(e.Row,QuoteRealNDULRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QuoteRealNDULRowDeletingEvent) Is Nothing) Then
                RaiseEvent QuoteRealNDULRowDeleting(Me, New QuoteRealNDULRowChangeEvent(CType(e.Row,QuoteRealNDULRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveQuoteRealNDULRow(ByVal row As QuoteRealNDULRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QuoteRealNDULDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SpecRegFollowUpDataTable
        Inherits Global.System.Data.TypedTableBase(Of SpecRegFollowUpRow)
        
        Private columnLineID As Global.System.Data.DataColumn
        
        Private columnQuoteID As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnMFG As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnQuoteCode As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnJobName As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnComm As Global.System.Data.DataColumn
        
        Private columnSell As Global.System.Data.DataColumn
        
        Private columnPaid As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnSLSQ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SpecRegFollowUp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LineIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MFGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QuoteCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuoteCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JobNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLSQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLSQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpecRegFollowUpRow
            Get
                Return CType(Me.Rows(index),SpecRegFollowUpRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SpecRegFollowUpRowChanging As SpecRegFollowUpRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SpecRegFollowUpRowChanged As SpecRegFollowUpRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SpecRegFollowUpRowDeleting As SpecRegFollowUpRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SpecRegFollowUpRowDeleted As SpecRegFollowUpRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSpecRegFollowUpRow(ByVal row As SpecRegFollowUpRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSpecRegFollowUpRow( _
                    ByVal LineID As UInteger,  _
                    ByVal QuoteID As UInteger,  _
                    ByVal Type As String,  _
                    ByVal MFG As String,  _
                    ByVal Description As String,  _
                    ByVal QuoteCode As String,  _
                    ByVal EntryDate As Date,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal JobName As String,  _
                    ByVal Status As String,  _
                    ByVal Comm As String,  _
                    ByVal Sell As String,  _
                    ByVal Paid As Boolean,  _
                    ByVal Qty As String,  _
                    ByVal SLSQ As String) As SpecRegFollowUpRow
            Dim rowSpecRegFollowUpRow As SpecRegFollowUpRow = CType(Me.NewRow,SpecRegFollowUpRow)
            Dim columnValuesArray() As Object = New Object() {LineID, QuoteID, Type, MFG, Description, QuoteCode, EntryDate, City, State, JobName, Status, Comm, Sell, Paid, Qty, SLSQ}
            rowSpecRegFollowUpRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSpecRegFollowUpRow)
            Return rowSpecRegFollowUpRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByLineID(ByVal LineID As UInteger) As SpecRegFollowUpRow
            Return CType(Me.Rows.Find(New Object() {LineID}),SpecRegFollowUpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SpecRegFollowUpDataTable = CType(MyBase.Clone,SpecRegFollowUpDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SpecRegFollowUpDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnLineID = MyBase.Columns("LineID")
            Me.columnQuoteID = MyBase.Columns("QuoteID")
            Me.columnType = MyBase.Columns("Type")
            Me.columnMFG = MyBase.Columns("MFG")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnQuoteCode = MyBase.Columns("QuoteCode")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnJobName = MyBase.Columns("JobName")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnComm = MyBase.Columns("Comm")
            Me.columnSell = MyBase.Columns("Sell")
            Me.columnPaid = MyBase.Columns("Paid")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnSLSQ = MyBase.Columns("SLSQ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnLineID = New Global.System.Data.DataColumn("LineID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineID)
            Me.columnQuoteID = New Global.System.Data.DataColumn("QuoteID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteID)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnMFG = New Global.System.Data.DataColumn("MFG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFG)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnQuoteCode = New Global.System.Data.DataColumn("QuoteCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuoteCode)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnJobName = New Global.System.Data.DataColumn("JobName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobName)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnComm = New Global.System.Data.DataColumn("Comm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComm)
            Me.columnSell = New Global.System.Data.DataColumn("Sell", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSell)
            Me.columnPaid = New Global.System.Data.DataColumn("Paid", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaid)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnSLSQ = New Global.System.Data.DataColumn("SLSQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLSQ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLineID}, true))
            Me.columnLineID.AllowDBNull = false
            Me.columnLineID.Unique = true
            Me.columnQuoteID.AllowDBNull = false
            Me.columnType.AllowDBNull = false
            Me.columnType.MaxLength = 10
            Me.columnMFG.AllowDBNull = false
            Me.columnMFG.MaxLength = 8
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 75
            Me.columnQuoteCode.AllowDBNull = false
            Me.columnQuoteCode.MaxLength = 10
            Me.columnEntryDate.AllowDBNull = false
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 20
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 10
            Me.columnJobName.AllowDBNull = false
            Me.columnJobName.MaxLength = 40
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 6
            Me.columnComm.AllowDBNull = false
            Me.columnComm.MaxLength = 12
            Me.columnSell.AllowDBNull = false
            Me.columnSell.MaxLength = 12
            Me.columnPaid.AllowDBNull = false
            Me.columnQty.AllowDBNull = false
            Me.columnQty.MaxLength = 12
            Me.columnSLSQ.AllowDBNull = false
            Me.columnSLSQ.DefaultValue = CType("",String)
            Me.columnSLSQ.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSpecRegFollowUpRow() As SpecRegFollowUpRow
            Return CType(Me.NewRow,SpecRegFollowUpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SpecRegFollowUpRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SpecRegFollowUpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpecRegFollowUpRowChangedEvent) Is Nothing) Then
                RaiseEvent SpecRegFollowUpRowChanged(Me, New SpecRegFollowUpRowChangeEvent(CType(e.Row,SpecRegFollowUpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpecRegFollowUpRowChangingEvent) Is Nothing) Then
                RaiseEvent SpecRegFollowUpRowChanging(Me, New SpecRegFollowUpRowChangeEvent(CType(e.Row,SpecRegFollowUpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpecRegFollowUpRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpecRegFollowUpRowDeleted(Me, New SpecRegFollowUpRowChangeEvent(CType(e.Row,SpecRegFollowUpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpecRegFollowUpRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpecRegFollowUpRowDeleting(Me, New SpecRegFollowUpRowChangeEvent(CType(e.Row,SpecRegFollowUpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSpecRegFollowUpRow(ByVal row As SpecRegFollowUpRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSaw8 = New dsSaw8()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SpecRegFollowUpDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class mfglookup2Row
        Inherits Global.System.Data.DataRow
        
        Private tablemfglookup2 As mfglookup2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemfglookup2 = CType(Me.Table,mfglookup2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property code() As String
            Get
                Try 
                    Return CType(Me(Me.tablemfglookup2.codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'code' in table 'mfglookup2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemfglookup2.codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Firmname() As String
            Get
                Try 
                    Return CType(Me(Me.tablemfglookup2.FirmnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Firmname' in table 'mfglookup2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemfglookup2.FirmnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tablemfglookup2.codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcodeNull()
            Me(Me.tablemfglookup2.codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFirmnameNull() As Boolean
            Return Me.IsNull(Me.tablemfglookup2.FirmnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFirmnameNull()
            Me(Me.tablemfglookup2.FirmnameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class projectRow
        Inherits Global.System.Data.DataRow
        
        Private tableproject As projectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproject = CType(Me.Table,projectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As UInteger
            Get
                Return CType(Me(Me.tableproject.ProjectIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableproject.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectName() As String
            Get
                Return CType(Me(Me.tableproject.ProjectNameColumn),String)
            End Get
            Set
                Me(Me.tableproject.ProjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Address() As String
            Get
                Return CType(Me(Me.tableproject.AddressColumn),String)
            End Get
            Set
                Me(Me.tableproject.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableproject.Address2Column),String)
            End Get
            Set
                Me(Me.tableproject.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableproject.CityColumn),String)
            End Get
            Set
                Me(Me.tableproject.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tableproject.StateColumn),String)
            End Get
            Set
                Me(Me.tableproject.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Zip() As String
            Get
                Return CType(Me(Me.tableproject.ZipColumn),String)
            End Get
            Set
                Me(Me.tableproject.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Country() As String
            Get
                Return CType(Me(Me.tableproject.CountryColumn),String)
            End Get
            Set
                Me(Me.tableproject.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EntryDate() As Date
            Get
                Return CType(Me(Me.tableproject.EntryDateColumn),Date)
            End Get
            Set
                Me(Me.tableproject.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableproject.StatusColumn),String)
            End Get
            Set
                Me(Me.tableproject.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectFolder() As String
            Get
                Return CType(Me(Me.tableproject.ProjectFolderColumn),String)
            End Get
            Set
                Me(Me.tableproject.ProjectFolderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectControl() As String
            Get
                Return CType(Me(Me.tableproject.ProjectControlColumn),String)
            End Get
            Set
                Me(Me.tableproject.ProjectControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarketSegment() As String
            Get
                Return CType(Me(Me.tableproject.MarketSegmentColumn),String)
            End Get
            Set
                Me(Me.tableproject.MarketSegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EstimatedValue() As Decimal
            Get
                Return CType(Me(Me.tableproject.EstimatedValueColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject.EstimatedValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ServiceCode() As String
            Get
                Return CType(Me(Me.tableproject.ServiceCodeColumn),String)
            End Get
            Set
                Me(Me.tableproject.ServiceCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgBy() As String
            Get
                Return CType(Me(Me.tableproject.LastChgByColumn),String)
            End Get
            Set
                Me(Me.tableproject.LastChgByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgDate() As Date
            Get
                Return CType(Me(Me.tableproject.LastChgDateColumn),Date)
            End Get
            Set
                Me(Me.tableproject.LastChgDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Probability() As Decimal
            Get
                Return CType(Me(Me.tableproject.ProbabilityColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject.ProbabilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectDesc() As String
            Get
                Return CType(Me(Me.tableproject.ProjectDescColumn),String)
            End Get
            Set
                Me(Me.tableproject.ProjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproject.BidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidDate' in table 'project' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproject.BidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidTime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableproject.BidTimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidTime' in table 'project' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproject.BidTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRADate() As String
            Get
                Return CType(Me(Me.tableproject.PRADateColumn),String)
            End Get
            Set
                Me(Me.tableproject.PRADateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EstDelivDate() As String
            Get
                Return CType(Me(Me.tableproject.EstDelivDateColumn),String)
            End Get
            Set
                Me(Me.tableproject.EstDelivDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Password() As String
            Get
                Return CType(Me(Me.tableproject.PasswordColumn),String)
            End Get
            Set
                Me(Me.tableproject.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FollowBy() As String
            Get
                Return CType(Me(Me.tableproject.FollowByColumn),String)
            End Get
            Set
                Me(Me.tableproject.FollowByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrderEntryBy() As String
            Get
                Return CType(Me(Me.tableproject.OrderEntryByColumn),String)
            End Get
            Set
                Me(Me.tableproject.OrderEntryByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShipmentBy() As String
            Get
                Return CType(Me(Me.tableproject.ShipmentByColumn),String)
            End Get
            Set
                Me(Me.tableproject.ShipmentByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RetrCode() As String
            Get
                Return CType(Me(Me.tableproject.RetrCodeColumn),String)
            End Get
            Set
                Me(Me.tableproject.RetrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CSR() As String
            Get
                Return CType(Me(Me.tableproject.CSRColumn),String)
            End Get
            Set
                Me(Me.tableproject.CSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSP() As String
            Get
                Return CType(Me(Me.tableproject.SLSPColumn),String)
            End Get
            Set
                Me(Me.tableproject.SLSPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjMGR() As String
            Get
                Return CType(Me(Me.tableproject.ProjMGRColumn),String)
            End Get
            Set
                Me(Me.tableproject.ProjMGRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tableproject.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tableproject.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectCode() As String
            Get
                Return CType(Me(Me.tableproject.ProjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableproject.ProjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Location() As String
            Get
                Return CType(Me(Me.tableproject.LocationColumn),String)
            End Get
            Set
                Me(Me.tableproject.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DistPO() As String
            Get
                Return CType(Me(Me.tableproject.DistPOColumn),String)
            End Get
            Set
                Me(Me.tableproject.DistPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Reference() As String
            Get
                Return CType(Me(Me.tableproject.ReferenceColumn),String)
            End Get
            Set
                Me(Me.tableproject.ReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cost() As Decimal
            Get
                Return CType(Me(Me.tableproject.CostColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sell() As Decimal
            Get
                Return CType(Me(Me.tableproject.SellColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject.SellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Billed() As Decimal
            Get
                Return CType(Me(Me.tableproject.BilledColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject.BilledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Paid() As Decimal
            Get
                Return CType(Me(Me.tableproject.PaidColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject.PaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LockedBy() As String
            Get
                Return CType(Me(Me.tableproject.LockedByColumn),String)
            End Get
            Set
                Me(Me.tableproject.LockedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastSaveDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproject.LastSaveDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastSaveDate' in table 'project' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproject.LastSaveDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidDateNull() As Boolean
            Return Me.IsNull(Me.tableproject.BidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidDateNull()
            Me(Me.tableproject.BidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidTimeNull() As Boolean
            Return Me.IsNull(Me.tableproject.BidTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidTimeNull()
            Me(Me.tableproject.BidTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastSaveDateNull() As Boolean
            Return Me.IsNull(Me.tableproject.LastSaveDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastSaveDateNull()
            Me(Me.tableproject.LastSaveDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class projectcustRow
        Inherits Global.System.Data.DataRow
        
        Private tableprojectcust As projectcustDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableprojectcust = CType(Me.Table,projectcustDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectCustID() As UInteger
            Get
                Return CType(Me(Me.tableprojectcust.ProjectCustIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableprojectcust.ProjectCustIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As UInteger
            Get
                Return CType(Me(Me.tableprojectcust.ProjectIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableprojectcust.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteCode() As String
            Get
                Return CType(Me(Me.tableprojectcust.QuoteCodeColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.QuoteCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NCode() As String
            Get
                Return CType(Me(Me.tableprojectcust.NCodeColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.NCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FirmName() As String
            Get
                Return CType(Me(Me.tableprojectcust.FirmNameColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.FirmNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ContactName() As String
            Get
                Return CType(Me(Me.tableprojectcust.ContactNameColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.ContactNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSCode() As String
            Get
                Return CType(Me(Me.tableprojectcust.SLSCodeColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.SLSCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Got() As Boolean
            Get
                Return CType(Me(Me.tableprojectcust.GotColumn),Boolean)
            End Get
            Set
                Me(Me.tableprojectcust.GotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Typec() As String
            Get
                Return CType(Me(Me.tableprojectcust.TypecColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.TypecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MFGQuoteNumber() As String
            Get
                Return CType(Me(Me.tableprojectcust.MFGQuoteNumberColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.MFGQuoteNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cost() As Decimal
            Get
                Return CType(Me(Me.tableprojectcust.CostColumn),Decimal)
            End Get
            Set
                Me(Me.tableprojectcust.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sell() As Decimal
            Get
                Return CType(Me(Me.tableprojectcust.SellColumn),Decimal)
            End Get
            Set
                Me(Me.tableprojectcust.SellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comm() As Decimal
            Get
                Return CType(Me(Me.tableprojectcust.CommColumn),Decimal)
            End Get
            Set
                Me(Me.tableprojectcust.CommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Overage() As Decimal
            Get
                Return CType(Me(Me.tableprojectcust.OverageColumn),Decimal)
            End Get
            Set
                Me(Me.tableprojectcust.OverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteToDate() As Date
            Get
                Return CType(Me(Me.tableprojectcust.QuoteToDateColumn),Date)
            End Get
            Set
                Me(Me.tableprojectcust.QuoteToDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdDate() As Date
            Get
                Return CType(Me(Me.tableprojectcust.OrdDateColumn),Date)
            End Get
            Set
                Me(Me.tableprojectcust.OrdDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NotGot() As Boolean
            Get
                Return CType(Me(Me.tableprojectcust.NotGotColumn),Boolean)
            End Get
            Set
                Me(Me.tableprojectcust.NotGotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comments() As String
            Get
                Return CType(Me(Me.tableprojectcust.CommentsColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPANumber() As String
            Get
                Return CType(Me(Me.tableprojectcust.SPANumberColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.SPANumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCross() As String
            Get
                Return CType(Me(Me.tableprojectcust.SpecCrossColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.SpecCrossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotUnit() As String
            Get
                Return CType(Me(Me.tableprojectcust.LotUnitColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.LotUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPCost() As Decimal
            Get
                Return CType(Me(Me.tableprojectcust.LPCostColumn),Decimal)
            End Get
            Set
                Me(Me.tableprojectcust.LPCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPSell() As Decimal
            Get
                Return CType(Me(Me.tableprojectcust.LPSellColumn),Decimal)
            End Get
            Set
                Me(Me.tableprojectcust.LPSellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPComm() As Decimal
            Get
                Return CType(Me(Me.tableprojectcust.LPCommColumn),Decimal)
            End Get
            Set
                Me(Me.tableprojectcust.LPCommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LampsIncl() As String
            Get
                Return CType(Me(Me.tableprojectcust.LampsInclColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.LampsInclColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Terms() As String
            Get
                Return CType(Me(Me.tableprojectcust.TermsColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.TermsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FOB() As String
            Get
                Return CType(Me(Me.tableprojectcust.FOBColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.FOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tableprojectcust.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableprojectcust.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tableprojectcust.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LeadTime() As String
            Get
                Return CType(Me(Me.tableprojectcust.LeadTimeColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.LeadTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgDate() As Date
            Get
                Return CType(Me(Me.tableprojectcust.LastChgDateColumn),Date)
            End Get
            Set
                Me(Me.tableprojectcust.LastChgDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgBy() As String
            Get
                Return CType(Me(Me.tableprojectcust.LastChgByColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.LastChgByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Requested() As String
            Get
                Return CType(Me(Me.tableprojectcust.RequestedColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.RequestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FileName() As String
            Get
                Return CType(Me(Me.tableprojectcust.FileNameColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.FileNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JobName() As String
            Get
                Return CType(Me(Me.tableprojectcust.JobNameColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.JobNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarketSegment() As String
            Get
                Return CType(Me(Me.tableprojectcust.MarketSegmentColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.MarketSegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EntryDate() As Date
            Get
                Return CType(Me(Me.tableprojectcust.EntryDateColumn),Date)
            End Get
            Set
                Me(Me.tableprojectcust.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidDate() As Date
            Get
                Return CType(Me(Me.tableprojectcust.BidDateColumn),Date)
            End Get
            Set
                Me(Me.tableprojectcust.BidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSQ() As String
            Get
                Return CType(Me(Me.tableprojectcust.SLSQColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.SLSQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableprojectcust.StatusColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RetrCode() As String
            Get
                Return CType(Me(Me.tableprojectcust.RetrCodeColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.RetrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SelectCode() As String
            Get
                Return CType(Me(Me.tableprojectcust.SelectCodeColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.SelectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableprojectcust.CityColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tableprojectcust.StateColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CSR() As String
            Get
                Return CType(Me(Me.tableprojectcust.CSRColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.CSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotUnit1() As String
            Get
                Return CType(Me(Me.tableprojectcust.LotUnit1Column),String)
            End Get
            Set
                Me(Me.tableprojectcust.LotUnit1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StockJob() As String
            Get
                Return CType(Me(Me.tableprojectcust.StockJobColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.StockJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EnteredBy() As String
            Get
                Return CType(Me(Me.tableprojectcust.EnteredByColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.EnteredByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRADate() As String
            Get
                Return CType(Me(Me.tableprojectcust.PRADateColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.PRADateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EstDelivDate() As String
            Get
                Return CType(Me(Me.tableprojectcust.EstDelivDateColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.EstDelivDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FollowBy() As String
            Get
                Return CType(Me(Me.tableprojectcust.FollowByColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.FollowByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrderEntryBy() As String
            Get
                Return CType(Me(Me.tableprojectcust.OrderEntryByColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.OrderEntryByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShipmentBy() As String
            Get
                Return CType(Me(Me.tableprojectcust.ShipmentByColumn),String)
            End Get
            Set
                Me(Me.tableprojectcust.ShipmentByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Specifiers() As String
            Get
                If Me.IsSpecifiersNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableprojectcust.SpecifiersColumn),String)
                End If
            End Get
            Set
                Me(Me.tableprojectcust.SpecifiersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpecifiersNull() As Boolean
            Return Me.IsNull(Me.tableprojectcust.SpecifiersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpecifiersNull()
            Me(Me.tableprojectcust.SpecifiersColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class quoteRow
        Inherits Global.System.Data.DataRow
        
        Private tablequote As quoteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablequote = CType(Me.Table,quoteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tablequote.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequote.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As UInteger
            Get
                Return CType(Me(Me.tablequote.ProjectIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequote.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteCode() As String
            Get
                Return CType(Me(Me.tablequote.QuoteCodeColumn),String)
            End Get
            Set
                Me(Me.tablequote.QuoteCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EntryDate() As Date
            Get
                Return CType(Me(Me.tablequote.EntryDateColumn),Date)
            End Get
            Set
                Me(Me.tablequote.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablequote.BidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidDate' in table 'quote' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequote.BidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidTime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tablequote.BidTimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidTime' in table 'quote' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequote.BidTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSQ() As String
            Get
                Return CType(Me(Me.tablequote.SLSQColumn),String)
            End Get
            Set
                Me(Me.tablequote.SLSQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotUnit() As String
            Get
                Return CType(Me(Me.tablequote.LotUnitColumn),String)
            End Get
            Set
                Me(Me.tablequote.LotUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tablequote.StatusColumn),String)
            End Get
            Set
                Me(Me.tablequote.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StockJob() As String
            Get
                Return CType(Me(Me.tablequote.StockJobColumn),String)
            End Get
            Set
                Me(Me.tablequote.StockJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EnteredBy() As String
            Get
                Return CType(Me(Me.tablequote.EnteredByColumn),String)
            End Get
            Set
                Me(Me.tablequote.EnteredByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CSR() As String
            Get
                Return CType(Me(Me.tablequote.CSRColumn),String)
            End Get
            Set
                Me(Me.tablequote.CSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgBy() As String
            Get
                Return CType(Me(Me.tablequote.LastChgByColumn),String)
            End Get
            Set
                Me(Me.tablequote.LastChgByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cost() As Decimal
            Get
                Return CType(Me(Me.tablequote.CostColumn),Decimal)
            End Get
            Set
                Me(Me.tablequote.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sell() As Decimal
            Get
                Return CType(Me(Me.tablequote.SellColumn),Decimal)
            End Get
            Set
                Me(Me.tablequote.SellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comm() As Decimal
            Get
                Return CType(Me(Me.tablequote.CommColumn),Decimal)
            End Get
            Set
                Me(Me.tablequote.CommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HeaderTab() As String
            Get
                Return CType(Me(Me.tablequote.HeaderTabColumn),String)
            End Get
            Set
                Me(Me.tablequote.HeaderTabColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RetrCode() As String
            Get
                Return CType(Me(Me.tablequote.RetrCodeColumn),String)
            End Get
            Set
                Me(Me.tablequote.RetrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LinesYN() As String
            Get
                Return CType(Me(Me.tablequote.LinesYNColumn),String)
            End Get
            Set
                Me(Me.tablequote.LinesYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SelectCode() As String
            Get
                Return CType(Me(Me.tablequote.SelectCodeColumn),String)
            End Get
            Set
                Me(Me.tablequote.SelectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Password() As String
            Get
                Return CType(Me(Me.tablequote.PasswordColumn),String)
            End Get
            Set
                Me(Me.tablequote.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPCost() As Decimal
            Get
                Return CType(Me(Me.tablequote.LPCostColumn),Decimal)
            End Get
            Set
                Me(Me.tablequote.LPCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPSell() As Decimal
            Get
                Return CType(Me(Me.tablequote.LPSellColumn),Decimal)
            End Get
            Set
                Me(Me.tablequote.LPSellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRADate() As String
            Get
                Return CType(Me(Me.tablequote.PRADateColumn),String)
            End Get
            Set
                Me(Me.tablequote.PRADateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EstDelivDate() As String
            Get
                Return CType(Me(Me.tablequote.EstDelivDateColumn),String)
            End Get
            Set
                Me(Me.tablequote.EstDelivDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FollowBy() As String
            Get
                Return CType(Me(Me.tablequote.FollowByColumn),String)
            End Get
            Set
                Me(Me.tablequote.FollowByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrderEntryBy() As String
            Get
                Return CType(Me(Me.tablequote.OrderEntryByColumn),String)
            End Get
            Set
                Me(Me.tablequote.OrderEntryByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShipmentBy() As String
            Get
                Return CType(Me(Me.tablequote.ShipmentByColumn),String)
            End Get
            Set
                Me(Me.tablequote.ShipmentByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tablequote.RemarksColumn),String)
            End Get
            Set
                Me(Me.tablequote.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LightingGear() As String
            Get
                Return CType(Me(Me.tablequote.LightingGearColumn),String)
            End Get
            Set
                Me(Me.tablequote.LightingGearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Dimming() As String
            Get
                Return CType(Me(Me.tablequote.DimmingColumn),String)
            End Get
            Set
                Me(Me.tablequote.DimmingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastDateTime() As Date
            Get
                Return CType(Me(Me.tablequote.LastDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tablequote.LastDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidBoard() As String
            Get
                Return CType(Me(Me.tablequote.BidBoardColumn),String)
            End Get
            Set
                Me(Me.tablequote.BidBoardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tablequote.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tablequote.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Address() As String
            Get
                Return CType(Me(Me.tablequote.AddressColumn),String)
            End Get
            Set
                Me(Me.tablequote.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tablequote.Address2Column),String)
            End Get
            Set
                Me(Me.tablequote.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tablequote.CityColumn),String)
            End Get
            Set
                Me(Me.tablequote.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tablequote.StateColumn),String)
            End Get
            Set
                Me(Me.tablequote.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Zip() As String
            Get
                Return CType(Me(Me.tablequote.ZipColumn),String)
            End Get
            Set
                Me(Me.tablequote.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Country() As String
            Get
                Return CType(Me(Me.tablequote.CountryColumn),String)
            End Get
            Set
                Me(Me.tablequote.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Location() As String
            Get
                Return CType(Me(Me.tablequote.LocationColumn),String)
            End Get
            Set
                Me(Me.tablequote.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LeadTime() As String
            Get
                Return CType(Me(Me.tablequote.LeadTimeColumn),String)
            End Get
            Set
                Me(Me.tablequote.LeadTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LockedBy() As String
            Get
                Return CType(Me(Me.tablequote.LockedByColumn),String)
            End Get
            Set
                Me(Me.tablequote.LockedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCross() As String
            Get
                Return CType(Me(Me.tablequote.SpecCrossColumn),String)
            End Get
            Set
                Me(Me.tablequote.SpecCrossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Probability() As String
            Get
                Try 
                    Return CType(Me(Me.tablequote.ProbabilityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Probability' in table 'quote' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequote.ProbabilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TypeOfJob() As String
            Get
                Return CType(Me(Me.tablequote.TypeOfJobColumn),String)
            End Get
            Set
                Me(Me.tablequote.TypeOfJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCredit() As String
            Get
                Try 
                    Return CType(Me(Me.tablequote.SpecCreditColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpecCredit' in table 'quote' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequote.SpecCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Probability1() As Decimal
            Get
                Return CType(Me(Me.tablequote.Probability1Column),Decimal)
            End Get
            Set
                Me(Me.tablequote.Probability1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarketSegment() As String
            Get
                Return CType(Me(Me.tablequote.MarketSegmentColumn),String)
            End Get
            Set
                Me(Me.tablequote.MarketSegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCredit1() As Decimal
            Get
                Return CType(Me(Me.tablequote.SpecCredit1Column),Decimal)
            End Get
            Set
                Me(Me.tablequote.SpecCredit1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SubmCover() As String
            Get
                Return CType(Me(Me.tablequote.SubmCoverColumn),String)
            End Get
            Set
                Me(Me.tablequote.SubmCoverColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SubmSinglePDF() As String
            Get
                Return CType(Me(Me.tablequote.SubmSinglePDFColumn),String)
            End Get
            Set
                Me(Me.tablequote.SubmSinglePDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JobName() As String
            Get
                Return CType(Me(Me.tablequote.JobNameColumn),String)
            End Get
            Set
                Me(Me.tablequote.JobNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastSaveDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablequote.LastSaveDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastSaveDate' in table 'quote' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequote.LastSaveDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LockOut() As String
            Get
                Return CType(Me(Me.tablequote.LockOutColumn),String)
            End Get
            Set
                Me(Me.tablequote.LockOutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QUTLU1Row() As QUTLU1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_quote_1")),QUTLU1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_quote_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidDateNull() As Boolean
            Return Me.IsNull(Me.tablequote.BidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidDateNull()
            Me(Me.tablequote.BidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidTimeNull() As Boolean
            Return Me.IsNull(Me.tablequote.BidTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidTimeNull()
            Me(Me.tablequote.BidTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProbabilityNull() As Boolean
            Return Me.IsNull(Me.tablequote.ProbabilityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProbabilityNull()
            Me(Me.tablequote.ProbabilityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpecCreditNull() As Boolean
            Return Me.IsNull(Me.tablequote.SpecCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpecCreditNull()
            Me(Me.tablequote.SpecCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastSaveDateNull() As Boolean
            Return Me.IsNull(Me.tablequote.LastSaveDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastSaveDateNull()
            Me(Me.tablequote.LastSaveDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetquotelinesRows() As quotelinesRow()
            If (Me.Table.ChildRelations("fk_quotelines") Is Nothing) Then
                Return New quotelinesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_quotelines")),quotelinesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetqutnotesRows() As qutnotesRow()
            If (Me.Table.ChildRelations("fk_qutnotes") Is Nothing) Then
                Return New qutnotesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_qutnotes")),qutnotesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetqutslssplitRows() As qutslssplitRow()
            If (Me.Table.ChildRelations("fk_qutslssplit") Is Nothing) Then
                Return New qutslssplitRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_qutslssplit")),qutslssplitRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class qutlinepriceRow
        Inherits Global.System.Data.DataRow
        
        Private tablequtlineprice As qutlinepriceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablequtlineprice = CType(Me.Table,qutlinepriceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QutPrcID() As UInteger
            Get
                Return CType(Me(Me.tablequtlineprice.QutPrcIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequtlineprice.QutPrcIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LineID() As UInteger
            Get
                Return CType(Me(Me.tablequtlineprice.LineIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequtlineprice.LineIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PriceColumn() As String
            Get
                Return CType(Me(Me.tablequtlineprice.PriceColumnColumn),String)
            End Get
            Set
                Me(Me.tablequtlineprice.PriceColumnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColHeader() As String
            Get
                Return CType(Me(Me.tablequtlineprice.ColHeaderColumn),String)
            End Get
            Set
                Me(Me.tablequtlineprice.ColHeaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PC() As String
            Get
                Return CType(Me(Me.tablequtlineprice.PCColumn),String)
            End Get
            Set
                Me(Me.tablequtlineprice.PCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecalcFormula() As String
            Get
                Return CType(Me(Me.tablequtlineprice.RecalcFormulaColumn),String)
            End Get
            Set
                Me(Me.tablequtlineprice.RecalcFormulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Got() As String
            Get
                Return CType(Me(Me.tablequtlineprice.GotColumn),String)
            End Get
            Set
                Me(Me.tablequtlineprice.GotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CustSPA() As String
            Get
                Return CType(Me(Me.tablequtlineprice.CustSPAColumn),String)
            End Get
            Set
                Me(Me.tablequtlineprice.CustSPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tablequtlineprice.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tablequtlineprice.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tablequtlineprice.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequtlineprice.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property quotelinesRow() As quotelinesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_qutlineprice")),quotelinesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_qutlineprice"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class qutnotesRow
        Inherits Global.System.Data.DataRow
        
        Private tablequtnotes As qutnotesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablequtnotes = CType(Me.Table,qutnotesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As UInteger
            Get
                Return CType(Me(Me.tablequtnotes.IDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequtnotes.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tablequtnotes.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'qutnotes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequtnotes.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tablequtnotes.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequtnotes.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property quoteRow() As quoteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_qutnotes")),quoteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_qutnotes"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QUTLU1Row() As QUTLU1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_qutnotes1")),QUTLU1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_qutnotes1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecRegFollowUpRow() As SpecRegFollowUpRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_qutnotes")),SpecRegFollowUpRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_qutnotes"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tablequtnotes.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNotesNull()
            Me(Me.tablequtnotes.NotesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class qutslssplitRow
        Inherits Global.System.Data.DataRow
        
        Private tablequtslssplit As qutslssplitDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablequtslssplit = CType(Me.Table,qutslssplitDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As UInteger
            Get
                Return CType(Me(Me.tablequtslssplit.IDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequtslssplit.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSCODE() As String
            Get
                Return CType(Me(Me.tablequtslssplit.SLSCODEColumn),String)
            End Get
            Set
                Me(Me.tablequtslssplit.SLSCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSSplit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablequtslssplit.SLSSplitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SLSSplit' in table 'qutslssplit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequtslssplit.SLSSplitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSNumber() As String
            Get
                Return CType(Me(Me.tablequtslssplit.SLSNumberColumn),String)
            End Get
            Set
                Me(Me.tablequtslssplit.SLSNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tablequtslssplit.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequtslssplit.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property quoteRow() As quoteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_qutslssplit")),quoteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_qutslssplit"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QUTLU1Row() As QUTLU1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_qutslssplit1")),QUTLU1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_qutslssplit1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecRegFollowUpRow() As SpecRegFollowUpRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_qutslssplit")),SpecRegFollowUpRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_qutslssplit"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSLSSplitNull() As Boolean
            Return Me.IsNull(Me.tablequtslssplit.SLSSplitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSLSSplitNull()
            Me(Me.tablequtslssplit.SLSSplitColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class sls999Row
        Inherits Global.System.Data.DataRow
        
        Private tablesls999 As sls999DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesls999 = CType(Me.Table,sls999DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property empcode() As String
            Get
                Try 
                    Return CType(Me(Me.tablesls999.empcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'empcode' in table 'sls999' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesls999.empcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property empname() As String
            Get
                Try 
                    Return CType(Me(Me.tablesls999.empnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'empname' in table 'sls999' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesls999.empnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsempcodeNull() As Boolean
            Return Me.IsNull(Me.tablesls999.empcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetempcodeNull()
            Me(Me.tablesls999.empcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsempnameNull() As Boolean
            Return Me.IsNull(Me.tablesls999.empnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetempnameNull()
            Me(Me.tablesls999.empnameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class QUTLU1Row
        Inherits Global.System.Data.DataRow
        
        Private tableQUTLU1 As QUTLU1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQUTLU1 = CType(Me.Table,QUTLU1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As UInteger
            Get
                Return CType(Me(Me.tableQUTLU1.ProjectIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableQUTLU1.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tableQUTLU1.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableQUTLU1.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteCode() As String
            Get
                Return CType(Me(Me.tableQUTLU1.QuoteCodeColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.QuoteCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EntryDate() As Date
            Get
                Return CType(Me(Me.tableQUTLU1.EntryDateColumn),Date)
            End Get
            Set
                Me(Me.tableQUTLU1.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableQUTLU1.BidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidDate' in table 'QUTLU1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQUTLU1.BidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableQUTLU1.StatusColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSQ() As String
            Get
                Return CType(Me(Me.tableQUTLU1.SLSQColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.SLSQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EnteredBy() As String
            Get
                Return CType(Me(Me.tableQUTLU1.EnteredByColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.EnteredByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sell() As Decimal
            Get
                Return CType(Me(Me.tableQUTLU1.SellColumn),Decimal)
            End Get
            Set
                Me(Me.tableQUTLU1.SellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidTime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableQUTLU1.BidTimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidTime' in table 'QUTLU1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQUTLU1.BidTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotUnit() As String
            Get
                Return CType(Me(Me.tableQUTLU1.LotUnitColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.LotUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StockJob() As String
            Get
                Return CType(Me(Me.tableQUTLU1.StockJobColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.StockJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CSR() As String
            Get
                Return CType(Me(Me.tableQUTLU1.CSRColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.CSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgBy() As String
            Get
                Return CType(Me(Me.tableQUTLU1.LastChgByColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.LastChgByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cost() As Decimal
            Get
                Return CType(Me(Me.tableQUTLU1.CostColumn),Decimal)
            End Get
            Set
                Me(Me.tableQUTLU1.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comm() As Decimal
            Get
                Return CType(Me(Me.tableQUTLU1.CommColumn),Decimal)
            End Get
            Set
                Me(Me.tableQUTLU1.CommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HeaderTab() As String
            Get
                Return CType(Me(Me.tableQUTLU1.HeaderTabColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.HeaderTabColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RetrCode() As String
            Get
                Return CType(Me(Me.tableQUTLU1.RetrCodeColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.RetrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LinesYN() As String
            Get
                Return CType(Me(Me.tableQUTLU1.LinesYNColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.LinesYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SelectCode() As String
            Get
                Return CType(Me(Me.tableQUTLU1.SelectCodeColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.SelectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Password() As String
            Get
                Return CType(Me(Me.tableQUTLU1.PasswordColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPCost() As Decimal
            Get
                Return CType(Me(Me.tableQUTLU1.LPCostColumn),Decimal)
            End Get
            Set
                Me(Me.tableQUTLU1.LPCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPSell() As Decimal
            Get
                Return CType(Me(Me.tableQUTLU1.LPSellColumn),Decimal)
            End Get
            Set
                Me(Me.tableQUTLU1.LPSellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRADate() As String
            Get
                Return CType(Me(Me.tableQUTLU1.PRADateColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.PRADateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EstDelivDate() As String
            Get
                Return CType(Me(Me.tableQUTLU1.EstDelivDateColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.EstDelivDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FollowBy() As String
            Get
                Return CType(Me(Me.tableQUTLU1.FollowByColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.FollowByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrderEntryBy() As String
            Get
                Return CType(Me(Me.tableQUTLU1.OrderEntryByColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.OrderEntryByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShipmentBy() As String
            Get
                Return CType(Me(Me.tableQUTLU1.ShipmentByColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.ShipmentByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableQUTLU1.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LightingGear() As String
            Get
                Return CType(Me(Me.tableQUTLU1.LightingGearColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.LightingGearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Dimming() As String
            Get
                Return CType(Me(Me.tableQUTLU1.DimmingColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.DimmingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastDateTime() As Date
            Get
                Return CType(Me(Me.tableQUTLU1.LastDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableQUTLU1.LastDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidBoard() As String
            Get
                Return CType(Me(Me.tableQUTLU1.BidBoardColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.BidBoardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tableQUTLU1.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Address() As String
            Get
                Return CType(Me(Me.tableQUTLU1.AddressColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableQUTLU1.Address2Column),String)
            End Get
            Set
                Me(Me.tableQUTLU1.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableQUTLU1.CityColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tableQUTLU1.StateColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Zip() As String
            Get
                Return CType(Me(Me.tableQUTLU1.ZipColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Country() As String
            Get
                Return CType(Me(Me.tableQUTLU1.CountryColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarketSegment() As String
            Get
                Return CType(Me(Me.tableQUTLU1.MarketSegmentColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.MarketSegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Probability() As Decimal
            Get
                Return CType(Me(Me.tableQUTLU1.ProbabilityColumn),Decimal)
            End Get
            Set
                Me(Me.tableQUTLU1.ProbabilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TypeOfJob() As String
            Get
                Return CType(Me(Me.tableQUTLU1.TypeOfJobColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.TypeOfJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Location() As String
            Get
                Return CType(Me(Me.tableQUTLU1.LocationColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LeadTime() As String
            Get
                Return CType(Me(Me.tableQUTLU1.LeadTimeColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.LeadTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LockedBy() As String
            Get
                Return CType(Me(Me.tableQUTLU1.LockedByColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.LockedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SourceQuote() As String
            Get
                Return CType(Me(Me.tableQUTLU1.SourceQuoteColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.SourceQuoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCross() As String
            Get
                Return CType(Me(Me.tableQUTLU1.SpecCrossColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.SpecCrossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCredit() As Decimal
            Get
                Return CType(Me(Me.tableQUTLU1.SpecCreditColumn),Decimal)
            End Get
            Set
                Me(Me.tableQUTLU1.SpecCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SubmCover() As String
            Get
                Return CType(Me(Me.tableQUTLU1.SubmCoverColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.SubmCoverColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SubmSinglePDF() As String
            Get
                Return CType(Me(Me.tableQUTLU1.SubmSinglePDFColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.SubmSinglePDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JobName() As String
            Get
                Return CType(Me(Me.tableQUTLU1.JobNameColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.JobNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastSaveDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableQUTLU1.LastSaveDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastSaveDate' in table 'QUTLU1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQUTLU1.LastSaveDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LockOut() As String
            Get
                Return CType(Me(Me.tableQUTLU1.LockOutColumn),String)
            End Get
            Set
                Me(Me.tableQUTLU1.LockOutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Architect() As String
            Get
                If Me.IsArchitectNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQUTLU1.ArchitectColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQUTLU1.ArchitectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Contractor() As String
            Get
                If Me.IsContractorNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQUTLU1.ContractorColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQUTLU1.ContractorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Engineer() As String
            Get
                If Me.IsEngineerNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQUTLU1.EngineerColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQUTLU1.EngineerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Specifier() As String
            Get
                If Me.IsSpecifierNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQUTLU1.SpecifierColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQUTLU1.SpecifierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Customer() As String
            Get
                Try 
                    Return CType(Me(Me.tableQUTLU1.CustomerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer' in table 'QUTLU1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQUTLU1.CustomerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidDateNull() As Boolean
            Return Me.IsNull(Me.tableQUTLU1.BidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidDateNull()
            Me(Me.tableQUTLU1.BidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidTimeNull() As Boolean
            Return Me.IsNull(Me.tableQUTLU1.BidTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidTimeNull()
            Me(Me.tableQUTLU1.BidTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastSaveDateNull() As Boolean
            Return Me.IsNull(Me.tableQUTLU1.LastSaveDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastSaveDateNull()
            Me(Me.tableQUTLU1.LastSaveDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsArchitectNull() As Boolean
            Return Me.IsNull(Me.tableQUTLU1.ArchitectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetArchitectNull()
            Me(Me.tableQUTLU1.ArchitectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContractorNull() As Boolean
            Return Me.IsNull(Me.tableQUTLU1.ContractorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContractorNull()
            Me(Me.tableQUTLU1.ContractorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEngineerNull() As Boolean
            Return Me.IsNull(Me.tableQUTLU1.EngineerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEngineerNull()
            Me(Me.tableQUTLU1.EngineerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpecifierNull() As Boolean
            Return Me.IsNull(Me.tableQUTLU1.SpecifierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpecifierNull()
            Me(Me.tableQUTLU1.SpecifierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tableQUTLU1.CustomerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCustomerNull()
            Me(Me.tableQUTLU1.CustomerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetquoteRows() As quoteRow()
            If (Me.Table.ChildRelations("fk_quote_1") Is Nothing) Then
                Return New quoteRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_quote_1")),quoteRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetqutnotesRows() As qutnotesRow()
            If (Me.Table.ChildRelations("fk_qutnotes1") Is Nothing) Then
                Return New qutnotesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_qutnotes1")),qutnotesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetqutslssplitRows() As qutslssplitRow()
            If (Me.Table.ChildRelations("fk_qutslssplit1") Is Nothing) Then
                Return New qutslssplitRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_qutslssplit1")),qutslssplitRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetquotelinesRows() As quotelinesRow()
            If (Me.Table.ChildRelations("fk_quotelines1") Is Nothing) Then
                Return New quotelinesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_quotelines1")),quotelinesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class QuoteRealLURow
        Inherits Global.System.Data.DataRow
        
        Private tableQuoteRealLU As QuoteRealLUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQuoteRealLU = CType(Me.Table,QuoteRealLUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectCustID() As UInteger
            Get
                Return CType(Me(Me.tableQuoteRealLU.ProjectCustIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableQuoteRealLU.ProjectCustIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As UInteger
            Get
                Return CType(Me(Me.tableQuoteRealLU.ProjectIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableQuoteRealLU.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.QuoteCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.QuoteCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.NCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.NCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FirmName() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.FirmNameColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.FirmNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ContactName() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.ContactNameColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.ContactNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.SLSCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SLSCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Got() As Boolean
            Get
                Return CType(Me(Me.tableQuoteRealLU.GotColumn),Boolean)
            End Get
            Set
                Me(Me.tableQuoteRealLU.GotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Typec() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.TypecColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.TypecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MFGQuoteNumber() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.MFGQuoteNumberColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.MFGQuoteNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cost() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.CostColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sell() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.SellColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comm() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.CommColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.CommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Overage() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.OverageColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.OverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdDate() As Date
            Get
                Return CType(Me(Me.tableQuoteRealLU.OrdDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealLU.OrdDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NotGot() As Boolean
            Get
                Return CType(Me(Me.tableQuoteRealLU.NotGotColumn),Boolean)
            End Get
            Set
                Me(Me.tableQuoteRealLU.NotGotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comments() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.CommentsColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPANumber() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.SPANumberColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SPANumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCross() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.SpecCrossColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SpecCrossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotUnit() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.LotUnitColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LotUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPCost() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.LPCostColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LPCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPSell() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.LPSellColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LPSellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPComm() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.LPCommColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LPCommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LampsIncl() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.LampsInclColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LampsInclColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Terms() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.TermsColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.TermsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FOB() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.FOBColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.FOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tableQuoteRealLU.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableQuoteRealLU.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectName() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.ProjectNameColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.ProjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarketSegment() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.MarketSegmentColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.MarketSegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EntryDate() As Date
            Get
                Return CType(Me(Me.tableQuoteRealLU.EntryDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealLU.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableQuoteRealLU.BidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidDate' in table 'QuoteRealLU' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQuoteRealLU.BidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSQ() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.SLSQColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SLSQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.StatusColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RetrCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.RetrCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.RetrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SelectCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.SelectCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SelectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgBy() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.LastChgByColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LastChgByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.CityColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.StateColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CSR() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.CSRColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.CSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StockJob() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.StockJobColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.StockJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgDate() As Date
            Get
                Return CType(Me(Me.tableQuoteRealLU.LastChgDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LastChgDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Probability() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.ProbabilityColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.ProbabilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidTime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableQuoteRealLU.BidTimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidTime' in table 'QuoteRealLU' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQuoteRealLU.BidTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EnteredBy() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.EnteredByColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.EnteredByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRADate() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.PRADateColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.PRADateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EstDelivDate() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.EstDelivDateColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.EstDelivDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FollowBy() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.FollowByColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.FollowByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrderEntryBy() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.OrderEntryByColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.OrderEntryByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShipmentBy() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.ShipmentByColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.ShipmentByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastDateTime() As Date
            Get
                Return CType(Me(Me.tableQuoteRealLU.LastDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LastDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Zip() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.ZipColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Country() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.CountryColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Location() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.LocationColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LeadTime() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.LeadTimeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LeadTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SourceQuote() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.SourceQuoteColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SourceQuoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LockedBy() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.LockedByColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LockedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TypeOfJob() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.TypeOfJobColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.TypeOfJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JobName() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.JobNameColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.JobNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCredit() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.SpecCreditColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SpecCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteToDate() As Date
            Get
                Return CType(Me(Me.tableQuoteRealLU.QuoteToDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealLU.QuoteToDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotUnitQ() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.LotUnitQColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LotUnitQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CostQ() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.CostQColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.CostQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SellQ() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.SellQColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SellQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CommQ() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.CommQColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.CommQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPCostQ() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.LPCostQColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LPCostQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPSellQ() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealLU.LPSellQColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LPSellQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCodeQ() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.BranchCodeQColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.BranchCodeQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCrossQ() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.SpecCrossQColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.SpecCrossQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarketSegmentQ() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.MarketSegmentQColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.MarketSegmentQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LeadTimeQ() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.LeadTimeQColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.LeadTimeQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BusinessType() As String
            Get
                Return CType(Me(Me.tableQuoteRealLU.BusinessTypeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealLU.BusinessTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Specifiers() As String
            Get
                If Me.IsSpecifiersNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableQuoteRealLU.SpecifiersColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQuoteRealLU.SpecifiersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Architect() As String
            Get
                If Me.IsArchitectNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQuoteRealLU.ArchitectColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQuoteRealLU.ArchitectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Engineer() As String
            Get
                If Me.IsEngineerNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQuoteRealLU.EngineerColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQuoteRealLU.EngineerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Contractor() As String
            Get
                If Me.IsContractorNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQuoteRealLU.ContractorColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQuoteRealLU.ContractorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LightingDesigner() As String
            Get
                If Me.IsLightingDesignerNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQuoteRealLU.LightingDesignerColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQuoteRealLU.LightingDesignerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Specifier() As String
            Get
                If Me.IsSpecifierNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQuoteRealLU.SpecifierColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQuoteRealLU.SpecifierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Other() As String
            Get
                If Me.IsOtherNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableQuoteRealLU.OtherColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQuoteRealLU.OtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidDateNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.BidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidDateNull()
            Me(Me.tableQuoteRealLU.BidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidTimeNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.BidTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidTimeNull()
            Me(Me.tableQuoteRealLU.BidTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpecifiersNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.SpecifiersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpecifiersNull()
            Me(Me.tableQuoteRealLU.SpecifiersColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsArchitectNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.ArchitectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetArchitectNull()
            Me(Me.tableQuoteRealLU.ArchitectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEngineerNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.EngineerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEngineerNull()
            Me(Me.tableQuoteRealLU.EngineerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsContractorNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.ContractorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetContractorNull()
            Me(Me.tableQuoteRealLU.ContractorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLightingDesignerNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.LightingDesignerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLightingDesignerNull()
            Me(Me.tableQuoteRealLU.LightingDesignerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpecifierNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.SpecifierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpecifierNull()
            Me(Me.tableQuoteRealLU.SpecifierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealLU.OtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOtherNull()
            Me(Me.tableQuoteRealLU.OtherColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class quotelinesRow
        Inherits Global.System.Data.DataRow
        
        Private tablequotelines As quotelinesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablequotelines = CType(Me.Table,quotelinesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LineID() As UInteger
            Get
                Return CType(Me(Me.tablequotelines.LineIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequotelines.LineIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tablequotelines.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequotelines.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tablequotelines.TypeColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MFG() As String
            Get
                Return CType(Me(Me.tablequotelines.MFGColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.MFGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tablequotelines.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProdID() As UInteger
            Get
                Return CType(Me(Me.tablequotelines.ProdIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequotelines.ProdIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPMFG() As String
            Get
                Return CType(Me(Me.tablequotelines.LPMFGColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.LPMFGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPDesc() As String
            Get
                Return CType(Me(Me.tablequotelines.LPDescColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.LPDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPProdID() As UInteger
            Get
                Return CType(Me(Me.tablequotelines.LPProdIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablequotelines.LPProdIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCross() As String
            Get
                Return CType(Me(Me.tablequotelines.SpecCrossColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.SpecCrossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPANumber() As String
            Get
                Return CType(Me(Me.tablequotelines.SPANumberColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.SPANumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EntryDate() As Date
            Get
                Return CType(Me(Me.tablequotelines.EntryDateColumn),Date)
            End Get
            Set
                Me(Me.tablequotelines.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgDate() As Date
            Get
                Return CType(Me(Me.tablequotelines.LastChgDateColumn),Date)
            End Get
            Set
                Me(Me.tablequotelines.LastChgDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgBy() As String
            Get
                Return CType(Me(Me.tablequotelines.LastChgByColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.LastChgByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Active() As Boolean
            Get
                Return CType(Me(Me.tablequotelines.ActiveColumn),Boolean)
            End Get
            Set
                Me(Me.tablequotelines.ActiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comments() As String
            Get
                Return CType(Me(Me.tablequotelines.CommentsColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NoteLine() As Boolean
            Get
                Return CType(Me(Me.tablequotelines.NoteLineColumn),Boolean)
            End Get
            Set
                Me(Me.tablequotelines.NoteLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Got() As Boolean
            Get
                Return CType(Me(Me.tablequotelines.GotColumn),Boolean)
            End Get
            Set
                Me(Me.tablequotelines.GotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPCode() As String
            Get
                Return CType(Me(Me.tablequotelines.LpCodeColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.LpCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LnSeq() As Decimal
            Get
                Return CType(Me(Me.tablequotelines.LnSeqColumn),Decimal)
            End Get
            Set
                Me(Me.tablequotelines.LnSeqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LnCode() As String
            Get
                Return CType(Me(Me.tablequotelines.LnCodeColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.LnCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tablequotelines.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cost() As String
            Get
                Return CType(Me(Me.tablequotelines.CostColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sell() As String
            Get
                Return CType(Me(Me.tablequotelines.SellColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.SellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comm() As String
            Get
                Return CType(Me(Me.tablequotelines.CommColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.CommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UOverage() As String
            Get
                Return CType(Me(Me.tablequotelines.UOverageColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.UOverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price1() As String
            Get
                Return CType(Me(Me.tablequotelines.Price1Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price2() As String
            Get
                Return CType(Me(Me.tablequotelines.Price2Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price3() As String
            Get
                Return CType(Me(Me.tablequotelines.Price3Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price4() As String
            Get
                Return CType(Me(Me.tablequotelines.Price4Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price5() As String
            Get
                Return CType(Me(Me.tablequotelines.Price5Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price6() As String
            Get
                Return CType(Me(Me.tablequotelines.Price6Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price7() As String
            Get
                Return CType(Me(Me.tablequotelines.Price7Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price8() As String
            Get
                Return CType(Me(Me.tablequotelines.Price8Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price9() As String
            Get
                Return CType(Me(Me.tablequotelines.Price9Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Price10() As String
            Get
                Return CType(Me(Me.tablequotelines.Price10Column),String)
            End Get
            Set
                Me(Me.tablequotelines.Price10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPCost() As String
            Get
                Return CType(Me(Me.tablequotelines.LPCostColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.LPCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPSell() As String
            Get
                Return CType(Me(Me.tablequotelines.LPSellColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.LPSellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPQty() As String
            Get
                Return CType(Me(Me.tablequotelines.LPQtyColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.LPQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Qty() As String
            Get
                Return CType(Me(Me.tablequotelines.QtyColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OverageSplit() As String
            Get
                Return CType(Me(Me.tablequotelines.OverageSplitColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.OverageSplitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UM() As String
            Get
                Return CType(Me(Me.tablequotelines.UMColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.UMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VendorCode() As String
            Get
                Return CType(Me(Me.tablequotelines.VendorCodeColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.VendorCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PriceCode() As String
            Get
                Return CType(Me(Me.tablequotelines.PriceCodeColumn),String)
            End Get
            Set
                Me(Me.tablequotelines.PriceCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LampsIncl() As String
            Get
                Try 
                    Return CType(Me(Me.tablequotelines.LampsInclColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LampsIncl' in table 'quotelines' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequotelines.LampsInclColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Paid() As String
            Get
                Try 
                    Return CType(Me(Me.tablequotelines.PaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Paid' in table 'quotelines' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequotelines.PaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _BkComm() As String
            Get
                Return CType(Me(Me.tablequotelines._BkCommColumn),String)
            End Get
            Set
                Me(Me.tablequotelines._BkCommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastSaveDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablequotelines.LastSaveDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastSaveDate' in table 'quotelines' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequotelines.LastSaveDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property quoteRow() As quoteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_quotelines")),quoteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_quotelines"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QUTLU1Row() As QUTLU1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_quotelines1")),QUTLU1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_quotelines1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecRegFollowUpRow() As SpecRegFollowUpRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_quotelines")),SpecRegFollowUpRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_quotelines"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLampsInclNull() As Boolean
            Return Me.IsNull(Me.tablequotelines.LampsInclColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLampsInclNull()
            Me(Me.tablequotelines.LampsInclColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPaidNull() As Boolean
            Return Me.IsNull(Me.tablequotelines.PaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPaidNull()
            Me(Me.tablequotelines.PaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastSaveDateNull() As Boolean
            Return Me.IsNull(Me.tablequotelines.LastSaveDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastSaveDateNull()
            Me(Me.tablequotelines.LastSaveDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetqutlinepriceRows() As qutlinepriceRow()
            If (Me.Table.ChildRelations("fk_qutlineprice") Is Nothing) Then
                Return New qutlinepriceRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_qutlineprice")),qutlinepriceRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class namedetailRow
        Inherits Global.System.Data.DataRow
        
        Private tablenamedetail As namedetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablenamedetail = CType(Me.Table,namedetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Code() As String
            Get
                Return CType(Me(Me.tablenamedetail.CodeColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FirmName() As String
            Get
                Return CType(Me(Me.tablenamedetail.FirmNameColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.FirmNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BusinessType() As String
            Get
                Return CType(Me(Me.tablenamedetail.BusinessTypeColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.BusinessTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RetrievalCodes() As String
            Get
                Return CType(Me(Me.tablenamedetail.RetrievalCodesColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.RetrievalCodesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SoldTo() As String
            Get
                Return CType(Me(Me.tablenamedetail.SoldToColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.SoldToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSRegion() As String
            Get
                Return CType(Me(Me.tablenamedetail.SLSRegionColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.SLSRegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSTerritory() As String
            Get
                Return CType(Me(Me.tablenamedetail.SLSTerritoryColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.SLSTerritoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSState() As String
            Get
                Return CType(Me(Me.tablenamedetail.SLSStateColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.SLSStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Credit() As String
            Get
                Return CType(Me(Me.tablenamedetail.CreditColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.CreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CreditLimit() As String
            Get
                Return CType(Me(Me.tablenamedetail.CreditLimitColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.CreditLimitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShippingInstr() As String
            Get
                Return CType(Me(Me.tablenamedetail.ShippingInstrColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.ShippingInstrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Addr1() As String
            Get
                Return CType(Me(Me.tablenamedetail.Addr1Column),String)
            End Get
            Set
                Me(Me.tablenamedetail.Addr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Addr2() As String
            Get
                Return CType(Me(Me.tablenamedetail.Addr2Column),String)
            End Get
            Set
                Me(Me.tablenamedetail.Addr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Addr3() As String
            Get
                Return CType(Me(Me.tablenamedetail.Addr3Column),String)
            End Get
            Set
                Me(Me.tablenamedetail.Addr3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tablenamedetail.CityColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tablenamedetail.StateColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Zip() As String
            Get
                Return CType(Me(Me.tablenamedetail.ZipColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Country() As String
            Get
                Return CType(Me(Me.tablenamedetail.CountryColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgBy() As String
            Get
                Return CType(Me(Me.tablenamedetail.LastChgByColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.LastChgByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CSR() As String
            Get
                Return CType(Me(Me.tablenamedetail.CSRColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.CSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Active() As String
            Get
                Return CType(Me(Me.tablenamedetail.ActiveColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.ActiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property County() As String
            Get
                Return CType(Me(Me.tablenamedetail.CountyColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.CountyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TaxCode() As String
            Get
                Return CType(Me(Me.tablenamedetail.TaxCodeColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.TaxCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TaxID() As String
            Get
                Return CType(Me(Me.tablenamedetail.TaxIDColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.TaxIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShipLoc() As String
            Get
                Return CType(Me(Me.tablenamedetail.ShipLocColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.ShipLocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdSelectCode() As String
            Get
                Return CType(Me(Me.tablenamedetail.OrdSelectCodeColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.OrdSelectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgDate() As Date
            Get
                Return CType(Me(Me.tablenamedetail.LastChgDateColumn),Date)
            End Get
            Set
                Me(Me.tablenamedetail.LastChgDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShortName() As String
            Get
                Return CType(Me(Me.tablenamedetail.ShortNameColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.ShortNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PriceGroup() As String
            Get
                Return CType(Me(Me.tablenamedetail.PriceGroupColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.PriceGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WebStatus() As Byte
            Get
                Return CType(Me(Me.tablenamedetail.WebStatusColumn),Byte)
            End Get
            Set
                Me(Me.tablenamedetail.WebStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ReleaseNumber() As String
            Get
                Return CType(Me(Me.tablenamedetail.ReleaseNumberColumn),String)
            End Get
            Set
                Me(Me.tablenamedetail.ReleaseNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastSaveDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablenamedetail.LastSaveDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastSaveDate' in table 'namedetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenamedetail.LastSaveDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastSaveDateNull() As Boolean
            Return Me.IsNull(Me.tablenamedetail.LastSaveDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastSaveDateNull()
            Me(Me.tablenamedetail.LastSaveDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetnamedefaultsRows() As namedefaultsRow()
            If (Me.Table.ChildRelations("FKNameDefaults") Is Nothing) Then
                Return New namedefaultsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FKNameDefaults")),namedefaultsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetnamecontactRows() As namecontactRow()
            If (Me.Table.ChildRelations("FKContactCode") Is Nothing) Then
                Return New namecontactRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FKContactCode")),namecontactRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class namedefaultsRow
        Inherits Global.System.Data.DataRow
        
        Private tablenamedefaults As namedefaultsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablenamedefaults = CType(Me.Table,namedefaultsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As UInteger
            Get
                Return CType(Me(Me.tablenamedefaults.idColumn),UInteger)
            End Get
            Set
                Me(Me.tablenamedefaults.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NCode() As String
            Get
                Return CType(Me(Me.tablenamedefaults.NCodeColumn),String)
            End Get
            Set
                Me(Me.tablenamedefaults.NCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecType() As String
            Get
                Return CType(Me(Me.tablenamedefaults.RecTypeColumn),String)
            End Get
            Set
                Me(Me.tablenamedefaults.RecTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Category() As String
            Get
                Return CType(Me(Me.tablenamedefaults.CategoryColumn),String)
            End Get
            Set
                Me(Me.tablenamedefaults.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comments() As String
            Get
                Return CType(Me(Me.tablenamedefaults.CommentsColumn),String)
            End Get
            Set
                Me(Me.tablenamedefaults.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property namedetailRow() As namedetailRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FKNameDefaults")),namedetailRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FKNameDefaults"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class admingroupRow
        Inherits Global.System.Data.DataRow
        
        Private tableadmingroup As admingroupDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableadmingroup = CType(Me.Table,admingroupDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GroupID() As String
            Get
                Return CType(Me(Me.tableadmingroup.GroupIDColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.GroupIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GroupDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableadmingroup.GroupDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupDescription' in table 'admingroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableadmingroup.GroupDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DateAdded() As Date
            Get
                Try 
                    Return CType(Me(Me.tableadmingroup.DateAddedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateAdded' in table 'admingroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableadmingroup.DateAddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastSavedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableadmingroup.LastSavedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastSavedDate' in table 'admingroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableadmingroup.LastSavedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastSaveBy() As String
            Get
                Return CType(Me(Me.tableadmingroup.LastSaveByColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.LastSaveByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdSLSCode() As String
            Get
                Return CType(Me(Me.tableadmingroup.OrdSLSCodeColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.OrdSLSCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdSLSPct() As String
            Get
                Return CType(Me(Me.tableadmingroup.OrdSLSPctColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.OrdSLSPctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdSalesDol() As String
            Get
                Return CType(Me(Me.tableadmingroup.OrdSalesDolColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.OrdSalesDolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdCommDolPct() As String
            Get
                Return CType(Me(Me.tableadmingroup.OrdCommDolPctColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.OrdCommDolPctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrderView() As String
            Get
                Return CType(Me(Me.tableadmingroup.OrderViewColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.OrderViewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdLock() As String
            Get
                Return CType(Me(Me.tableadmingroup.OrdLockColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.OrdLockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdPrtLUGrid() As String
            Get
                Return CType(Me(Me.tableadmingroup.OrdPrtLUGridColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.OrdPrtLUGridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QutSLSCode() As String
            Get
                Return CType(Me(Me.tableadmingroup.QutSLSCodeColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.QutSLSCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QutSLSPct() As String
            Get
                Return CType(Me(Me.tableadmingroup.QutSLSPctColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.QutSLSPctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QutSalesDol() As String
            Get
                Return CType(Me(Me.tableadmingroup.QutSalesDolColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.QutSalesDolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QutCommDolPct() As String
            Get
                Return CType(Me(Me.tableadmingroup.QutCommDolPctColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.QutCommDolPctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteView() As String
            Get
                Return CType(Me(Me.tableadmingroup.QuoteViewColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.QuoteViewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QutLock() As String
            Get
                Return CType(Me(Me.tableadmingroup.QutLockColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.QutLockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QutPrtLUGrid() As String
            Get
                Return CType(Me(Me.tableadmingroup.QutPrtLUGridColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.QutPrtLUGridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjSLSCode() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjSLSCodeColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjSLSCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjSLSPct() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjSLSPctColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjSLSPctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjSalesDol() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjSalesDolColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjSalesDolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjCommDolPct() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjCommDolPctColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjCommDolPctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjView() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjViewColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjViewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjLock() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjLockColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjLockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjAllowPrc() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjAllowPrcColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjAllowPrcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjAllowPO() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjAllowPOColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjAllowPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjAllowBill() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjAllowBillColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjAllowBillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjPrtLUGrid() As String
            Get
                Return CType(Me(Me.tableadmingroup.ProjPrtLUGridColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ProjPrtLUGridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NamSLS() As String
            Get
                Return CType(Me(Me.tableadmingroup.NamSLSColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.NamSLSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NamAddEdit() As String
            Get
                Return CType(Me(Me.tableadmingroup.NamAddEditColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.NamAddEditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NamView() As String
            Get
                Return CType(Me(Me.tableadmingroup.NamViewColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.NamViewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ReportOrd() As String
            Get
                Return CType(Me(Me.tableadmingroup.ReportOrdColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ReportOrdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ReportInv() As String
            Get
                Return CType(Me(Me.tableadmingroup.ReportInvColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ReportInvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ReportQut() As String
            Get
                Return CType(Me(Me.tableadmingroup.ReportQutColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ReportQutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ReportProj() As String
            Get
                Return CType(Me(Me.tableadmingroup.ReportProjColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ReportProjColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ReconcileInv() As String
            Get
                Return CType(Me(Me.tableadmingroup.ReconcileInvColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.ReconcileInvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NamOnlyChgSLS() As String
            Get
                Return CType(Me(Me.tableadmingroup.NamOnlyChgSLSColumn),String)
            End Get
            Set
                Me(Me.tableadmingroup.NamOnlyChgSLSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGroupDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableadmingroup.GroupDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGroupDescriptionNull()
            Me(Me.tableadmingroup.GroupDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDateAddedNull() As Boolean
            Return Me.IsNull(Me.tableadmingroup.DateAddedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDateAddedNull()
            Me(Me.tableadmingroup.DateAddedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastSavedDateNull() As Boolean
            Return Me.IsNull(Me.tableadmingroup.LastSavedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastSavedDateNull()
            Me(Me.tableadmingroup.LastSavedDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class adminuserRow
        Inherits Global.System.Data.DataRow
        
        Private tableadminuser As adminuserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableadminuser = CType(Me.Table,adminuserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UserID() As String
            Get
                Return CType(Me(Me.tableadminuser.UserIDColumn),String)
            End Get
            Set
                Me(Me.tableadminuser.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Admin() As String
            Get
                Try 
                    Return CType(Me(Me.tableadminuser.AdminColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Admin' in table 'adminuser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableadminuser.AdminColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GroupID() As String
            Get
                Try 
                    Return CType(Me(Me.tableadminuser.GroupIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupID' in table 'adminuser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableadminuser.GroupIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Password() As String
            Get
                Return CType(Me(Me.tableadminuser.PasswordColumn),String)
            End Get
            Set
                Me(Me.tableadminuser.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PasswordExpires() As Byte
            Get
                Return CType(Me(Me.tableadminuser.PasswordExpiresColumn),Byte)
            End Get
            Set
                Me(Me.tableadminuser.PasswordExpiresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PasswordDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableadminuser.PasswordDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PasswordDate' in table 'adminuser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableadminuser.PasswordDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AdminBranches() As String
            Get
                Try 
                    Return CType(Me(Me.tableadminuser.AdminBranchesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdminBranches' in table 'adminuser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableadminuser.AdminBranchesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAdminNull() As Boolean
            Return Me.IsNull(Me.tableadminuser.AdminColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAdminNull()
            Me(Me.tableadminuser.AdminColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGroupIDNull() As Boolean
            Return Me.IsNull(Me.tableadminuser.GroupIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGroupIDNull()
            Me(Me.tableadminuser.GroupIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPasswordDateNull() As Boolean
            Return Me.IsNull(Me.tableadminuser.PasswordDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPasswordDateNull()
            Me(Me.tableadminuser.PasswordDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAdminBranchesNull() As Boolean
            Return Me.IsNull(Me.tableadminuser.AdminBranchesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAdminBranchesNull()
            Me(Me.tableadminuser.AdminBranchesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class namecontactRow
        Inherits Global.System.Data.DataRow
        
        Private tablenamecontact As namecontactDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablenamecontact = CType(Me.Table,namecontactDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As UInteger
            Get
                Return CType(Me(Me.tablenamecontact.idColumn),UInteger)
            End Get
            Set
                Me(Me.tablenamecontact.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Code() As String
            Get
                Return CType(Me(Me.tablenamecontact.CodeColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Category() As String
            Get
                Return CType(Me(Me.tablenamecontact.CategoryColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EmpName() As String
            Get
                Return CType(Me(Me.tablenamecontact.EmpNameColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.EmpNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JobDesc() As String
            Get
                Return CType(Me(Me.tablenamecontact.JobDescColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.JobDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Phone() As String
            Get
                Return CType(Me(Me.tablenamecontact.PhoneColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fax() As String
            Get
                Return CType(Me(Me.tablenamecontact.FaxColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Email() As String
            Get
                Return CType(Me(Me.tablenamecontact.EmailColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Dear() As String
            Get
                Return CType(Me(Me.tablenamecontact.DearColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.DearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EmpCode() As String
            Get
                Return CType(Me(Me.tablenamecontact.EmpCodeColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.EmpCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tablenamecontact.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CellPhone() As String
            Get
                Return CType(Me(Me.tablenamecontact.CellPhoneColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ext() As String
            Get
                Return CType(Me(Me.tablenamecontact.ExtColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.ExtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Active() As String
            Get
                Return CType(Me(Me.tablenamecontact.ActiveColumn),String)
            End Get
            Set
                Me(Me.tablenamecontact.ActiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property namedetailRow() As namedetailRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FKContactCode")),namedetailRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FKContactCode"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class QuoteRealNDULRow
        Inherits Global.System.Data.DataRow
        
        Private tableQuoteRealNDUL As QuoteRealNDULDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQuoteRealNDUL = CType(Me.Table,QuoteRealNDULDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BUsinessType() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.BUsinessTypeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.BUsinessTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectCustID() As UInteger
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.ProjectCustIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.ProjectCustIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As UInteger
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.ProjectIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.QuoteCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.QuoteCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.NCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.NCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FirmName() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.FirmNameColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.FirmNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ContactName() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.ContactNameColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.ContactNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.SLSCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.SLSCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Got() As Boolean
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.GotColumn),Boolean)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.GotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Typec() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.TypecColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.TypecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MFGQuoteNumber() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.MFGQuoteNumberColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.MFGQuoteNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cost() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.CostColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sell() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.SellColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.SellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comm() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.CommColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.CommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Overage() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.OverageColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.OverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteToDate() As Date
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.QuoteToDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.QuoteToDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OrdDate() As Date
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.OrdDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.OrdDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NotGot() As Boolean
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.NotGotColumn),Boolean)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.NotGotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comments() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.CommentsColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPANumber() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.SPANumberColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.SPANumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecCross() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.SpecCrossColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.SpecCrossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotUnit() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LotUnitColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LotUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPCost() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LPCostColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LPCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPSell() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LPSellColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LPSellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LPComm() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LPCommColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LPCommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LampsIncl() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LampsInclColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LampsInclColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Terms() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.TermsColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.TermsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FOB() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.FOBColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.FOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BranchCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.BranchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LeadTime() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LeadTimeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LeadTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgDate() As Date
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LastChgDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LastChgDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChgBy() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LastChgByColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LastChgByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Requested() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.RequestedColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.RequestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FileName() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.FileNameColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.FileNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SellQ() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.SellQColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.SellQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CostQ() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.CostQColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.CostQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CommQ() As Decimal
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.CommQColumn),Decimal)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.CommQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JobName() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.JobNameColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.JobNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarketSegment() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.MarketSegmentColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.MarketSegmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EntryDate() As Date
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.EntryDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableQuoteRealNDUL.BidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BidDate' in table 'QuoteRealNDUL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.BidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSQ() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.SLSQColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.SLSQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.StatusColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RetrCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.RetrCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.RetrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SelectCode() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.SelectCodeColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.SelectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.CityColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.StateColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property lastChgBy1() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.lastChgBy1Column),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.lastChgBy1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CSR() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.CSRColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.CSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotUnit1() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.LotUnit1Column),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.LotUnit1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StockJob() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.StockJobColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.StockJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TypeOfJob() As String
            Get
                Return CType(Me(Me.tableQuoteRealNDUL.TypeOfJobColumn),String)
            End Get
            Set
                Me(Me.tableQuoteRealNDUL.TypeOfJobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBidDateNull() As Boolean
            Return Me.IsNull(Me.tableQuoteRealNDUL.BidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBidDateNull()
            Me(Me.tableQuoteRealNDUL.BidDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SpecRegFollowUpRow
        Inherits Global.System.Data.DataRow
        
        Private tableSpecRegFollowUp As SpecRegFollowUpDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpecRegFollowUp = CType(Me.Table,SpecRegFollowUpDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LineID() As UInteger
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.LineIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.LineIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteID() As UInteger
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.QuoteIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.QuoteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.TypeColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MFG() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.MFGColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.MFGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QuoteCode() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.QuoteCodeColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.QuoteCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EntryDate() As Date
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.EntryDateColumn),Date)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.CityColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.StateColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JobName() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.JobNameColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.JobNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.StatusColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comm() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.CommColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.CommColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sell() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.SellColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.SellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Paid() As Boolean
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.PaidColumn),Boolean)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.PaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Qty() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.QtyColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLSQ() As String
            Get
                Return CType(Me(Me.tableSpecRegFollowUp.SLSQColumn),String)
            End Get
            Set
                Me(Me.tableSpecRegFollowUp.SLSQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetqutnotesRows() As qutnotesRow()
            If (Me.Table.ChildRelations("FK_qutnotes") Is Nothing) Then
                Return New qutnotesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_qutnotes")),qutnotesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetqutslssplitRows() As qutslssplitRow()
            If (Me.Table.ChildRelations("FK_qutslssplit") Is Nothing) Then
                Return New qutslssplitRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_qutslssplit")),qutslssplitRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetquotelinesRows() As quotelinesRow()
            If (Me.Table.ChildRelations("FK_quotelines") Is Nothing) Then
                Return New quotelinesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_quotelines")),quotelinesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class mfglookup2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As mfglookup2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As mfglookup2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As mfglookup2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class projectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As projectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As projectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As projectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class projectcustRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As projectcustRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As projectcustRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As projectcustRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class quoteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As quoteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As quoteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As quoteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class qutlinepriceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qutlinepriceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As qutlinepriceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As qutlinepriceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class qutnotesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qutnotesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As qutnotesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As qutnotesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class qutslssplitRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qutslssplitRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As qutslssplitRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As qutslssplitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class sls999RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sls999Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As sls999Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As sls999Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class QUTLU1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QUTLU1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As QUTLU1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As QUTLU1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class QuoteRealLURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QuoteRealLURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As QuoteRealLURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As QuoteRealLURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class quotelinesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As quotelinesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As quotelinesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As quotelinesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class namedetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As namedetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As namedetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As namedetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class namedefaultsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As namedefaultsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As namedefaultsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As namedefaultsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class admingroupRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As admingroupRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As admingroupRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As admingroupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class adminuserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As adminuserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As adminuserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As adminuserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class namecontactRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As namecontactRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As namecontactRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As namecontactRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class QuoteRealNDULRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QuoteRealNDULRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As QuoteRealNDULRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As QuoteRealNDULRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SpecRegFollowUpRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SpecRegFollowUpRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SpecRegFollowUpRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SpecRegFollowUpRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsSaw8TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class mfglookup2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "mfglookup2"
            tableMapping.ColumnMappings.Add("code", "code")
            tableMapping.ColumnMappings.Add("Firmname", "Firmname")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `saw8`.`mfglookup2` (`code`, `Firmname`) VALUES (@code, @Firmname)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@code"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Firmname"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Firmname"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `code`, `Firmname` FROM `saw8`.`mfglookup2`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.mfglookup2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.mfglookup2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.mfglookup2DataTable = New dsSaw8.mfglookup2DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.mfglookup2DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "mfglookup2")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __code As String, ByVal __Firmname As String) As Integer
            If (__code Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__code,String)
            End If
            If (__Firmname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__Firmname,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class projectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "project"
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("ProjectName", "ProjectName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("ProjectFolder", "ProjectFolder")
            tableMapping.ColumnMappings.Add("ProjectControl", "ProjectControl")
            tableMapping.ColumnMappings.Add("MarketSegment", "MarketSegment")
            tableMapping.ColumnMappings.Add("EstimatedValue", "EstimatedValue")
            tableMapping.ColumnMappings.Add("ServiceCode", "ServiceCode")
            tableMapping.ColumnMappings.Add("LastChgBy", "LastChgBy")
            tableMapping.ColumnMappings.Add("LastChgDate", "LastChgDate")
            tableMapping.ColumnMappings.Add("Probability", "Probability")
            tableMapping.ColumnMappings.Add("ProjectDesc", "ProjectDesc")
            tableMapping.ColumnMappings.Add("BidDate", "BidDate")
            tableMapping.ColumnMappings.Add("BidTime", "BidTime")
            tableMapping.ColumnMappings.Add("PRADate", "PRADate")
            tableMapping.ColumnMappings.Add("EstDelivDate", "EstDelivDate")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("FollowBy", "FollowBy")
            tableMapping.ColumnMappings.Add("OrderEntryBy", "OrderEntryBy")
            tableMapping.ColumnMappings.Add("ShipmentBy", "ShipmentBy")
            tableMapping.ColumnMappings.Add("RetrCode", "RetrCode")
            tableMapping.ColumnMappings.Add("CSR", "CSR")
            tableMapping.ColumnMappings.Add("SLSP", "SLSP")
            tableMapping.ColumnMappings.Add("ProjMGR", "ProjMGR")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("ProjectCode", "ProjectCode")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("DistPO", "DistPO")
            tableMapping.ColumnMappings.Add("Reference", "Reference")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Sell", "Sell")
            tableMapping.ColumnMappings.Add("Billed", "Billed")
            tableMapping.ColumnMappings.Add("Paid", "Paid")
            tableMapping.ColumnMappings.Add("LockedBy", "LockedBy")
            tableMapping.ColumnMappings.Add("LastSaveDate", "LastSaveDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `saw8`.`project` WHERE ((`ProjectID` = @Original_ProjectID) AND (`Pro"& _ 
                "jectCode` = @Original_ProjectCode) AND (`ProjectName` = @Original_ProjectName) A"& _ 
                "ND (`Address` = @Original_Address) AND (`Address2` = @Original_Address2) AND (`C"& _ 
                "ity` = @Original_City) AND (`State` = @Original_State) AND (`Zip` = @Original_Zi"& _ 
                "p) AND (`Country` = @Original_Country) AND (`EntryDate` = @Original_EntryDate) A"& _ 
                "ND (`Status` = @Original_Status) AND (`ProjectFolder` = @Original_ProjectFolder)"& _ 
                " AND (`ProjectControl` = @Original_ProjectControl) AND (`MarketSegment` = @Origi"& _ 
                "nal_MarketSegment) AND (`EstimatedValue` = @Original_EstimatedValue) AND (`Servi"& _ 
                "ceCode` = @Original_ServiceCode) AND (`LastChgBy` = @Original_LastChgBy) AND (`L"& _ 
                "astChgDate` = @Original_LastChgDate) AND (`Probability` = @Original_Probability)"& _ 
                " AND (`ProjectDesc` = @Original_ProjectDesc) AND ((@IsNull_BidDate = 1 AND `BidD"& _ 
                "ate` IS NULL) OR (`BidDate` = @Original_BidDate)) AND ((@IsNull_BidTime = 1 AND "& _ 
                "`BidTime` IS NULL) OR (`BidTime` = @Original_BidTime)) AND (`PRADate` = @Origina"& _ 
                "l_PRADate) AND (`EstDelivDate` = @Original_EstDelivDate) AND (`Password` = @Orig"& _ 
                "inal_Password) AND (`FollowBy` = @Original_FollowBy) AND (`OrderEntryBy` = @Orig"& _ 
                "inal_OrderEntryBy) AND (`ShipmentBy` = @Original_ShipmentBy) AND (`RetrCode` = @"& _ 
                "Original_RetrCode) AND (`CSR` = @Original_CSR) AND (`SLSP` = @Original_SLSP) AND"& _ 
                " (`ProjMGR` = @Original_ProjMGR) AND (`BranchCode` = @Original_BranchCode) AND ("& _ 
                "`Location` = @Original_Location) AND (`DistPO` = @Original_DistPO) AND (`Referen"& _ 
                "ce` = @Original_Reference) AND (`Cost` = @Original_Cost) AND (`Sell` = @Original"& _ 
                "_Sell) AND (`Billed` = @Original_Billed) AND (`Paid` = @Original_Paid) AND (`Loc"& _ 
                "kedBy` = @Original_LockedBy) AND ((@IsNull_LastSaveDate = 1 AND `LastSaveDate` I"& _ 
                "S NULL) OR (`LastSaveDate` = @Original_LastSaveDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ProjectID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Address"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Address2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_State"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "State"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Zip"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Zip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Country"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EntryDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "EntryDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Status"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectFolder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectFolder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectControl"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectControl"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_MarketSegment"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MarketSegment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EstimatedValue"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "EstimatedValue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ServiceCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ServiceCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastChgBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastChgBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastChgDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "LastChgDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Probability"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Probability"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectDesc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_BidDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "BidDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BidDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "BidDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_BidTime"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "BidTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BidTime"
            param.DbType = Global.System.Data.DbType.Time
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Time
            param.IsNullable = true
            param.SourceColumn = "BidTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PRADate"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PRADate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EstDelivDate"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EstDelivDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_FollowBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FollowBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrderEntryBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrderEntryBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ShipmentBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ShipmentBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_RetrCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RetrCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_CSR"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CSR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_SLSP"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SLSP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjMGR"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjMGR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Location"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Location"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_DistPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "DistPO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Reference"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Reference"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Cost"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Cost"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Sell"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Sell"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Billed"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Billed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Paid"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Paid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LockedBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LockedBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_LastSaveDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastSaveDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `saw8`.`project` (`ProjectCode`, `ProjectName`, `Address`, `Address2`"& _ 
                ", `City`, `State`, `Zip`, `Country`, `EntryDate`, `Status`, `ProjectFolder`, `Pr"& _ 
                "ojectControl`, `MarketSegment`, `EstimatedValue`, `ServiceCode`, `LastChgBy`, `L"& _ 
                "astChgDate`, `Probability`, `ProjectDesc`, `BidDate`, `BidTime`, `PRADate`, `Est"& _ 
                "DelivDate`, `Password`, `FollowBy`, `OrderEntryBy`, `ShipmentBy`, `RetrCode`, `C"& _ 
                "SR`, `SLSP`, `ProjMGR`, `BranchCode`, `Location`, `DistPO`, `Reference`, `Cost`,"& _ 
                " `Sell`, `Billed`, `Paid`, `LockedBy`, `LastSaveDate`) VALUES (@ProjectCode, @Pr"& _ 
                "ojectName, @Address, @Address2, @City, @State, @Zip, @Country, @EntryDate, @Stat"& _ 
                "us, @ProjectFolder, @ProjectControl, @MarketSegment, @EstimatedValue, @ServiceCo"& _ 
                "de, @LastChgBy, @LastChgDate, @Probability, @ProjectDesc, @BidDate, @BidTime, @P"& _ 
                "RADate, @EstDelivDate, @Password, @FollowBy, @OrderEntryBy, @ShipmentBy, @RetrCo"& _ 
                "de, @CSR, @SLSP, @ProjMGR, @BranchCode, @Location, @DistPO, @Reference, @Cost, @"& _ 
                "Sell, @Billed, @Paid, @LockedBy, @LastSaveDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Address"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Address2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@State"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "State"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Zip"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Zip"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Country"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Country"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EntryDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "EntryDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Status"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectFolder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectFolder"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectControl"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectControl"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@MarketSegment"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MarketSegment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EstimatedValue"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "EstimatedValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ServiceCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ServiceCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastChgBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastChgBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastChgDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "LastChgDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Probability"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Probability"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectDesc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BidDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "BidDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BidTime"
            param.DbType = Global.System.Data.DbType.Time
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Time
            param.IsNullable = true
            param.SourceColumn = "BidTime"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PRADate"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PRADate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EstDelivDate"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EstDelivDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@FollowBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FollowBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrderEntryBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrderEntryBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ShipmentBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ShipmentBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@RetrCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RetrCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@CSR"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CSR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SLSP"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SLSP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjMGR"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjMGR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Location"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Location"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@DistPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "DistPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Reference"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Reference"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Cost"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Cost"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Sell"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Sell"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Billed"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Billed"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Paid"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Paid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LockedBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LockedBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastSaveDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `saw8`.`project` SET `ProjectCode` = @ProjectCode, `ProjectName` = @Projec"& _ 
                "tName, `Address` = @Address, `Address2` = @Address2, `City` = @City, `State` = @"& _ 
                "State, `Zip` = @Zip, `Country` = @Country, `EntryDate` = @EntryDate, `Status` = "& _ 
                "@Status, `ProjectFolder` = @ProjectFolder, `ProjectControl` = @ProjectControl, `"& _ 
                "MarketSegment` = @MarketSegment, `EstimatedValue` = @EstimatedValue, `ServiceCod"& _ 
                "e` = @ServiceCode, `LastChgBy` = @LastChgBy, `LastChgDate` = @LastChgDate, `Prob"& _ 
                "ability` = @Probability, `ProjectDesc` = @ProjectDesc, `BidDate` = @BidDate, `Bi"& _ 
                "dTime` = @BidTime, `PRADate` = @PRADate, `EstDelivDate` = @EstDelivDate, `Passwo"& _ 
                "rd` = @Password, `FollowBy` = @FollowBy, `OrderEntryBy` = @OrderEntryBy, `Shipme"& _ 
                "ntBy` = @ShipmentBy, `RetrCode` = @RetrCode, `CSR` = @CSR, `SLSP` = @SLSP, `Proj"& _ 
                "MGR` = @ProjMGR, `BranchCode` = @BranchCode, `Location` = @Location, `DistPO` = "& _ 
                "@DistPO, `Reference` = @Reference, `Cost` = @Cost, `Sell` = @Sell, `Billed` = @B"& _ 
                "illed, `Paid` = @Paid, `LockedBy` = @LockedBy, `LastSaveDate` = @LastSaveDate WH"& _ 
                "ERE ((`ProjectID` = @Original_ProjectID) AND (`ProjectCode` = @Original_ProjectC"& _ 
                "ode) AND (`ProjectName` = @Original_ProjectName) AND (`Address` = @Original_Addr"& _ 
                "ess) AND (`Address2` = @Original_Address2) AND (`City` = @Original_City) AND (`S"& _ 
                "tate` = @Original_State) AND (`Zip` = @Original_Zip) AND (`Country` = @Original_"& _ 
                "Country) AND (`EntryDate` = @Original_EntryDate) AND (`Status` = @Original_Statu"& _ 
                "s) AND (`ProjectFolder` = @Original_ProjectFolder) AND (`ProjectControl` = @Orig"& _ 
                "inal_ProjectControl) AND (`MarketSegment` = @Original_MarketSegment) AND (`Estim"& _ 
                "atedValue` = @Original_EstimatedValue) AND (`ServiceCode` = @Original_ServiceCod"& _ 
                "e) AND (`LastChgBy` = @Original_LastChgBy) AND (`LastChgDate` = @Original_LastCh"& _ 
                "gDate) AND (`Probability` = @Original_Probability) AND (`ProjectDesc` = @Origina"& _ 
                "l_ProjectDesc) AND ((@IsNull_BidDate = 1 AND `BidDate` IS NULL) OR (`BidDate` = "& _ 
                "@Original_BidDate)) AND ((@IsNull_BidTime = 1 AND `BidTime` IS NULL) OR (`BidTim"& _ 
                "e` = @Original_BidTime)) AND (`PRADate` = @Original_PRADate) AND (`EstDelivDate`"& _ 
                " = @Original_EstDelivDate) AND (`Password` = @Original_Password) AND (`FollowBy`"& _ 
                " = @Original_FollowBy) AND (`OrderEntryBy` = @Original_OrderEntryBy) AND (`Shipm"& _ 
                "entBy` = @Original_ShipmentBy) AND (`RetrCode` = @Original_RetrCode) AND (`CSR` "& _ 
                "= @Original_CSR) AND (`SLSP` = @Original_SLSP) AND (`ProjMGR` = @Original_ProjMG"& _ 
                "R) AND (`BranchCode` = @Original_BranchCode) AND (`Location` = @Original_Locatio"& _ 
                "n) AND (`DistPO` = @Original_DistPO) AND (`Reference` = @Original_Reference) AND"& _ 
                " (`Cost` = @Original_Cost) AND (`Sell` = @Original_Sell) AND (`Billed` = @Origin"& _ 
                "al_Billed) AND (`Paid` = @Original_Paid) AND (`LockedBy` = @Original_LockedBy) A"& _ 
                "ND ((@IsNull_LastSaveDate = 1 AND `LastSaveDate` IS NULL) OR (`LastSaveDate` = @"& _ 
                "Original_LastSaveDate)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Address"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Address2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@State"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "State"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Zip"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Zip"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Country"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Country"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EntryDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "EntryDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Status"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectFolder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectFolder"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectControl"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectControl"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@MarketSegment"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MarketSegment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EstimatedValue"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "EstimatedValue"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ServiceCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ServiceCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastChgBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastChgBy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastChgDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "LastChgDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Probability"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Probability"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjectDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectDesc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BidDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "BidDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BidTime"
            param.DbType = Global.System.Data.DbType.Time
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Time
            param.IsNullable = true
            param.SourceColumn = "BidTime"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PRADate"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PRADate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EstDelivDate"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EstDelivDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@FollowBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FollowBy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrderEntryBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrderEntryBy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ShipmentBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ShipmentBy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@RetrCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RetrCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@CSR"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CSR"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SLSP"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SLSP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjMGR"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjMGR"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Location"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Location"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@DistPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "DistPO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Reference"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Reference"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Cost"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Cost"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Sell"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Sell"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Billed"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Billed"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Paid"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Paid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LockedBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LockedBy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastSaveDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ProjectID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Address"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Address2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_State"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "State"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Zip"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Zip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Country"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EntryDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "EntryDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Status"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectFolder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectFolder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectControl"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectControl"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_MarketSegment"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MarketSegment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EstimatedValue"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "EstimatedValue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ServiceCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ServiceCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastChgBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastChgBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastChgDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "LastChgDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Probability"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Probability"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjectDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjectDesc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_BidDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "BidDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BidDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "BidDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_BidTime"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "BidTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BidTime"
            param.DbType = Global.System.Data.DbType.Time
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Time
            param.IsNullable = true
            param.SourceColumn = "BidTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PRADate"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PRADate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EstDelivDate"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EstDelivDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_FollowBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FollowBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrderEntryBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrderEntryBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ShipmentBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ShipmentBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_RetrCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RetrCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_CSR"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CSR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_SLSP"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SLSP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjMGR"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjMGR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Location"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Location"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_DistPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "DistPO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Reference"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Reference"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Cost"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Cost"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Sell"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Sell"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Billed"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Billed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Paid"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "Paid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LockedBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LockedBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_LastSaveDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastSaveDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `ProjectID`, `ProjectCode`, `ProjectName`, `Address`, `Address2`, `City`, "& _ 
                "`State`, `Zip`, `Country`, `EntryDate`, `Status`, `ProjectFolder`, `ProjectContr"& _ 
                "ol`, `MarketSegment`, `EstimatedValue`, `ServiceCode`, `LastChgBy`, `LastChgDate"& _ 
                "`, `Probability`, `ProjectDesc`, `BidDate`, `BidTime`, `PRADate`, `EstDelivDate`"& _ 
                ", `Password`, `FollowBy`, `OrderEntryBy`, `ShipmentBy`, `RetrCode`, `CSR`, `SLSP"& _ 
                "`, `ProjMGR`, `BranchCode`, `Location`, `DistPO`, `Reference`, `Cost`, `Sell`, `"& _ 
                "Billed`, `Paid`, `LockedBy`, `LastSaveDate`  FROM `project`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.projectDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.projectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.projectDataTable = New dsSaw8.projectDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.projectDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "project")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal __Original_ProjectID As UInteger,  _
                    ByVal __Original_ProjectCode As String,  _
                    ByVal __Original_ProjectName As String,  _
                    ByVal __Original_Address As String,  _
                    ByVal __Original_Address2 As String,  _
                    ByVal __Original_City As String,  _
                    ByVal __Original_State As String,  _
                    ByVal __Original_Zip As String,  _
                    ByVal __Original_Country As String,  _
                    ByVal __Original_EntryDate As Date,  _
                    ByVal __Original_Status As String,  _
                    ByVal __Original_ProjectFolder As String,  _
                    ByVal __Original_ProjectControl As String,  _
                    ByVal __Original_MarketSegment As String,  _
                    ByVal __Original_EstimatedValue As String,  _
                    ByVal __Original_ServiceCode As String,  _
                    ByVal __Original_LastChgBy As String,  _
                    ByVal __Original_LastChgDate As Date,  _
                    ByVal __Original_Probability As String,  _
                    ByVal __Original_ProjectDesc As String,  _
                    ByVal __Original_BidDate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_BidTime As Global.System.Nullable(Of Date),  _
                    ByVal __Original_PRADate As String,  _
                    ByVal __Original_EstDelivDate As String,  _
                    ByVal __Original_Password As String,  _
                    ByVal __Original_FollowBy As String,  _
                    ByVal __Original_OrderEntryBy As String,  _
                    ByVal __Original_ShipmentBy As String,  _
                    ByVal __Original_RetrCode As String,  _
                    ByVal __Original_CSR As String,  _
                    ByVal __Original_SLSP As String,  _
                    ByVal __Original_ProjMGR As String,  _
                    ByVal __Original_BranchCode As String,  _
                    ByVal __Original_Location As String,  _
                    ByVal __Original_DistPO As String,  _
                    ByVal __Original_Reference As String,  _
                    ByVal __Original_Cost As String,  _
                    ByVal __Original_Sell As String,  _
                    ByVal __Original_Billed As String,  _
                    ByVal __Original_Paid As String,  _
                    ByVal __Original_LockedBy As String,  _
                    ByVal __Original_LastSaveDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_ProjectID,UInteger)
            If (__Original_ProjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(__Original_ProjectCode,String)
            End If
            If (__Original_ProjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_ProjectName,String)
            End If
            If (__Original_Address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Address")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(__Original_Address,String)
            End If
            If (__Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_Address2,String)
            End If
            If (__Original_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_City")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(__Original_City,String)
            End If
            If (__Original_State Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_State")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(__Original_State,String)
            End If
            If (__Original_Zip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Zip")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(__Original_Zip,String)
            End If
            If (__Original_Country Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Country")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_Country,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(__Original_EntryDate,Date)
            If (__Original_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(__Original_Status,String)
            End If
            If (__Original_ProjectFolder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectFolder")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(__Original_ProjectFolder,String)
            End If
            If (__Original_ProjectControl Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectControl")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(__Original_ProjectControl,String)
            End If
            If (__Original_MarketSegment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_MarketSegment")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(__Original_MarketSegment,String)
            End If
            If (__Original_EstimatedValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_EstimatedValue")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(__Original_EstimatedValue,String)
            End If
            If (__Original_ServiceCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ServiceCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(__Original_ServiceCode,String)
            End If
            If (__Original_LastChgBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LastChgBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(__Original_LastChgBy,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(__Original_LastChgDate,Date)
            If (__Original_Probability Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Probability")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(__Original_Probability,String)
            End If
            If (__Original_ProjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectDesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(__Original_ProjectDesc,String)
            End If
            If (__Original_BidDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(__Original_BidDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (__Original_BidTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(__Original_BidTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (__Original_PRADate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_PRADate")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(__Original_PRADate,String)
            End If
            If (__Original_EstDelivDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_EstDelivDate")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(__Original_EstDelivDate,String)
            End If
            If (__Original_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Password")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(__Original_Password,String)
            End If
            If (__Original_FollowBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_FollowBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(__Original_FollowBy,String)
            End If
            If (__Original_OrderEntryBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrderEntryBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(__Original_OrderEntryBy,String)
            End If
            If (__Original_ShipmentBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ShipmentBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(__Original_ShipmentBy,String)
            End If
            If (__Original_RetrCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_RetrCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(__Original_RetrCode,String)
            End If
            If (__Original_CSR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_CSR")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(__Original_CSR,String)
            End If
            If (__Original_SLSP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_SLSP")
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(__Original_SLSP,String)
            End If
            If (__Original_ProjMGR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjMGR")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(__Original_ProjMGR,String)
            End If
            If (__Original_BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_BranchCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(__Original_BranchCode,String)
            End If
            If (__Original_Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Location")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(__Original_Location,String)
            End If
            If (__Original_DistPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_DistPO")
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(__Original_DistPO,String)
            End If
            If (__Original_Reference Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Reference")
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(__Original_Reference,String)
            End If
            If (__Original_Cost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Cost")
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(__Original_Cost,String)
            End If
            If (__Original_Sell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Sell")
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(__Original_Sell,String)
            End If
            If (__Original_Billed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Billed")
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(__Original_Billed,String)
            End If
            If (__Original_Paid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Paid")
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(__Original_Paid,String)
            End If
            If (__Original_LockedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LockedBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(__Original_LockedBy,String)
            End If
            If (__Original_LastSaveDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(__Original_LastSaveDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal __ProjectCode As String,  _
                    ByVal __ProjectName As String,  _
                    ByVal __Address As String,  _
                    ByVal __Address2 As String,  _
                    ByVal __City As String,  _
                    ByVal __State As String,  _
                    ByVal __Zip As String,  _
                    ByVal __Country As String,  _
                    ByVal __EntryDate As Date,  _
                    ByVal __Status As String,  _
                    ByVal __ProjectFolder As String,  _
                    ByVal __ProjectControl As String,  _
                    ByVal __MarketSegment As String,  _
                    ByVal __EstimatedValue As String,  _
                    ByVal __ServiceCode As String,  _
                    ByVal __LastChgBy As String,  _
                    ByVal __LastChgDate As Date,  _
                    ByVal __Probability As String,  _
                    ByVal __ProjectDesc As String,  _
                    ByVal __BidDate As Global.System.Nullable(Of Date),  _
                    ByVal __BidTime As Global.System.Nullable(Of Date),  _
                    ByVal __PRADate As String,  _
                    ByVal __EstDelivDate As String,  _
                    ByVal __Password As String,  _
                    ByVal __FollowBy As String,  _
                    ByVal __OrderEntryBy As String,  _
                    ByVal __ShipmentBy As String,  _
                    ByVal __RetrCode As String,  _
                    ByVal __CSR As String,  _
                    ByVal __SLSP As String,  _
                    ByVal __ProjMGR As String,  _
                    ByVal __BranchCode As String,  _
                    ByVal __Location As String,  _
                    ByVal __DistPO As String,  _
                    ByVal __Reference As String,  _
                    ByVal __Cost As String,  _
                    ByVal __Sell As String,  _
                    ByVal __Billed As String,  _
                    ByVal __Paid As String,  _
                    ByVal __LockedBy As String,  _
                    ByVal __LastSaveDate As Global.System.Nullable(Of Date)) As Integer
            If (__ProjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__ProjectCode,String)
            End If
            If (__ProjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__ProjectName,String)
            End If
            If (__Address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Address")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__Address,String)
            End If
            If (__Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__Address2,String)
            End If
            If (__City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__City")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(__City,String)
            End If
            If (__State Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__State")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__State,String)
            End If
            If (__Zip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Zip")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__Zip,String)
            End If
            If (__Country Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Country")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(__Country,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(__EntryDate,Date)
            If (__Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Status")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(__Status,String)
            End If
            If (__ProjectFolder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectFolder")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(__ProjectFolder,String)
            End If
            If (__ProjectControl Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectControl")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(__ProjectControl,String)
            End If
            If (__MarketSegment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__MarketSegment")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(__MarketSegment,String)
            End If
            If (__EstimatedValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__EstimatedValue")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(__EstimatedValue,String)
            End If
            If (__ServiceCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ServiceCode")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(__ServiceCode,String)
            End If
            If (__LastChgBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LastChgBy")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(__LastChgBy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(__LastChgDate,Date)
            If (__Probability Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Probability")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(__Probability,String)
            End If
            If (__ProjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectDesc")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(__ProjectDesc,String)
            End If
            If (__BidDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(__BidDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (__BidTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(__BidTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (__PRADate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__PRADate")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(__PRADate,String)
            End If
            If (__EstDelivDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__EstDelivDate")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(__EstDelivDate,String)
            End If
            If (__Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Password")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(__Password,String)
            End If
            If (__FollowBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__FollowBy")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(__FollowBy,String)
            End If
            If (__OrderEntryBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrderEntryBy")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(__OrderEntryBy,String)
            End If
            If (__ShipmentBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ShipmentBy")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(__ShipmentBy,String)
            End If
            If (__RetrCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__RetrCode")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(__RetrCode,String)
            End If
            If (__CSR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__CSR")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(__CSR,String)
            End If
            If (__SLSP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__SLSP")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(__SLSP,String)
            End If
            If (__ProjMGR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjMGR")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(__ProjMGR,String)
            End If
            If (__BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BranchCode")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(__BranchCode,String)
            End If
            If (__Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Location")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(__Location,String)
            End If
            If (__DistPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__DistPO")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(__DistPO,String)
            End If
            If (__Reference Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Reference")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(__Reference,String)
            End If
            If (__Cost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Cost")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(__Cost,String)
            End If
            If (__Sell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Sell")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(__Sell,String)
            End If
            If (__Billed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Billed")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(__Billed,String)
            End If
            If (__Paid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Paid")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(__Paid,String)
            End If
            If (__LockedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LockedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(__LockedBy,String)
            End If
            If (__LastSaveDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(__LastSaveDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __ProjectCode As String,  _
                    ByVal __ProjectName As String,  _
                    ByVal __Address As String,  _
                    ByVal __Address2 As String,  _
                    ByVal __City As String,  _
                    ByVal __State As String,  _
                    ByVal __Zip As String,  _
                    ByVal __Country As String,  _
                    ByVal __EntryDate As Date,  _
                    ByVal __Status As String,  _
                    ByVal __ProjectFolder As String,  _
                    ByVal __ProjectControl As String,  _
                    ByVal __MarketSegment As String,  _
                    ByVal __EstimatedValue As String,  _
                    ByVal __ServiceCode As String,  _
                    ByVal __LastChgBy As String,  _
                    ByVal __LastChgDate As Date,  _
                    ByVal __Probability As String,  _
                    ByVal __ProjectDesc As String,  _
                    ByVal __BidDate As Global.System.Nullable(Of Date),  _
                    ByVal __BidTime As Global.System.Nullable(Of Date),  _
                    ByVal __PRADate As String,  _
                    ByVal __EstDelivDate As String,  _
                    ByVal __Password As String,  _
                    ByVal __FollowBy As String,  _
                    ByVal __OrderEntryBy As String,  _
                    ByVal __ShipmentBy As String,  _
                    ByVal __RetrCode As String,  _
                    ByVal __CSR As String,  _
                    ByVal __SLSP As String,  _
                    ByVal __ProjMGR As String,  _
                    ByVal __BranchCode As String,  _
                    ByVal __Location As String,  _
                    ByVal __DistPO As String,  _
                    ByVal __Reference As String,  _
                    ByVal __Cost As String,  _
                    ByVal __Sell As String,  _
                    ByVal __Billed As String,  _
                    ByVal __Paid As String,  _
                    ByVal __LockedBy As String,  _
                    ByVal __LastSaveDate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_ProjectID As UInteger,  _
                    ByVal __Original_ProjectCode As String,  _
                    ByVal __Original_ProjectName As String,  _
                    ByVal __Original_Address As String,  _
                    ByVal __Original_Address2 As String,  _
                    ByVal __Original_City As String,  _
                    ByVal __Original_State As String,  _
                    ByVal __Original_Zip As String,  _
                    ByVal __Original_Country As String,  _
                    ByVal __Original_EntryDate As Date,  _
                    ByVal __Original_Status As String,  _
                    ByVal __Original_ProjectFolder As String,  _
                    ByVal __Original_ProjectControl As String,  _
                    ByVal __Original_MarketSegment As String,  _
                    ByVal __Original_EstimatedValue As String,  _
                    ByVal __Original_ServiceCode As String,  _
                    ByVal __Original_LastChgBy As String,  _
                    ByVal __Original_LastChgDate As Date,  _
                    ByVal __Original_Probability As String,  _
                    ByVal __Original_ProjectDesc As String,  _
                    ByVal __Original_BidDate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_BidTime As Global.System.Nullable(Of Date),  _
                    ByVal __Original_PRADate As String,  _
                    ByVal __Original_EstDelivDate As String,  _
                    ByVal __Original_Password As String,  _
                    ByVal __Original_FollowBy As String,  _
                    ByVal __Original_OrderEntryBy As String,  _
                    ByVal __Original_ShipmentBy As String,  _
                    ByVal __Original_RetrCode As String,  _
                    ByVal __Original_CSR As String,  _
                    ByVal __Original_SLSP As String,  _
                    ByVal __Original_ProjMGR As String,  _
                    ByVal __Original_BranchCode As String,  _
                    ByVal __Original_Location As String,  _
                    ByVal __Original_DistPO As String,  _
                    ByVal __Original_Reference As String,  _
                    ByVal __Original_Cost As String,  _
                    ByVal __Original_Sell As String,  _
                    ByVal __Original_Billed As String,  _
                    ByVal __Original_Paid As String,  _
                    ByVal __Original_LockedBy As String,  _
                    ByVal __Original_LastSaveDate As Global.System.Nullable(Of Date)) As Integer
            If (__ProjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__ProjectCode,String)
            End If
            If (__ProjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__ProjectName,String)
            End If
            If (__Address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Address")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__Address,String)
            End If
            If (__Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__Address2,String)
            End If
            If (__City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__City")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__City,String)
            End If
            If (__State Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__State")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__State,String)
            End If
            If (__Zip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Zip")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__Zip,String)
            End If
            If (__Country Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Country")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__Country,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__EntryDate,Date)
            If (__Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__Status,String)
            End If
            If (__ProjectFolder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectFolder")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__ProjectFolder,String)
            End If
            If (__ProjectControl Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectControl")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__ProjectControl,String)
            End If
            If (__MarketSegment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__MarketSegment")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__MarketSegment,String)
            End If
            If (__EstimatedValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__EstimatedValue")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__EstimatedValue,String)
            End If
            If (__ServiceCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ServiceCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(__ServiceCode,String)
            End If
            If (__LastChgBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LastChgBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__LastChgBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__LastChgDate,Date)
            If (__Probability Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Probability")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(__Probability,String)
            End If
            If (__ProjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(__ProjectDesc,String)
            End If
            If (__BidDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(__BidDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (__BidTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(__BidTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (__PRADate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__PRADate")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(__PRADate,String)
            End If
            If (__EstDelivDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__EstDelivDate")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(__EstDelivDate,String)
            End If
            If (__Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Password")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(__Password,String)
            End If
            If (__FollowBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__FollowBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(__FollowBy,String)
            End If
            If (__OrderEntryBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrderEntryBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(__OrderEntryBy,String)
            End If
            If (__ShipmentBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ShipmentBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(__ShipmentBy,String)
            End If
            If (__RetrCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__RetrCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(__RetrCode,String)
            End If
            If (__CSR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__CSR")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(__CSR,String)
            End If
            If (__SLSP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__SLSP")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(__SLSP,String)
            End If
            If (__ProjMGR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjMGR")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(__ProjMGR,String)
            End If
            If (__BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BranchCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(__BranchCode,String)
            End If
            If (__Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Location")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(__Location,String)
            End If
            If (__DistPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__DistPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(__DistPO,String)
            End If
            If (__Reference Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Reference")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(__Reference,String)
            End If
            If (__Cost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Cost")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(__Cost,String)
            End If
            If (__Sell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Sell")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(__Sell,String)
            End If
            If (__Billed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Billed")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(__Billed,String)
            End If
            If (__Paid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Paid")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(__Paid,String)
            End If
            If (__LockedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LockedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(__LockedBy,String)
            End If
            If (__LastSaveDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(__LastSaveDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(__Original_ProjectID,UInteger)
            If (__Original_ProjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(__Original_ProjectCode,String)
            End If
            If (__Original_ProjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(__Original_ProjectName,String)
            End If
            If (__Original_Address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Address")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(__Original_Address,String)
            End If
            If (__Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(__Original_Address2,String)
            End If
            If (__Original_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_City")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(__Original_City,String)
            End If
            If (__Original_State Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_State")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(__Original_State,String)
            End If
            If (__Original_Zip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Zip")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(__Original_Zip,String)
            End If
            If (__Original_Country Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Country")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(__Original_Country,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(__Original_EntryDate,Date)
            If (__Original_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(__Original_Status,String)
            End If
            If (__Original_ProjectFolder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectFolder")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(__Original_ProjectFolder,String)
            End If
            If (__Original_ProjectControl Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectControl")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(__Original_ProjectControl,String)
            End If
            If (__Original_MarketSegment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_MarketSegment")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(__Original_MarketSegment,String)
            End If
            If (__Original_EstimatedValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_EstimatedValue")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(__Original_EstimatedValue,String)
            End If
            If (__Original_ServiceCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ServiceCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(__Original_ServiceCode,String)
            End If
            If (__Original_LastChgBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LastChgBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(__Original_LastChgBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(__Original_LastChgDate,Date)
            If (__Original_Probability Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Probability")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(__Original_Probability,String)
            End If
            If (__Original_ProjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(__Original_ProjectDesc,String)
            End If
            If (__Original_BidDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(__Original_BidDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (__Original_BidTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(__Original_BidTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (__Original_PRADate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_PRADate")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(__Original_PRADate,String)
            End If
            If (__Original_EstDelivDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_EstDelivDate")
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(__Original_EstDelivDate,String)
            End If
            If (__Original_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Password")
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(__Original_Password,String)
            End If
            If (__Original_FollowBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_FollowBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(__Original_FollowBy,String)
            End If
            If (__Original_OrderEntryBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrderEntryBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(__Original_OrderEntryBy,String)
            End If
            If (__Original_ShipmentBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ShipmentBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(__Original_ShipmentBy,String)
            End If
            If (__Original_RetrCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_RetrCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(__Original_RetrCode,String)
            End If
            If (__Original_CSR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_CSR")
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(__Original_CSR,String)
            End If
            If (__Original_SLSP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_SLSP")
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(__Original_SLSP,String)
            End If
            If (__Original_ProjMGR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjMGR")
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(__Original_ProjMGR,String)
            End If
            If (__Original_BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_BranchCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(__Original_BranchCode,String)
            End If
            If (__Original_Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Location")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(__Original_Location,String)
            End If
            If (__Original_DistPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_DistPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(__Original_DistPO,String)
            End If
            If (__Original_Reference Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Reference")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(__Original_Reference,String)
            End If
            If (__Original_Cost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Cost")
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(__Original_Cost,String)
            End If
            If (__Original_Sell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Sell")
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(__Original_Sell,String)
            End If
            If (__Original_Billed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Billed")
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(__Original_Billed,String)
            End If
            If (__Original_Paid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Paid")
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(__Original_Paid,String)
            End If
            If (__Original_LockedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LockedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(__Original_LockedBy,String)
            End If
            If (__Original_LastSaveDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(__Original_LastSaveDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class projectcustTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "projectcust"
            tableMapping.ColumnMappings.Add("ProjectCustID", "ProjectCustID")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("QuoteCode", "QuoteCode")
            tableMapping.ColumnMappings.Add("NCode", "NCode")
            tableMapping.ColumnMappings.Add("FirmName", "FirmName")
            tableMapping.ColumnMappings.Add("ContactName", "ContactName")
            tableMapping.ColumnMappings.Add("SLSCode", "SLSCode")
            tableMapping.ColumnMappings.Add("Got", "Got")
            tableMapping.ColumnMappings.Add("Typec", "Typec")
            tableMapping.ColumnMappings.Add("MFGQuoteNumber", "MFGQuoteNumber")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Sell", "Sell")
            tableMapping.ColumnMappings.Add("Comm", "Comm")
            tableMapping.ColumnMappings.Add("Overage", "Overage")
            tableMapping.ColumnMappings.Add("ChgDate", "ChgDate")
            tableMapping.ColumnMappings.Add("OrdDate", "OrdDate")
            tableMapping.ColumnMappings.Add("NotGot", "NotGot")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("SPANumber", "SPANumber")
            tableMapping.ColumnMappings.Add("SpecCross", "SpecCross")
            tableMapping.ColumnMappings.Add("LotUnit", "LotUnit")
            tableMapping.ColumnMappings.Add("LPCost", "LPCost")
            tableMapping.ColumnMappings.Add("LPSell", "LPSell")
            tableMapping.ColumnMappings.Add("LPComm", "LPComm")
            tableMapping.ColumnMappings.Add("LampsIncl", "LampsIncl")
            tableMapping.ColumnMappings.Add("Terms", "Terms")
            tableMapping.ColumnMappings.Add("FOB", "FOB")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("LeadTime", "LeadTime")
            tableMapping.ColumnMappings.Add("QuoteToDate", "QuoteToDate")
            tableMapping.ColumnMappings.Add("LastChgDate", "LastChgDate")
            tableMapping.ColumnMappings.Add("LastChgBy", "LastChgBy")
            tableMapping.ColumnMappings.Add("Requested", "Requested")
            tableMapping.ColumnMappings.Add("FileName", "FileName")
            tableMapping.ColumnMappings.Add("JobName", "JobName")
            tableMapping.ColumnMappings.Add("MarketSegment", "MarketSegment")
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate")
            tableMapping.ColumnMappings.Add("BidDate", "BidDate")
            tableMapping.ColumnMappings.Add("SLSQ", "SLSQ")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("RetrCode", "RetrCode")
            tableMapping.ColumnMappings.Add("SelectCode", "SelectCode")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("CSR", "CSR")
            tableMapping.ColumnMappings.Add("LotUnit1", "LotUnit1")
            tableMapping.ColumnMappings.Add("StockJob", "StockJob")
            tableMapping.ColumnMappings.Add("EnteredBy", "EnteredBy")
            tableMapping.ColumnMappings.Add("PRADate", "PRADate")
            tableMapping.ColumnMappings.Add("EstDelivDate", "EstDelivDate")
            tableMapping.ColumnMappings.Add("FollowBy", "FollowBy")
            tableMapping.ColumnMappings.Add("OrderEntryBy", "OrderEntryBy")
            tableMapping.ColumnMappings.Add("ShipmentBy", "ShipmentBy")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT projectcust.*, quote.JobName, quote.MarketSegment, quote.EntryDate, quote."& _ 
                "BidDate, quote.SLSQ, quote.Status, quote.EnteredBy, quote.CSR, quote.RetrCode, q"& _ 
                "uote.SelectCode, quote.PRADate, quote.EstDelivDate, quote.FollowBy, quote.OrderE"& _ 
                "ntryBy, quote.ShipmentBy, quote.City, quote.State,  quote.LotUnit, quote.StockJo"& _ 
                "b  FROM Quote INNER JOIN projectcust ON Quote.QuoteID = projectcust.QuoteID "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.projectcustDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.projectcustDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.projectcustDataTable = New dsSaw8.projectcustDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class quoteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "quote"
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("QuoteCode", "QuoteCode")
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate")
            tableMapping.ColumnMappings.Add("BidDate", "BidDate")
            tableMapping.ColumnMappings.Add("BidTime", "BidTime")
            tableMapping.ColumnMappings.Add("SLSQ", "SLSQ")
            tableMapping.ColumnMappings.Add("LotUnit", "LotUnit")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("StockJob", "StockJob")
            tableMapping.ColumnMappings.Add("EnteredBy", "EnteredBy")
            tableMapping.ColumnMappings.Add("CSR", "CSR")
            tableMapping.ColumnMappings.Add("LastChgBy", "LastChgBy")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Sell", "Sell")
            tableMapping.ColumnMappings.Add("Comm", "Comm")
            tableMapping.ColumnMappings.Add("HeaderTab", "HeaderTab")
            tableMapping.ColumnMappings.Add("RetrCode", "RetrCode")
            tableMapping.ColumnMappings.Add("LinesYN", "LinesYN")
            tableMapping.ColumnMappings.Add("SelectCode", "SelectCode")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("LPCost", "LPCost")
            tableMapping.ColumnMappings.Add("LPSell", "LPSell")
            tableMapping.ColumnMappings.Add("PRADate", "PRADate")
            tableMapping.ColumnMappings.Add("EstDelivDate", "EstDelivDate")
            tableMapping.ColumnMappings.Add("FollowBy", "FollowBy")
            tableMapping.ColumnMappings.Add("OrderEntryBy", "OrderEntryBy")
            tableMapping.ColumnMappings.Add("ShipmentBy", "ShipmentBy")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("LightingGear", "LightingGear")
            tableMapping.ColumnMappings.Add("Dimming", "Dimming")
            tableMapping.ColumnMappings.Add("LastDateTime", "LastDateTime")
            tableMapping.ColumnMappings.Add("BidBoard", "BidBoard")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("LeadTime", "LeadTime")
            tableMapping.ColumnMappings.Add("LockedBy", "LockedBy")
            tableMapping.ColumnMappings.Add("SpecCross", "SpecCross")
            tableMapping.ColumnMappings.Add("Probability", "Probability1")
            tableMapping.ColumnMappings.Add("MarketSegment", "MarketSegment")
            tableMapping.ColumnMappings.Add("TypeOfJob", "TypeOfJob")
            tableMapping.ColumnMappings.Add("SpecCredit", "SpecCredit1")
            tableMapping.ColumnMappings.Add("SubmCover", "SubmCover")
            tableMapping.ColumnMappings.Add("SubmSinglePDF", "SubmSinglePDF")
            tableMapping.ColumnMappings.Add("JobName", "JobName")
            tableMapping.ColumnMappings.Add("LastSaveDate", "LastSaveDate")
            tableMapping.ColumnMappings.Add("LockOut", "LockOut")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        QuoteID, ProjectID, QuoteCode, EntryDate, BidDate, BidTime, SLSQ, L"& _ 
                "otUnit, Status, StockJob, EnteredBy, CSR, LastChgBy, Cost, Sell, Comm, HeaderTab"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         RetrCode, LinesYN, SelectCode, Password, LPCost, LP"& _ 
                "Sell, PRADate, EstDelivDate, FollowBy, OrderEntryBy, ShipmentBy, Remarks, Lighti"& _ 
                "ngGear, Dimming, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         LastDateTime, BidBoard, BranchCode, "& _ 
                "Address, Address2, City, State, Zip, Country, Location, LeadTime, LockedBy, Spec"& _ 
                "Cross, Probability, MarketSegment, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TypeOfJob, SpecCre"& _ 
                "dit, SubmCover, SubmSinglePDF, JobName, LastSaveDate, LockOut"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            q"& _ 
                "uote"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.quoteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.quoteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.quoteDataTable = New dsSaw8.quoteDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qutlinepriceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qutlineprice"
            tableMapping.ColumnMappings.Add("QutPrcID", "QutPrcID")
            tableMapping.ColumnMappings.Add("LineID", "LineID")
            tableMapping.ColumnMappings.Add("PriceColumn", "PriceColumn")
            tableMapping.ColumnMappings.Add("ColHeader", "ColHeader")
            tableMapping.ColumnMappings.Add("PC", "PC")
            tableMapping.ColumnMappings.Add("RecalcFormula", "RecalcFormula")
            tableMapping.ColumnMappings.Add("Got", "Got")
            tableMapping.ColumnMappings.Add("CustSPA", "CustSPA")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `saw8`.`qutlineprice` (`LineID`, `PriceColumn`, `ColHeader`, `PC`, `R"& _ 
                "ecalcFormula`, `Got`, `CustSPA`, `BranchCode`, `QuoteID`) VALUES (@LineID, @Pric"& _ 
                "eColumn, @ColHeader, @PC, @RecalcFormula, @Got, @CustSPA, @BranchCode, @QuoteID)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LineID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "LineID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PriceColumn"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PriceColumn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ColHeader"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ColHeader"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PC"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@RecalcFormula"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RecalcFormula"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Got"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Got"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@CustSPA"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CustSPA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QuoteID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "QuoteID"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `QutPrcID`, `LineID`, `PriceColumn`, `ColHeader`, `PC`, `RecalcFormula`, `"& _ 
                "Got`, `CustSPA`, `BranchCode`, `QuoteID` FROM `saw8`.`qutlineprice`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.qutlinepriceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.qutlinepriceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.qutlinepriceDataTable = New dsSaw8.qutlinepriceDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.qutlinepriceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "qutlineprice")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __LineID As UInteger, ByVal __PriceColumn As String, ByVal __ColHeader As String, ByVal __PC As String, ByVal __RecalcFormula As String, ByVal __Got As String, ByVal __CustSPA As String, ByVal __BranchCode As String, ByVal __QuoteID As UInteger) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(__LineID,UInteger)
            If (__PriceColumn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__PriceColumn")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__PriceColumn,String)
            End If
            If (__ColHeader Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ColHeader")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__ColHeader,String)
            End If
            If (__PC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__PC")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__PC,String)
            End If
            If (__RecalcFormula Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__RecalcFormula")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(__RecalcFormula,String)
            End If
            If (__Got Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Got")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__Got,String)
            End If
            If (__CustSPA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__CustSPA")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__CustSPA,String)
            End If
            If (__BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BranchCode")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(__BranchCode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(__QuoteID,UInteger)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qutnotesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qutnotes"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `saw8`.`qutnotes` (`Notes`, `QuoteID`) VALUES (@Notes, @QuoteID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Notes"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "Notes"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QuoteID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "QuoteID"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `ID`, `Notes`, `QuoteID` FROM `saw8`.`qutnotes`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.qutnotesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.qutnotesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.qutnotesDataTable = New dsSaw8.qutnotesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.qutnotesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "qutnotes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __Notes As String, ByVal __QuoteID As UInteger) As Integer
            If (__Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__Notes,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(__QuoteID,UInteger)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qutslssplitTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qutslssplit"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("SLSCODE", "SLSCODE")
            tableMapping.ColumnMappings.Add("SLSSplit", "SLSSplit")
            tableMapping.ColumnMappings.Add("SLSNumber", "SLSNumber")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `saw8`.`qutslssplit` (`SLSCODE`, `SLSSplit`, `SLSNumber`, `QuoteID`) "& _ 
                "VALUES (@SLSCODE, @SLSSplit, @SLSNumber, @QuoteID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SLSCODE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SLSCODE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SLSSplit"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "SLSSplit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SLSNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SLSNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QuoteID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "QuoteID"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `ID`, `SLSCODE`, `SLSSplit`, `SLSNumber`, `QuoteID` FROM `saw8`.`qutslsspl"& _ 
                "it`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.qutslssplitDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.qutslssplitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.qutslssplitDataTable = New dsSaw8.qutslssplitDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.qutslssplitDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "qutslssplit")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __SLSCODE As String, ByVal __SLSSplit As String, ByVal __SLSNumber As String, ByVal __QuoteID As UInteger) As Integer
            If (__SLSCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__SLSCODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__SLSCODE,String)
            End If
            If (__SLSSplit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__SLSSplit,String)
            End If
            If (__SLSNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__SLSNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__SLSNumber,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(__QuoteID,UInteger)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sls999TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sls999"
            tableMapping.ColumnMappings.Add("empcode", "empcode")
            tableMapping.ColumnMappings.Add("empname", "empname")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `saw8`.`sls999` (`empcode`, `empname`) VALUES (@empcode, @empname)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@empcode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "empcode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@empname"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "empname"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `empcode`, `empname` FROM `saw8`.`sls999`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.sls999DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.sls999DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.sls999DataTable = New dsSaw8.sls999DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.sls999DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "sls999")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __empcode As String, ByVal __empname As String) As Integer
            If (__empcode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__empcode,String)
            End If
            If (__empname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__empname,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QUTLU1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "QUTLU1"
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            tableMapping.ColumnMappings.Add("QuoteCode", "QuoteCode")
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate")
            tableMapping.ColumnMappings.Add("BidDate", "BidDate")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("SLSQ", "SLSQ")
            tableMapping.ColumnMappings.Add("EnteredBy", "EnteredBy")
            tableMapping.ColumnMappings.Add("Sell", "Sell")
            tableMapping.ColumnMappings.Add("BidTime", "BidTime")
            tableMapping.ColumnMappings.Add("LotUnit", "LotUnit")
            tableMapping.ColumnMappings.Add("StockJob", "StockJob")
            tableMapping.ColumnMappings.Add("CSR", "CSR")
            tableMapping.ColumnMappings.Add("LastChgBy", "LastChgBy")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Comm", "Comm")
            tableMapping.ColumnMappings.Add("HeaderTab", "HeaderTab")
            tableMapping.ColumnMappings.Add("RetrCode", "RetrCode")
            tableMapping.ColumnMappings.Add("LinesYN", "LinesYN")
            tableMapping.ColumnMappings.Add("SelectCode", "SelectCode")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("LPCost", "LPCost")
            tableMapping.ColumnMappings.Add("LPSell", "LPSell")
            tableMapping.ColumnMappings.Add("PRADate", "PRADate")
            tableMapping.ColumnMappings.Add("EstDelivDate", "EstDelivDate")
            tableMapping.ColumnMappings.Add("FollowBy", "FollowBy")
            tableMapping.ColumnMappings.Add("OrderEntryBy", "OrderEntryBy")
            tableMapping.ColumnMappings.Add("ShipmentBy", "ShipmentBy")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("LightingGear", "LightingGear")
            tableMapping.ColumnMappings.Add("Dimming", "Dimming")
            tableMapping.ColumnMappings.Add("LastDateTime", "LastDateTime")
            tableMapping.ColumnMappings.Add("BidBoard", "BidBoard")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("MarketSegment", "MarketSegment")
            tableMapping.ColumnMappings.Add("Probability", "Probability")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("LeadTime", "LeadTime")
            tableMapping.ColumnMappings.Add("LockedBy", "LockedBy")
            tableMapping.ColumnMappings.Add("SourceQuote", "SourceQuote")
            tableMapping.ColumnMappings.Add("SpecCross", "SpecCross")
            tableMapping.ColumnMappings.Add("TypeOfJob", "TypeOfJob")
            tableMapping.ColumnMappings.Add("SpecCredit", "SpecCredit")
            tableMapping.ColumnMappings.Add("SubmCover", "SubmCover")
            tableMapping.ColumnMappings.Add("SubmSinglePDF", "SubmSinglePDF")
            tableMapping.ColumnMappings.Add("JobName", "JobName")
            tableMapping.ColumnMappings.Add("LastSaveDate", "LastSaveDate")
            tableMapping.ColumnMappings.Add("LockOut", "LockOut")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select * from quote"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.QUTLU1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.QUTLU1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.QUTLU1DataTable = New dsSaw8.QUTLU1DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QuoteRealLUTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "QuoteRealLU"
            tableMapping.ColumnMappings.Add("ProjectCustID", "ProjectCustID")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("QuoteCode", "QuoteCode")
            tableMapping.ColumnMappings.Add("NCode", "NCode")
            tableMapping.ColumnMappings.Add("FirmName", "FirmName")
            tableMapping.ColumnMappings.Add("ContactName", "ContactName")
            tableMapping.ColumnMappings.Add("SLSCode", "SLSCode")
            tableMapping.ColumnMappings.Add("Got", "Got")
            tableMapping.ColumnMappings.Add("Typec", "Typec")
            tableMapping.ColumnMappings.Add("MFGQuoteNumber", "MFGQuoteNumber")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Sell", "Sell")
            tableMapping.ColumnMappings.Add("Comm", "Comm")
            tableMapping.ColumnMappings.Add("Overage", "Overage")
            tableMapping.ColumnMappings.Add("OrdDate", "OrdDate")
            tableMapping.ColumnMappings.Add("NotGot", "NotGot")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("SPANumber", "SPANumber")
            tableMapping.ColumnMappings.Add("SpecCross", "SpecCross")
            tableMapping.ColumnMappings.Add("LotUnit", "LotUnit")
            tableMapping.ColumnMappings.Add("LPCost", "LPCost")
            tableMapping.ColumnMappings.Add("LPSell", "LPSell")
            tableMapping.ColumnMappings.Add("LPComm", "LPComm")
            tableMapping.ColumnMappings.Add("LampsIncl", "LampsIncl")
            tableMapping.ColumnMappings.Add("Terms", "Terms")
            tableMapping.ColumnMappings.Add("FOB", "FOB")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("ProjectName", "ProjectName")
            tableMapping.ColumnMappings.Add("MarketSegment", "MarketSegment")
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate")
            tableMapping.ColumnMappings.Add("BidDate", "BidDate")
            tableMapping.ColumnMappings.Add("SLSQ", "SLSQ")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("RetrCode", "RetrCode")
            tableMapping.ColumnMappings.Add("SelectCode", "SelectCode")
            tableMapping.ColumnMappings.Add("LastChgBy", "LastChgBy")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("CSR", "CSR")
            tableMapping.ColumnMappings.Add("StockJob", "StockJob")
            tableMapping.ColumnMappings.Add("LastChgDate", "LastChgDate")
            tableMapping.ColumnMappings.Add("Probability", "Probability")
            tableMapping.ColumnMappings.Add("BidTime", "BidTime")
            tableMapping.ColumnMappings.Add("EnteredBy", "EnteredBy")
            tableMapping.ColumnMappings.Add("PRADate", "PRADate")
            tableMapping.ColumnMappings.Add("EstDelivDate", "EstDelivDate")
            tableMapping.ColumnMappings.Add("FollowBy", "FollowBy")
            tableMapping.ColumnMappings.Add("OrderEntryBy", "OrderEntryBy")
            tableMapping.ColumnMappings.Add("ShipmentBy", "ShipmentBy")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("LastDateTime", "LastDateTime")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("LeadTime", "LeadTime")
            tableMapping.ColumnMappings.Add("SourceQuote", "SourceQuote")
            tableMapping.ColumnMappings.Add("LockedBy", "LockedBy")
            tableMapping.ColumnMappings.Add("TypeOfJob", "TypeOfJob")
            tableMapping.ColumnMappings.Add("JobName", "JobName")
            tableMapping.ColumnMappings.Add("SpecCredit", "SpecCredit")
            tableMapping.ColumnMappings.Add("QuoteToDate", "QuoteToDate")
            tableMapping.ColumnMappings.Add("LotUnitQ", "LotUnitQ")
            tableMapping.ColumnMappings.Add("CostQ", "CostQ")
            tableMapping.ColumnMappings.Add("SellQ", "SellQ")
            tableMapping.ColumnMappings.Add("CommQ", "CommQ")
            tableMapping.ColumnMappings.Add("LPCostQ", "LPCostQ")
            tableMapping.ColumnMappings.Add("LPSellQ", "LPSellQ")
            tableMapping.ColumnMappings.Add("BranchCodeQ", "BranchCodeQ")
            tableMapping.ColumnMappings.Add("SpecCrossQ", "SpecCrossQ")
            tableMapping.ColumnMappings.Add("MarketSegmentQ", "MarketSegmentQ")
            tableMapping.ColumnMappings.Add("LeadTimeQ", "LeadTimeQ")
            tableMapping.ColumnMappings.Add("BusinessType", "BusinessType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        projectcust.ProjectCustID, projectcust.ProjectID, projectcust.Quote"& _ 
                "Code, projectcust.NCode, projectcust.FirmName, projectcust.ContactName, projectc"& _ 
                "ust.SLSCode, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         projectcust.Got, projectcust.Typec, proj"& _ 
                "ectcust.MFGQuoteNumber, projectcust.Cost, projectcust.Sell, projectcust.Comm, pr"& _ 
                "ojectcust.Overage, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         projectcust.LastChgDate, projectcu"& _ 
                "st.OrdDate, projectcust.NotGot, projectcust.Comments, projectcust.SPANumber, pro"& _ 
                "jectcust.SpecCross, projectcust.LotUnit, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         projectcust."& _ 
                "LPCost, projectcust.LPSell, projectcust.LPComm, projectcust.LampsIncl, projectcu"& _ 
                "st.Terms, projectcust.FOB, projectcust.QuoteID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         proje"& _ 
                "ctcust.BranchCode, project.ProjectName, project.MarketSegment, quote.EntryDate, "& _ 
                "quote.BidDate, quote.SLSQ, quote.Status, quote.RetrCode, quote.SelectCode, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                      quote.LastChgBy, quote.City, quote.State, quote.CSR, quote"& _ 
                ".StockJob, quote.Probability, quote.BidTime, quote.LotUnit AS LotUnitQ, quote.En"& _ 
                "teredBy, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         quote.Cost AS CostQ, quote.Sell AS SellQ, qu"& _ 
                "ote.Comm AS CommQ, quote.LPCost AS LPCostQ, quote.LPSell AS LPSellQ, quote.PRADa"& _ 
                "te, quote.EstDelivDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         quote.FollowBy, quote.OrderEn"& _ 
                "tryBy, quote.ShipmentBy, quote.Remarks, quote.LastDateTime, quote.BranchCode AS "& _ 
                "BranchCodeQ, quote.Zip, quote.Country, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         quote.Location"& _ 
                ", quote.LeadTime, quote.SourceQuote, quote.LockedBy, quote.SpecCross AS SpecCros"& _ 
                "sQ, quote.MarketSegment AS MarketSegmentQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         quote.Type"& _ 
                "OfJob, quote.JobName, quote.SpecCredit, projectcust.QuoteToDate, projectcust.Lea"& _ 
                "dTime AS LeadTimeQ, namedetail.BusinessType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            project INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         projectcust ON project.ProjectID = projectcust.Project"& _ 
                "ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         quote ON projectcust.QuoteID = quote.Quo"& _ 
                "teID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         namedetail ON projectcust.NCode = name"& _ 
                "detail.Code"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.QuoteRealLUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.QuoteRealLUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.QuoteRealLUDataTable = New dsSaw8.QuoteRealLUDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class quotelinesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "quotelines"
            tableMapping.ColumnMappings.Add("LineID", "LineID")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("MFG", "MFG")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("ProdID", "ProdID")
            tableMapping.ColumnMappings.Add("LPMFG", "LPMFG")
            tableMapping.ColumnMappings.Add("LPDesc", "LPDesc")
            tableMapping.ColumnMappings.Add("LPProdID", "LPProdID")
            tableMapping.ColumnMappings.Add("SpecCross", "SpecCross")
            tableMapping.ColumnMappings.Add("SPANumber", "SPANumber")
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate")
            tableMapping.ColumnMappings.Add("LastChgDate", "LastChgDate")
            tableMapping.ColumnMappings.Add("LastChgBy", "LastChgBy")
            tableMapping.ColumnMappings.Add("Active", "Active")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("NoteLine", "NoteLine")
            tableMapping.ColumnMappings.Add("Got", "Got")
            tableMapping.ColumnMappings.Add("LPCode", "LPCode")
            tableMapping.ColumnMappings.Add("LnSeq", "LnSeq")
            tableMapping.ColumnMappings.Add("LnCode", "LnCode")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Sell", "Sell")
            tableMapping.ColumnMappings.Add("Comm", "Comm")
            tableMapping.ColumnMappings.Add("UOverage", "UOverage")
            tableMapping.ColumnMappings.Add("Price1", "Price1")
            tableMapping.ColumnMappings.Add("Price2", "Price2")
            tableMapping.ColumnMappings.Add("Price3", "Price3")
            tableMapping.ColumnMappings.Add("Price4", "Price4")
            tableMapping.ColumnMappings.Add("Price5", "Price5")
            tableMapping.ColumnMappings.Add("Price6", "Price6")
            tableMapping.ColumnMappings.Add("Price7", "Price7")
            tableMapping.ColumnMappings.Add("Price8", "Price8")
            tableMapping.ColumnMappings.Add("Price9", "Price9")
            tableMapping.ColumnMappings.Add("Price10", "Price10")
            tableMapping.ColumnMappings.Add("LPCost", "LPCost")
            tableMapping.ColumnMappings.Add("LPSell", "LPSell")
            tableMapping.ColumnMappings.Add("LPQty", "LPQty")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("OverageSplit", "OverageSplit")
            tableMapping.ColumnMappings.Add("UM", "UM")
            tableMapping.ColumnMappings.Add("VendorCode", "VendorCode")
            tableMapping.ColumnMappings.Add("BkComm", "BkComm")
            tableMapping.ColumnMappings.Add("PriceCode", "PriceCode")
            tableMapping.ColumnMappings.Add("LastSaveDate", "LastSaveDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `saw8`.`quotelines` WHERE ((`LineID` = @Original_LineID) AND (`QuoteI"& _ 
                "D` = @Original_QuoteID) AND (`Type` = @Original_Type) AND (`MFG` = @Original_MFG"& _ 
                ") AND (`Description` = @Original_Description) AND (`ProdID` = @Original_ProdID) "& _ 
                "AND (`LPMFG` = @Original_LPMFG) AND (`LPDesc` = @Original_LPDesc) AND (`LPProdID"& _ 
                "` = @Original_LPProdID) AND (`SpecCross` = @Original_SpecCross) AND (`SPANumber`"& _ 
                " = @Original_SPANumber) AND (`EntryDate` = @Original_EntryDate) AND (`LastChgDat"& _ 
                "e` = @Original_LastChgDate) AND (`LastChgBy` = @Original_LastChgBy) AND (`Active"& _ 
                "` = @Original_Active) AND (`Comments` = @Original_Comments) AND (`NoteLine` = @O"& _ 
                "riginal_NoteLine) AND (`Got` = @Original_Got) AND (`LPCode` = @Original_LPCode) "& _ 
                "AND (`LnSeq` = @Original_LnSeq) AND (`LnCode` = @Original_LnCode) AND (`BranchCo"& _ 
                "de` = @Original_BranchCode) AND (`Cost` = @Original_Cost) AND (`Sell` = @Origina"& _ 
                "l_Sell) AND (`Comm` = @Original_Comm) AND (`UOverage` = @Original_UOverage) AND "& _ 
                "(`BkComm` = @Original_BkComm) AND (`Price1` = @Original_Price1) AND (`Price2` = "& _ 
                "@Original_Price2) AND (`Price3` = @Original_Price3) AND (`Price4` = @Original_Pr"& _ 
                "ice4) AND (`Price5` = @Original_Price5) AND (`Price6` = @Original_Price6) AND (`"& _ 
                "Price7` = @Original_Price7) AND (`Price8` = @Original_Price8) AND (`Price9` = @O"& _ 
                "riginal_Price9) AND (`Price10` = @Original_Price10) AND (`LPCost` = @Original_LP"& _ 
                "Cost) AND (`LPSell` = @Original_LPSell) AND (`LPQty` = @Original_LPQty) AND (`Qt"& _ 
                "y` = @Original_Qty) AND (`OverageSplit` = @Original_OverageSplit) AND (`UM` = @O"& _ 
                "riginal_UM) AND (`VendorCode` = @Original_VendorCode) AND (`PriceCode` = @Origin"& _ 
                "al_PriceCode) AND ((@IsNull_LastSaveDate = 1 AND `LastSaveDate` IS NULL) OR (`La"& _ 
                "stSaveDate` = @Original_LastSaveDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LineID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "LineID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QuoteID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "QuoteID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Type"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_MFG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MFG"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProdID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ProdID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPMFG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPMFG"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPDesc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPProdID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "LPProdID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_SpecCross"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SpecCross"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_SPANumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SPANumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EntryDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "EntryDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastChgDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "LastChgDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastChgBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastChgBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Active"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Active"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Comments"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Comments"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NoteLine"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "NoteLine"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Got"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Got"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LnSeq"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "LnSeq"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LnCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LnCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Cost"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cost"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Sell"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sell"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Comm"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Comm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UOverage"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UOverage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BkComm"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BkComm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price5"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price6"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price7"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price8"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price9"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price10"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPCost"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPCost"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPSell"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPSell"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPQty"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPQty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Qty"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Qty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OverageSplit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OverageSplit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UM"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_VendorCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "VendorCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PriceCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PriceCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_LastSaveDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastSaveDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `saw8`.`quotelines` (`QuoteID`, `Type`, `MFG`, `Description`, `ProdID"& _ 
                "`, `LPMFG`, `LPDesc`, `LPProdID`, `SpecCross`, `SPANumber`, `EntryDate`, `LastCh"& _ 
                "gDate`, `LastChgBy`, `Active`, `Comments`, `NoteLine`, `Got`, `LPCode`, `LnSeq`,"& _ 
                " `LnCode`, `BranchCode`, `Cost`, `Sell`, `Comm`, `UOverage`, `BkComm`, `Price1`,"& _ 
                " `Price2`, `Price3`, `Price4`, `Price5`, `Price6`, `Price7`, `Price8`, `Price9`,"& _ 
                " `Price10`, `LPCost`, `LPSell`, `LPQty`, `Qty`, `OverageSplit`, `UM`, `VendorCod"& _ 
                "e`, `PriceCode`, `LampsIncl`, `Paid`, `LastSaveDate`) VALUES (@QuoteID, @Type, @"& _ 
                "MFG, @Description, @ProdID, @LPMFG, @LPDesc, @LPProdID, @SpecCross, @SPANumber, "& _ 
                "@EntryDate, @LastChgDate, @LastChgBy, @Active, @Comments, @NoteLine, @Got, @LPCo"& _ 
                "de, @LnSeq, @LnCode, @BranchCode, @Cost, @Sell, @Comm, @UOverage, @BkComm, @Pric"& _ 
                "e1, @Price2, @Price3, @Price4, @Price5, @Price6, @Price7, @Price8, @Price9, @Pri"& _ 
                "ce10, @LPCost, @LPSell, @LPQty, @Qty, @OverageSplit, @UM, @VendorCode, @PriceCod"& _ 
                "e, @LampsIncl, @Paid, @LastSaveDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QuoteID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "QuoteID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Type"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@MFG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MFG"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Description"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProdID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ProdID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPMFG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPMFG"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPDesc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPProdID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "LPProdID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SpecCross"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SpecCross"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SPANumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SPANumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EntryDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "EntryDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastChgDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "LastChgDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastChgBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastChgBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Active"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Active"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Comments"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Comments"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NoteLine"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "NoteLine"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Got"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Got"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LnSeq"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "LnSeq"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LnCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LnCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Cost"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cost"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Sell"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sell"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Comm"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Comm"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UOverage"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UOverage"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BkComm"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BkComm"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price5"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price5"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price6"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price6"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price7"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price7"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price8"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price8"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price9"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price9"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price10"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price10"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPCost"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPCost"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPSell"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPSell"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPQty"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPQty"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Qty"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Qty"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OverageSplit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OverageSplit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UM"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@VendorCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "VendorCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PriceCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PriceCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LampsIncl"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "LampsIncl"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Paid"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Paid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastSaveDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `saw8`.`quotelines` SET `QuoteID` = @QuoteID, `Type` = @Type, `MFG` = @MFG"& _ 
                ", `Description` = @Description, `ProdID` = @ProdID, `LPMFG` = @LPMFG, `LPDesc` ="& _ 
                " @LPDesc, `LPProdID` = @LPProdID, `SpecCross` = @SpecCross, `SPANumber` = @SPANu"& _ 
                "mber, `EntryDate` = @EntryDate, `LastChgDate` = @LastChgDate, `LastChgBy` = @Las"& _ 
                "tChgBy, `Active` = @Active, `Comments` = @Comments, `NoteLine` = @NoteLine, `Got"& _ 
                "` = @Got, `LPCode` = @LPCode, `LnSeq` = @LnSeq, `LnCode` = @LnCode, `BranchCode`"& _ 
                " = @BranchCode, `Cost` = @Cost, `Sell` = @Sell, `Comm` = @Comm, `UOverage` = @UO"& _ 
                "verage, `BkComm` = @BkComm, `Price1` = @Price1, `Price2` = @Price2, `Price3` = @"& _ 
                "Price3, `Price4` = @Price4, `Price5` = @Price5, `Price6` = @Price6, `Price7` = @"& _ 
                "Price7, `Price8` = @Price8, `Price9` = @Price9, `Price10` = @Price10, `LPCost` ="& _ 
                " @LPCost, `LPSell` = @LPSell, `LPQty` = @LPQty, `Qty` = @Qty, `OverageSplit` = @"& _ 
                "OverageSplit, `UM` = @UM, `VendorCode` = @VendorCode, `PriceCode` = @PriceCode, "& _ 
                "`LastSaveDate` = @LastSaveDate WHERE ((`LineID` = @Original_LineID) AND (`QuoteI"& _ 
                "D` = @Original_QuoteID) AND (`Type` = @Original_Type) AND (`MFG` = @Original_MFG"& _ 
                ") AND (`Description` = @Original_Description) AND (`ProdID` = @Original_ProdID) "& _ 
                "AND (`LPMFG` = @Original_LPMFG) AND (`LPDesc` = @Original_LPDesc) AND (`LPProdID"& _ 
                "` = @Original_LPProdID) AND (`SpecCross` = @Original_SpecCross) AND (`SPANumber`"& _ 
                " = @Original_SPANumber) AND (`EntryDate` = @Original_EntryDate) AND (`LastChgDat"& _ 
                "e` = @Original_LastChgDate) AND (`LastChgBy` = @Original_LastChgBy) AND (`Active"& _ 
                "` = @Original_Active) AND (`Comments` = @Original_Comments) AND (`NoteLine` = @O"& _ 
                "riginal_NoteLine) AND (`Got` = @Original_Got) AND (`LPCode` = @Original_LPCode) "& _ 
                "AND (`LnSeq` = @Original_LnSeq) AND (`LnCode` = @Original_LnCode) AND (`BranchCo"& _ 
                "de` = @Original_BranchCode) AND (`Cost` = @Original_Cost) AND (`Sell` = @Origina"& _ 
                "l_Sell) AND (`Comm` = @Original_Comm) AND (`UOverage` = @Original_UOverage) AND "& _ 
                "(`BkComm` = @Original_BkComm) AND (`Price1` = @Original_Price1) AND (`Price2` = "& _ 
                "@Original_Price2) AND (`Price3` = @Original_Price3) AND (`Price4` = @Original_Pr"& _ 
                "ice4) AND (`Price5` = @Original_Price5) AND (`Price6` = @Original_Price6) AND (`"& _ 
                "Price7` = @Original_Price7) AND (`Price8` = @Original_Price8) AND (`Price9` = @O"& _ 
                "riginal_Price9) AND (`Price10` = @Original_Price10) AND (`LPCost` = @Original_LP"& _ 
                "Cost) AND (`LPSell` = @Original_LPSell) AND (`LPQty` = @Original_LPQty) AND (`Qt"& _ 
                "y` = @Original_Qty) AND (`OverageSplit` = @Original_OverageSplit) AND (`UM` = @O"& _ 
                "riginal_UM) AND (`VendorCode` = @Original_VendorCode) AND (`PriceCode` = @Origin"& _ 
                "al_PriceCode) AND ((@IsNull_LastSaveDate = 1 AND `LastSaveDate` IS NULL) OR (`La"& _ 
                "stSaveDate` = @Original_LastSaveDate)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QuoteID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "QuoteID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Type"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@MFG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MFG"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Description"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProdID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ProdID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPMFG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPMFG"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPDesc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPProdID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "LPProdID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SpecCross"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SpecCross"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SPANumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SPANumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EntryDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "EntryDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastChgDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "LastChgDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastChgBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastChgBy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Active"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Active"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Comments"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Comments"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NoteLine"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "NoteLine"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Got"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Got"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LnSeq"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "LnSeq"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LnCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LnCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Cost"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cost"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Sell"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sell"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Comm"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Comm"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UOverage"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UOverage"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BkComm"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BkComm"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price5"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price5"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price6"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price6"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price7"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price7"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price8"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price8"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price9"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price9"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Price10"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price10"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPCost"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPCost"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPSell"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPSell"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LPQty"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPQty"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Qty"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Qty"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OverageSplit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OverageSplit"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UM"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UM"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@VendorCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "VendorCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PriceCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PriceCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastSaveDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LineID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "LineID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QuoteID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "QuoteID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Type"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_MFG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MFG"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProdID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ProdID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPMFG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPMFG"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPDesc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPProdID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "LPProdID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_SpecCross"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SpecCross"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_SPANumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SPANumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EntryDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "EntryDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastChgDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "LastChgDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastChgBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastChgBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Active"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Active"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Comments"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Comments"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NoteLine"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "NoteLine"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Got"
            param.DbType = Global.System.Data.DbType.[SByte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
            param.IsNullable = true
            param.SourceColumn = "Got"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LnSeq"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "LnSeq"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LnCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LnCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Cost"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cost"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Sell"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sell"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Comm"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Comm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UOverage"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UOverage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BkComm"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BkComm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price5"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price6"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price7"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price8"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price9"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Price10"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Price10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPCost"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPCost"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPSell"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPSell"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LPQty"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LPQty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Qty"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Qty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OverageSplit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OverageSplit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UM"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_VendorCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "VendorCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PriceCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PriceCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_LastSaveDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastSaveDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSaveDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LineID, QuoteID, Type, MFG, Description, ProdID, LPMFG, LPDesc, LPProdID, "& _ 
                "SpecCross, SPANumber, EntryDate, LastChgDate, LastChgBy, Active, Comments, NoteL"& _ 
                "ine, Got, LPCode, LnSeq, LnCode, BranchCode, Cost, Sell, Comm, UOverage, BkComm,"& _ 
                " Price1, Price2, Price3, Price4, Price5, Price6, Price7, Price8, Price9, Price10"& _ 
                ", LPCost, LPSell, LPQty, Qty, OverageSplit, UM, VendorCode, PriceCode, LastSaveD"& _ 
                "ate FROM quotelines"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.quotelinesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.quotelinesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.quotelinesDataTable = New dsSaw8.quotelinesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.quotelinesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "quotelines")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal __Original_LineID As UInteger,  _
                    ByVal __Original_QuoteID As UInteger,  _
                    ByVal __Original_Type As String,  _
                    ByVal __Original_MFG As String,  _
                    ByVal __Original_Description As String,  _
                    ByVal __Original_ProdID As UInteger,  _
                    ByVal __Original_LPMFG As String,  _
                    ByVal __Original_LPDesc As String,  _
                    ByVal __Original_LPProdID As UInteger,  _
                    ByVal __Original_SpecCross As String,  _
                    ByVal __Original_SPANumber As String,  _
                    ByVal __Original_EntryDate As Date,  _
                    ByVal __Original_LastChgDate As Date,  _
                    ByVal __Original_LastChgBy As String,  _
                    ByVal __Original_Active As Byte,  _
                    ByVal __Original_Comments As String,  _
                    ByVal __Original_NoteLine As Byte,  _
                    ByVal __Original_Got As Byte,  _
                    ByVal __Original_LPCode As String,  _
                    ByVal __Original_LnSeq As String,  _
                    ByVal __Original_LnCode As String,  _
                    ByVal __Original_BranchCode As String,  _
                    ByVal __Original_Cost As String,  _
                    ByVal __Original_Sell As String,  _
                    ByVal __Original_Comm As String,  _
                    ByVal __Original_UOverage As String,  _
                    ByVal __Original_BkComm As String,  _
                    ByVal __Original_Price1 As String,  _
                    ByVal __Original_Price2 As String,  _
                    ByVal __Original_Price3 As String,  _
                    ByVal __Original_Price4 As String,  _
                    ByVal __Original_Price5 As String,  _
                    ByVal __Original_Price6 As String,  _
                    ByVal __Original_Price7 As String,  _
                    ByVal __Original_Price8 As String,  _
                    ByVal __Original_Price9 As String,  _
                    ByVal __Original_Price10 As String,  _
                    ByVal __Original_LPCost As String,  _
                    ByVal __Original_LPSell As String,  _
                    ByVal __Original_LPQty As String,  _
                    ByVal __Original_Qty As String,  _
                    ByVal __Original_OverageSplit As String,  _
                    ByVal __Original_UM As String,  _
                    ByVal __Original_VendorCode As String,  _
                    ByVal __Original_PriceCode As String,  _
                    ByVal __Original_LastSaveDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_LineID,UInteger)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(__Original_QuoteID,UInteger)
            If (__Original_Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Type")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_Type,String)
            End If
            If (__Original_MFG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_MFG")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(__Original_MFG,String)
            End If
            If (__Original_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Description")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_Description,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(__Original_ProdID,UInteger)
            If (__Original_LPMFG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPMFG")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(__Original_LPMFG,String)
            End If
            If (__Original_LPDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPDesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(__Original_LPDesc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_LPProdID,UInteger)
            If (__Original_SpecCross Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_SpecCross")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(__Original_SpecCross,String)
            End If
            If (__Original_SPANumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_SPANumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(__Original_SPANumber,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(__Original_EntryDate,Date)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(__Original_LastChgDate,Date)
            If (__Original_LastChgBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LastChgBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(__Original_LastChgBy,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(__Original_Active,Byte)
            If (__Original_Comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Comments")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(__Original_Comments,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(__Original_NoteLine,Byte)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(__Original_Got,Byte)
            If (__Original_LPCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(__Original_LPCode,String)
            End If
            If (__Original_LnSeq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LnSeq")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(__Original_LnSeq,String)
            End If
            If (__Original_LnCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LnCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(__Original_LnCode,String)
            End If
            If (__Original_BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_BranchCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(__Original_BranchCode,String)
            End If
            If (__Original_Cost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Cost")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(__Original_Cost,String)
            End If
            If (__Original_Sell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Sell")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(__Original_Sell,String)
            End If
            If (__Original_Comm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Comm")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(__Original_Comm,String)
            End If
            If (__Original_UOverage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_UOverage")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(__Original_UOverage,String)
            End If
            If (__Original_BkComm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_BkComm")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(__Original_BkComm,String)
            End If
            If (__Original_Price1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price1")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(__Original_Price1,String)
            End If
            If (__Original_Price2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price2")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(__Original_Price2,String)
            End If
            If (__Original_Price3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price3")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(__Original_Price3,String)
            End If
            If (__Original_Price4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price4")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(__Original_Price4,String)
            End If
            If (__Original_Price5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price5")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(__Original_Price5,String)
            End If
            If (__Original_Price6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price6")
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(__Original_Price6,String)
            End If
            If (__Original_Price7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price7")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(__Original_Price7,String)
            End If
            If (__Original_Price8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price8")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(__Original_Price8,String)
            End If
            If (__Original_Price9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price9")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(__Original_Price9,String)
            End If
            If (__Original_Price10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price10")
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(__Original_Price10,String)
            End If
            If (__Original_LPCost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPCost")
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(__Original_LPCost,String)
            End If
            If (__Original_LPSell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPSell")
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(__Original_LPSell,String)
            End If
            If (__Original_LPQty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPQty")
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(__Original_LPQty,String)
            End If
            If (__Original_Qty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Qty")
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(__Original_Qty,String)
            End If
            If (__Original_OverageSplit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OverageSplit")
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(__Original_OverageSplit,String)
            End If
            If (__Original_UM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_UM")
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(__Original_UM,String)
            End If
            If (__Original_VendorCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_VendorCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(__Original_VendorCode,String)
            End If
            If (__Original_PriceCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_PriceCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(__Original_PriceCode,String)
            End If
            If (__Original_LastSaveDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(__Original_LastSaveDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal __QuoteID As UInteger,  _
                    ByVal __Type As String,  _
                    ByVal __MFG As String,  _
                    ByVal __Description As String,  _
                    ByVal __ProdID As UInteger,  _
                    ByVal __LPMFG As String,  _
                    ByVal __LPDesc As String,  _
                    ByVal __LPProdID As UInteger,  _
                    ByVal __SpecCross As String,  _
                    ByVal __SPANumber As String,  _
                    ByVal __EntryDate As Date,  _
                    ByVal __LastChgDate As Date,  _
                    ByVal __LastChgBy As String,  _
                    ByVal __Active As Byte,  _
                    ByVal __Comments As String,  _
                    ByVal __NoteLine As Byte,  _
                    ByVal __Got As Byte,  _
                    ByVal __LPCode As String,  _
                    ByVal __LnSeq As String,  _
                    ByVal __LnCode As String,  _
                    ByVal __BranchCode As String,  _
                    ByVal __Cost As String,  _
                    ByVal __Sell As String,  _
                    ByVal __Comm As String,  _
                    ByVal __UOverage As String,  _
                    ByVal __BkComm As String,  _
                    ByVal __Price1 As String,  _
                    ByVal __Price2 As String,  _
                    ByVal __Price3 As String,  _
                    ByVal __Price4 As String,  _
                    ByVal __Price5 As String,  _
                    ByVal __Price6 As String,  _
                    ByVal __Price7 As String,  _
                    ByVal __Price8 As String,  _
                    ByVal __Price9 As String,  _
                    ByVal __Price10 As String,  _
                    ByVal __LPCost As String,  _
                    ByVal __LPSell As String,  _
                    ByVal __LPQty As String,  _
                    ByVal __Qty As String,  _
                    ByVal __OverageSplit As String,  _
                    ByVal __UM As String,  _
                    ByVal __VendorCode As String,  _
                    ByVal __PriceCode As String,  _
                    ByVal __LampsIncl As Byte,  _
                    ByVal __Paid As Byte,  _
                    ByVal __LastSaveDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(__QuoteID,UInteger)
            If (__Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Type")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__Type,String)
            End If
            If (__MFG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__MFG")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__MFG,String)
            End If
            If (__Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Description")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__Description,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(__ProdID,UInteger)
            If (__LPMFG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPMFG")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__LPMFG,String)
            End If
            If (__LPDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPDesc")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__LPDesc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(__LPProdID,UInteger)
            If (__SpecCross Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__SpecCross")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(__SpecCross,String)
            End If
            If (__SPANumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__SPANumber")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(__SPANumber,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(__EntryDate,Date)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(__LastChgDate,Date)
            If (__LastChgBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LastChgBy")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(__LastChgBy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(__Active,Byte)
            If (__Comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Comments")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(__Comments,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(__NoteLine,Byte)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(__Got,Byte)
            If (__LPCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPCode")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(__LPCode,String)
            End If
            If (__LnSeq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LnSeq")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(__LnSeq,String)
            End If
            If (__LnCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LnCode")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(__LnCode,String)
            End If
            If (__BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BranchCode")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(__BranchCode,String)
            End If
            If (__Cost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Cost")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(__Cost,String)
            End If
            If (__Sell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Sell")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(__Sell,String)
            End If
            If (__Comm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Comm")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(__Comm,String)
            End If
            If (__UOverage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__UOverage")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(__UOverage,String)
            End If
            If (__BkComm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BkComm")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(__BkComm,String)
            End If
            If (__Price1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price1")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(__Price1,String)
            End If
            If (__Price2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price2")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(__Price2,String)
            End If
            If (__Price3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price3")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(__Price3,String)
            End If
            If (__Price4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price4")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(__Price4,String)
            End If
            If (__Price5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price5")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(__Price5,String)
            End If
            If (__Price6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price6")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(__Price6,String)
            End If
            If (__Price7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price7")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(__Price7,String)
            End If
            If (__Price8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price8")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(__Price8,String)
            End If
            If (__Price9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price9")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(__Price9,String)
            End If
            If (__Price10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price10")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(__Price10,String)
            End If
            If (__LPCost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPCost")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(__LPCost,String)
            End If
            If (__LPSell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPSell")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(__LPSell,String)
            End If
            If (__LPQty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPQty")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(__LPQty,String)
            End If
            If (__Qty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Qty")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(__Qty,String)
            End If
            If (__OverageSplit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OverageSplit")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(__OverageSplit,String)
            End If
            If (__UM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__UM")
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(__UM,String)
            End If
            If (__VendorCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__VendorCode")
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(__VendorCode,String)
            End If
            If (__PriceCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__PriceCode")
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(__PriceCode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(44).Value = CType(__LampsIncl,Byte)
            Me.Adapter.InsertCommand.Parameters(45).Value = CType(__Paid,Byte)
            If (__LastSaveDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(__LastSaveDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __QuoteID As UInteger,  _
                    ByVal __Type As String,  _
                    ByVal __MFG As String,  _
                    ByVal __Description As String,  _
                    ByVal __ProdID As UInteger,  _
                    ByVal __LPMFG As String,  _
                    ByVal __LPDesc As String,  _
                    ByVal __LPProdID As UInteger,  _
                    ByVal __SpecCross As String,  _
                    ByVal __SPANumber As String,  _
                    ByVal __EntryDate As Date,  _
                    ByVal __LastChgDate As Date,  _
                    ByVal __LastChgBy As String,  _
                    ByVal __Active As Byte,  _
                    ByVal __Comments As String,  _
                    ByVal __NoteLine As Byte,  _
                    ByVal __Got As Byte,  _
                    ByVal __LPCode As String,  _
                    ByVal __LnSeq As String,  _
                    ByVal __LnCode As String,  _
                    ByVal __BranchCode As String,  _
                    ByVal __Cost As String,  _
                    ByVal __Sell As String,  _
                    ByVal __Comm As String,  _
                    ByVal __UOverage As String,  _
                    ByVal __BkComm As String,  _
                    ByVal __Price1 As String,  _
                    ByVal __Price2 As String,  _
                    ByVal __Price3 As String,  _
                    ByVal __Price4 As String,  _
                    ByVal __Price5 As String,  _
                    ByVal __Price6 As String,  _
                    ByVal __Price7 As String,  _
                    ByVal __Price8 As String,  _
                    ByVal __Price9 As String,  _
                    ByVal __Price10 As String,  _
                    ByVal __LPCost As String,  _
                    ByVal __LPSell As String,  _
                    ByVal __LPQty As String,  _
                    ByVal __Qty As String,  _
                    ByVal __OverageSplit As String,  _
                    ByVal __UM As String,  _
                    ByVal __VendorCode As String,  _
                    ByVal __PriceCode As String,  _
                    ByVal __LastSaveDate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_LineID As UInteger,  _
                    ByVal __Original_QuoteID As UInteger,  _
                    ByVal __Original_Type As String,  _
                    ByVal __Original_MFG As String,  _
                    ByVal __Original_Description As String,  _
                    ByVal __Original_ProdID As UInteger,  _
                    ByVal __Original_LPMFG As String,  _
                    ByVal __Original_LPDesc As String,  _
                    ByVal __Original_LPProdID As UInteger,  _
                    ByVal __Original_SpecCross As String,  _
                    ByVal __Original_SPANumber As String,  _
                    ByVal __Original_EntryDate As Date,  _
                    ByVal __Original_LastChgDate As Date,  _
                    ByVal __Original_LastChgBy As String,  _
                    ByVal __Original_Active As Byte,  _
                    ByVal __Original_Comments As String,  _
                    ByVal __Original_NoteLine As Byte,  _
                    ByVal __Original_Got As Byte,  _
                    ByVal __Original_LPCode As String,  _
                    ByVal __Original_LnSeq As String,  _
                    ByVal __Original_LnCode As String,  _
                    ByVal __Original_BranchCode As String,  _
                    ByVal __Original_Cost As String,  _
                    ByVal __Original_Sell As String,  _
                    ByVal __Original_Comm As String,  _
                    ByVal __Original_UOverage As String,  _
                    ByVal __Original_BkComm As String,  _
                    ByVal __Original_Price1 As String,  _
                    ByVal __Original_Price2 As String,  _
                    ByVal __Original_Price3 As String,  _
                    ByVal __Original_Price4 As String,  _
                    ByVal __Original_Price5 As String,  _
                    ByVal __Original_Price6 As String,  _
                    ByVal __Original_Price7 As String,  _
                    ByVal __Original_Price8 As String,  _
                    ByVal __Original_Price9 As String,  _
                    ByVal __Original_Price10 As String,  _
                    ByVal __Original_LPCost As String,  _
                    ByVal __Original_LPSell As String,  _
                    ByVal __Original_LPQty As String,  _
                    ByVal __Original_Qty As String,  _
                    ByVal __Original_OverageSplit As String,  _
                    ByVal __Original_UM As String,  _
                    ByVal __Original_VendorCode As String,  _
                    ByVal __Original_PriceCode As String,  _
                    ByVal __Original_LastSaveDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__QuoteID,UInteger)
            If (__Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Type")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__Type,String)
            End If
            If (__MFG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__MFG")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__MFG,String)
            End If
            If (__Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__ProdID,UInteger)
            If (__LPMFG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPMFG")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__LPMFG,String)
            End If
            If (__LPDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__LPDesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__LPProdID,UInteger)
            If (__SpecCross Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__SpecCross")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__SpecCross,String)
            End If
            If (__SPANumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__SPANumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__SPANumber,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__EntryDate,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__LastChgDate,Date)
            If (__LastChgBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LastChgBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__LastChgBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__Active,Byte)
            If (__Comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Comments")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(__Comments,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__NoteLine,Byte)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__Got,Byte)
            If (__LPCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(__LPCode,String)
            End If
            If (__LnSeq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LnSeq")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(__LnSeq,String)
            End If
            If (__LnCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LnCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(__LnCode,String)
            End If
            If (__BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BranchCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(__BranchCode,String)
            End If
            If (__Cost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Cost")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(__Cost,String)
            End If
            If (__Sell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Sell")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(__Sell,String)
            End If
            If (__Comm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Comm")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(__Comm,String)
            End If
            If (__UOverage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__UOverage")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(__UOverage,String)
            End If
            If (__BkComm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BkComm")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(__BkComm,String)
            End If
            If (__Price1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price1")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(__Price1,String)
            End If
            If (__Price2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price2")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(__Price2,String)
            End If
            If (__Price3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price3")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(__Price3,String)
            End If
            If (__Price4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price4")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(__Price4,String)
            End If
            If (__Price5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price5")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(__Price5,String)
            End If
            If (__Price6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price6")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(__Price6,String)
            End If
            If (__Price7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price7")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(__Price7,String)
            End If
            If (__Price8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price8")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(__Price8,String)
            End If
            If (__Price9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price9")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(__Price9,String)
            End If
            If (__Price10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Price10")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(__Price10,String)
            End If
            If (__LPCost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPCost")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(__LPCost,String)
            End If
            If (__LPSell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPSell")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(__LPSell,String)
            End If
            If (__LPQty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LPQty")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(__LPQty,String)
            End If
            If (__Qty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Qty")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(__Qty,String)
            End If
            If (__OverageSplit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OverageSplit")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(__OverageSplit,String)
            End If
            If (__UM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__UM")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(__UM,String)
            End If
            If (__VendorCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__VendorCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(__VendorCode,String)
            End If
            If (__PriceCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__PriceCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(__PriceCode,String)
            End If
            If (__LastSaveDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(__LastSaveDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(__Original_LineID,UInteger)
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(__Original_QuoteID,UInteger)
            If (__Original_Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Type")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(__Original_Type,String)
            End If
            If (__Original_MFG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_MFG")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(__Original_MFG,String)
            End If
            If (__Original_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(__Original_Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(__Original_ProdID,UInteger)
            If (__Original_LPMFG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPMFG")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(__Original_LPMFG,String)
            End If
            If (__Original_LPDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(__Original_LPDesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(__Original_LPProdID,UInteger)
            If (__Original_SpecCross Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_SpecCross")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(__Original_SpecCross,String)
            End If
            If (__Original_SPANumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_SPANumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(__Original_SPANumber,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(__Original_EntryDate,Date)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(__Original_LastChgDate,Date)
            If (__Original_LastChgBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LastChgBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(__Original_LastChgBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(__Original_Active,Byte)
            If (__Original_Comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Comments")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(__Original_Comments,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(__Original_NoteLine,Byte)
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(__Original_Got,Byte)
            If (__Original_LPCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(__Original_LPCode,String)
            End If
            If (__Original_LnSeq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LnSeq")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(__Original_LnSeq,String)
            End If
            If (__Original_LnCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LnCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(__Original_LnCode,String)
            End If
            If (__Original_BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_BranchCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(__Original_BranchCode,String)
            End If
            If (__Original_Cost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Cost")
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(__Original_Cost,String)
            End If
            If (__Original_Sell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Sell")
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(__Original_Sell,String)
            End If
            If (__Original_Comm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Comm")
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(__Original_Comm,String)
            End If
            If (__Original_UOverage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_UOverage")
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(__Original_UOverage,String)
            End If
            If (__Original_BkComm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_BkComm")
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(__Original_BkComm,String)
            End If
            If (__Original_Price1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price1")
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(__Original_Price1,String)
            End If
            If (__Original_Price2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price2")
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(__Original_Price2,String)
            End If
            If (__Original_Price3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price3")
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(__Original_Price3,String)
            End If
            If (__Original_Price4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price4")
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(__Original_Price4,String)
            End If
            If (__Original_Price5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price5")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(__Original_Price5,String)
            End If
            If (__Original_Price6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price6")
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(__Original_Price6,String)
            End If
            If (__Original_Price7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price7")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(__Original_Price7,String)
            End If
            If (__Original_Price8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price8")
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(__Original_Price8,String)
            End If
            If (__Original_Price9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price9")
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(__Original_Price9,String)
            End If
            If (__Original_Price10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Price10")
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(__Original_Price10,String)
            End If
            If (__Original_LPCost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPCost")
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(__Original_LPCost,String)
            End If
            If (__Original_LPSell Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPSell")
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(__Original_LPSell,String)
            End If
            If (__Original_LPQty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LPQty")
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(__Original_LPQty,String)
            End If
            If (__Original_Qty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Qty")
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(__Original_Qty,String)
            End If
            If (__Original_OverageSplit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OverageSplit")
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(__Original_OverageSplit,String)
            End If
            If (__Original_UM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_UM")
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(__Original_UM,String)
            End If
            If (__Original_VendorCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_VendorCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(__Original_VendorCode,String)
            End If
            If (__Original_PriceCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_PriceCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(__Original_PriceCode,String)
            End If
            If (__Original_LastSaveDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(__Original_LastSaveDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class namedetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "namedetail"
            tableMapping.ColumnMappings.Add("Code", "Code")
            tableMapping.ColumnMappings.Add("FirmName", "FirmName")
            tableMapping.ColumnMappings.Add("BusinessType", "BusinessType")
            tableMapping.ColumnMappings.Add("RetrievalCodes", "RetrievalCodes")
            tableMapping.ColumnMappings.Add("SoldTo", "SoldTo")
            tableMapping.ColumnMappings.Add("SLSRegion", "SLSRegion")
            tableMapping.ColumnMappings.Add("SLSTerritory", "SLSTerritory")
            tableMapping.ColumnMappings.Add("SLSState", "SLSState")
            tableMapping.ColumnMappings.Add("Credit", "Credit")
            tableMapping.ColumnMappings.Add("CreditLimit", "CreditLimit")
            tableMapping.ColumnMappings.Add("ShippingInstr", "ShippingInstr")
            tableMapping.ColumnMappings.Add("Addr1", "Addr1")
            tableMapping.ColumnMappings.Add("Addr2", "Addr2")
            tableMapping.ColumnMappings.Add("Addr3", "Addr3")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("LastChgBy", "LastChgBy")
            tableMapping.ColumnMappings.Add("CSR", "CSR")
            tableMapping.ColumnMappings.Add("Active", "Active")
            tableMapping.ColumnMappings.Add("County", "County")
            tableMapping.ColumnMappings.Add("TaxCode", "TaxCode")
            tableMapping.ColumnMappings.Add("TaxID", "TaxID")
            tableMapping.ColumnMappings.Add("ShipLoc", "ShipLoc")
            tableMapping.ColumnMappings.Add("OrdSelectCode", "OrdSelectCode")
            tableMapping.ColumnMappings.Add("LastChgDate", "LastChgDate")
            tableMapping.ColumnMappings.Add("ShortName", "ShortName")
            tableMapping.ColumnMappings.Add("PriceGroup", "PriceGroup")
            tableMapping.ColumnMappings.Add("WebStatus", "WebStatus")
            tableMapping.ColumnMappings.Add("ReleaseNumber", "ReleaseNumber")
            tableMapping.ColumnMappings.Add("LastSaveDate", "LastSaveDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from NameDetail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.namedetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.namedetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.namedetailDataTable = New dsSaw8.namedetailDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class namedefaultsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "namedefaults"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("NCode", "NCode")
            tableMapping.ColumnMappings.Add("RecType", "RecType")
            tableMapping.ColumnMappings.Add("Category", "Category")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `namedefaults` WHERE ((`id` = @Original_id) AND (`NCode` = @Original_"& _ 
                "NCode) AND (`RecType` = @Original_RecType) AND (`Category` = @Original_Category)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_RecType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RecType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Category"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Category"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `namedefaults` (`NCode`, `RecType`, `Category`, `Comments`) VALUES (@"& _ 
                "NCode, @RecType, @Category, @Comments)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@RecType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RecType"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Category"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Category"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Comments"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "Comments"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `namedefaults` SET `NCode` = @NCode, `RecType` = @RecType, `Category` = @C"& _ 
                "ategory, `Comments` = @Comments WHERE ((`id` = @Original_id) AND (`NCode` = @Ori"& _ 
                "ginal_NCode) AND (`RecType` = @Original_RecType) AND (`Category` = @Original_Cat"& _ 
                "egory))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@RecType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RecType"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Category"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Category"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Comments"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "Comments"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_RecType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "RecType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Category"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Category"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from namedefaults"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.namedefaultsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.namedefaultsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.namedefaultsDataTable = New dsSaw8.namedefaultsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.namedefaultsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "namedefaults")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal __Original_id As UInteger, ByVal __Original_NCode As String, ByVal __Original_RecType As String, ByVal __Original_Category As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_id,UInteger)
            If (__Original_NCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(__Original_NCode,String)
            End If
            If (__Original_RecType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_RecType")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_RecType,String)
            End If
            If (__Original_Category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Category")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(__Original_Category,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __NCode As String, ByVal __RecType As String, ByVal __Category As String, ByVal __Comments As String) As Integer
            If (__NCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__NCode,String)
            End If
            If (__RecType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__RecType")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__RecType,String)
            End If
            If (__Category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Category")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__Category,String)
            End If
            If (__Comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Comments")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__Comments,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal __NCode As String, ByVal __RecType As String, ByVal __Category As String, ByVal __Comments As String, ByVal __Original_id As UInteger, ByVal __Original_NCode As String, ByVal __Original_RecType As String, ByVal __Original_Category As String) As Integer
            If (__NCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__NCode,String)
            End If
            If (__RecType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__RecType")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__RecType,String)
            End If
            If (__Category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Category")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__Category,String)
            End If
            If (__Comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Comments")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__Comments,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__Original_id,UInteger)
            If (__Original_NCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__Original_NCode,String)
            End If
            If (__Original_RecType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_RecType")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__Original_RecType,String)
            End If
            If (__Original_Category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Category")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__Original_Category,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class admingroupTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "admingroup"
            tableMapping.ColumnMappings.Add("GroupID", "GroupID")
            tableMapping.ColumnMappings.Add("GroupDescription", "GroupDescription")
            tableMapping.ColumnMappings.Add("DateAdded", "DateAdded")
            tableMapping.ColumnMappings.Add("LastSavedDate", "LastSavedDate")
            tableMapping.ColumnMappings.Add("LastSaveBy", "LastSaveBy")
            tableMapping.ColumnMappings.Add("OrdSLSCode", "OrdSLSCode")
            tableMapping.ColumnMappings.Add("OrdSLSPct", "OrdSLSPct")
            tableMapping.ColumnMappings.Add("OrdSalesDol", "OrdSalesDol")
            tableMapping.ColumnMappings.Add("OrdCommDolPct", "OrdCommDolPct")
            tableMapping.ColumnMappings.Add("OrderView", "OrderView")
            tableMapping.ColumnMappings.Add("OrdLock", "OrdLock")
            tableMapping.ColumnMappings.Add("OrdPrtLUGrid", "OrdPrtLUGrid")
            tableMapping.ColumnMappings.Add("QutSLSCode", "QutSLSCode")
            tableMapping.ColumnMappings.Add("QutSLSPct", "QutSLSPct")
            tableMapping.ColumnMappings.Add("QutSalesDol", "QutSalesDol")
            tableMapping.ColumnMappings.Add("QutCommDolPct", "QutCommDolPct")
            tableMapping.ColumnMappings.Add("QuoteView", "QuoteView")
            tableMapping.ColumnMappings.Add("QutLock", "QutLock")
            tableMapping.ColumnMappings.Add("QutPrtLUGrid", "QutPrtLUGrid")
            tableMapping.ColumnMappings.Add("ProjSLSCode", "ProjSLSCode")
            tableMapping.ColumnMappings.Add("ProjSLSPct", "ProjSLSPct")
            tableMapping.ColumnMappings.Add("ProjSalesDol", "ProjSalesDol")
            tableMapping.ColumnMappings.Add("ProjCommDolPct", "ProjCommDolPct")
            tableMapping.ColumnMappings.Add("ProjView", "ProjView")
            tableMapping.ColumnMappings.Add("ProjLock", "ProjLock")
            tableMapping.ColumnMappings.Add("ProjAllowPrc", "ProjAllowPrc")
            tableMapping.ColumnMappings.Add("ProjAllowPO", "ProjAllowPO")
            tableMapping.ColumnMappings.Add("ProjAllowBill", "ProjAllowBill")
            tableMapping.ColumnMappings.Add("ProjPrtLUGrid", "ProjPrtLUGrid")
            tableMapping.ColumnMappings.Add("NamSLS", "NamSLS")
            tableMapping.ColumnMappings.Add("NamAddEdit", "NamAddEdit")
            tableMapping.ColumnMappings.Add("NamView", "NamView")
            tableMapping.ColumnMappings.Add("ReportOrd", "ReportOrd")
            tableMapping.ColumnMappings.Add("ReportInv", "ReportInv")
            tableMapping.ColumnMappings.Add("ReportQut", "ReportQut")
            tableMapping.ColumnMappings.Add("ReportProj", "ReportProj")
            tableMapping.ColumnMappings.Add("ReconcileInv", "ReconcileInv")
            tableMapping.ColumnMappings.Add("NamOnlyChgSLS", "NamOnlyChgSLS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `admingroup` WHERE ((`GroupID` = @Original_GroupID) AND ((@IsNull_Dat"& _ 
                "eAdded = 1 AND `DateAdded` IS NULL) OR (`DateAdded` = @Original_DateAdded)) AND "& _ 
                "((@IsNull_LastSavedDate = 1 AND `LastSavedDate` IS NULL) OR (`LastSavedDate` = @"& _ 
                "Original_LastSavedDate)) AND (`LastSaveBy` = @Original_LastSaveBy) AND (`OrdSLSC"& _ 
                "ode` = @Original_OrdSLSCode) AND (`OrdSLSPct` = @Original_OrdSLSPct) AND (`OrdSa"& _ 
                "lesDol` = @Original_OrdSalesDol) AND (`OrdCommDolPct` = @Original_OrdCommDolPct)"& _ 
                " AND (`OrderView` = @Original_OrderView) AND (`OrdLock` = @Original_OrdLock) AND"& _ 
                " (`OrdPrtLUGrid` = @Original_OrdPrtLUGrid) AND (`QutSLSCode` = @Original_QutSLSC"& _ 
                "ode) AND (`QutSLSPct` = @Original_QutSLSPct) AND (`QutSalesDol` = @Original_QutS"& _ 
                "alesDol) AND (`QutCommDolPct` = @Original_QutCommDolPct) AND (`QuoteView` = @Ori"& _ 
                "ginal_QuoteView) AND (`QutLock` = @Original_QutLock) AND (`QutPrtLUGrid` = @Orig"& _ 
                "inal_QutPrtLUGrid) AND (`ProjSLSCode` = @Original_ProjSLSCode) AND (`ProjSLSPct`"& _ 
                " = @Original_ProjSLSPct) AND (`ProjSalesDol` = @Original_ProjSalesDol) AND (`Pro"& _ 
                "jCommDolPct` = @Original_ProjCommDolPct) AND (`ProjView` = @Original_ProjView) A"& _ 
                "ND (`ProjLock` = @Original_ProjLock) AND (`ProjAllowPrc` = @Original_ProjAllowPr"& _ 
                "c) AND (`ProjAllowPO` = @Original_ProjAllowPO) AND (`ProjAllowBill` = @Original_"& _ 
                "ProjAllowBill) AND (`ProjPrtLUGrid` = @Original_ProjPrtLUGrid) AND (`NamSLS` = @"& _ 
                "Original_NamSLS) AND (`NamAddEdit` = @Original_NamAddEdit) AND (`NamView` = @Ori"& _ 
                "ginal_NamView) AND (`ReportOrd` = @Original_ReportOrd) AND (`ReportInv` = @Origi"& _ 
                "nal_ReportInv) AND (`ReportQut` = @Original_ReportQut) AND (`ReportProj` = @Orig"& _ 
                "inal_ReportProj) AND (`ReconcileInv` = @Original_ReconcileInv) AND (`NamOnlyChgS"& _ 
                "LS` = @Original_NamOnlyChgSLS))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GroupID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_DateAdded"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "DateAdded"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_DateAdded"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateAdded"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_LastSavedDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LastSavedDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastSavedDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSavedDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastSaveBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastSaveBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSLSCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSLSPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSalesDol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdCommDolPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrderView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrderView"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdLock"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdPrtLUGrid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSLSCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSLSPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSalesDol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutCommDolPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QuoteView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QuoteView"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutLock"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutPrtLUGrid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSLSCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSLSPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSalesDol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjCommDolPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjView"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjLock"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjAllowPrc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowPrc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjAllowPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowPO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjAllowBill"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowBill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjPrtLUGrid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NamSLS"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamSLS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NamAddEdit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamAddEdit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NamView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamView"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReportOrd"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReportInv"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportInv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReportQut"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportQut"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReportProj"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportProj"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReconcileInv"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReconcileInv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NamOnlyChgSLS"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamOnlyChgSLS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `admingroup` (`GroupID`, `GroupDescription`, `DateAdded`, `LastSavedD"& _ 
                "ate`, `LastSaveBy`, `OrdSLSCode`, `OrdSLSPct`, `OrdSalesDol`, `OrdCommDolPct`, `"& _ 
                "OrderView`, `OrdLock`, `OrdPrtLUGrid`, `QutSLSCode`, `QutSLSPct`, `QutSalesDol`,"& _ 
                " `QutCommDolPct`, `QuoteView`, `QutLock`, `QutPrtLUGrid`, `ProjSLSCode`, `ProjSL"& _ 
                "SPct`, `ProjSalesDol`, `ProjCommDolPct`, `ProjView`, `ProjLock`, `ProjAllowPrc`,"& _ 
                " `ProjAllowPO`, `ProjAllowBill`, `ProjPrtLUGrid`, `NamSLS`, `NamAddEdit`, `NamVi"& _ 
                "ew`, `ReportOrd`, `ReportInv`, `ReportQut`, `ReportProj`, `ReconcileInv`, `NamOn"& _ 
                "lyChgSLS`) VALUES (@GroupID, @GroupDescription, @DateAdded, @LastSavedDate, @Las"& _ 
                "tSaveBy, @OrdSLSCode, @OrdSLSPct, @OrdSalesDol, @OrdCommDolPct, @OrderView, @Ord"& _ 
                "Lock, @OrdPrtLUGrid, @QutSLSCode, @QutSLSPct, @QutSalesDol, @QutCommDolPct, @Quo"& _ 
                "teView, @QutLock, @QutPrtLUGrid, @ProjSLSCode, @ProjSLSPct, @ProjSalesDol, @Proj"& _ 
                "CommDolPct, @ProjView, @ProjLock, @ProjAllowPrc, @ProjAllowPO, @ProjAllowBill, @"& _ 
                "ProjPrtLUGrid, @NamSLS, @NamAddEdit, @NamView, @ReportOrd, @ReportInv, @ReportQu"& _ 
                "t, @ReportProj, @ReconcileInv, @NamOnlyChgSLS)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GroupID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GroupDescription"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "GroupDescription"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@DateAdded"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateAdded"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastSavedDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSavedDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastSaveBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastSaveBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSLSCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSLSPct"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSalesDol"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdCommDolPct"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrderView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrderView"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdLock"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdPrtLUGrid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSLSCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSLSPct"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSalesDol"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutCommDolPct"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QuoteView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QuoteView"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutLock"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutPrtLUGrid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSLSCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSLSPct"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSalesDol"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjCommDolPct"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjView"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjLock"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjAllowPrc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowPrc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjAllowPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjAllowBill"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowBill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjPrtLUGrid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NamSLS"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamSLS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NamAddEdit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamAddEdit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NamView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamView"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReportOrd"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportOrd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReportInv"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportInv"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReportQut"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportQut"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReportProj"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportProj"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReconcileInv"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReconcileInv"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NamOnlyChgSLS"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamOnlyChgSLS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `admingroup` SET `GroupID` = @GroupID, `GroupDescription` = @GroupDescript"& _ 
                "ion, `DateAdded` = @DateAdded, `LastSavedDate` = @LastSavedDate, `LastSaveBy` = "& _ 
                "@LastSaveBy, `OrdSLSCode` = @OrdSLSCode, `OrdSLSPct` = @OrdSLSPct, `OrdSalesDol`"& _ 
                " = @OrdSalesDol, `OrdCommDolPct` = @OrdCommDolPct, `OrderView` = @OrderView, `Or"& _ 
                "dLock` = @OrdLock, `OrdPrtLUGrid` = @OrdPrtLUGrid, `QutSLSCode` = @QutSLSCode, `"& _ 
                "QutSLSPct` = @QutSLSPct, `QutSalesDol` = @QutSalesDol, `QutCommDolPct` = @QutCom"& _ 
                "mDolPct, `QuoteView` = @QuoteView, `QutLock` = @QutLock, `QutPrtLUGrid` = @QutPr"& _ 
                "tLUGrid, `ProjSLSCode` = @ProjSLSCode, `ProjSLSPct` = @ProjSLSPct, `ProjSalesDol"& _ 
                "` = @ProjSalesDol, `ProjCommDolPct` = @ProjCommDolPct, `ProjView` = @ProjView, `"& _ 
                "ProjLock` = @ProjLock, `ProjAllowPrc` = @ProjAllowPrc, `ProjAllowPO` = @ProjAllo"& _ 
                "wPO, `ProjAllowBill` = @ProjAllowBill, `ProjPrtLUGrid` = @ProjPrtLUGrid, `NamSLS"& _ 
                "` = @NamSLS, `NamAddEdit` = @NamAddEdit, `NamView` = @NamView, `ReportOrd` = @Re"& _ 
                "portOrd, `ReportInv` = @ReportInv, `ReportQut` = @ReportQut, `ReportProj` = @Rep"& _ 
                "ortProj, `ReconcileInv` = @ReconcileInv, `NamOnlyChgSLS` = @NamOnlyChgSLS WHERE "& _ 
                "((`GroupID` = @Original_GroupID) AND ((@IsNull_DateAdded = 1 AND `DateAdded` IS "& _ 
                "NULL) OR (`DateAdded` = @Original_DateAdded)) AND ((@IsNull_LastSavedDate = 1 AN"& _ 
                "D `LastSavedDate` IS NULL) OR (`LastSavedDate` = @Original_LastSavedDate)) AND ("& _ 
                "`LastSaveBy` = @Original_LastSaveBy) AND (`OrdSLSCode` = @Original_OrdSLSCode) A"& _ 
                "ND (`OrdSLSPct` = @Original_OrdSLSPct) AND (`OrdSalesDol` = @Original_OrdSalesDo"& _ 
                "l) AND (`OrdCommDolPct` = @Original_OrdCommDolPct) AND (`OrderView` = @Original_"& _ 
                "OrderView) AND (`OrdLock` = @Original_OrdLock) AND (`OrdPrtLUGrid` = @Original_O"& _ 
                "rdPrtLUGrid) AND (`QutSLSCode` = @Original_QutSLSCode) AND (`QutSLSPct` = @Origi"& _ 
                "nal_QutSLSPct) AND (`QutSalesDol` = @Original_QutSalesDol) AND (`QutCommDolPct` "& _ 
                "= @Original_QutCommDolPct) AND (`QuoteView` = @Original_QuoteView) AND (`QutLock"& _ 
                "` = @Original_QutLock) AND (`QutPrtLUGrid` = @Original_QutPrtLUGrid) AND (`ProjS"& _ 
                "LSCode` = @Original_ProjSLSCode) AND (`ProjSLSPct` = @Original_ProjSLSPct) AND ("& _ 
                "`ProjSalesDol` = @Original_ProjSalesDol) AND (`ProjCommDolPct` = @Original_ProjC"& _ 
                "ommDolPct) AND (`ProjView` = @Original_ProjView) AND (`ProjLock` = @Original_Pro"& _ 
                "jLock) AND (`ProjAllowPrc` = @Original_ProjAllowPrc) AND (`ProjAllowPO` = @Origi"& _ 
                "nal_ProjAllowPO) AND (`ProjAllowBill` = @Original_ProjAllowBill) AND (`ProjPrtLU"& _ 
                "Grid` = @Original_ProjPrtLUGrid) AND (`NamSLS` = @Original_NamSLS) AND (`NamAddE"& _ 
                "dit` = @Original_NamAddEdit) AND (`NamView` = @Original_NamView) AND (`ReportOrd"& _ 
                "` = @Original_ReportOrd) AND (`ReportInv` = @Original_ReportInv) AND (`ReportQut"& _ 
                "` = @Original_ReportQut) AND (`ReportProj` = @Original_ReportProj) AND (`Reconci"& _ 
                "leInv` = @Original_ReconcileInv) AND (`NamOnlyChgSLS` = @Original_NamOnlyChgSLS)"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GroupID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GroupDescription"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "GroupDescription"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@DateAdded"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateAdded"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastSavedDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSavedDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LastSaveBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastSaveBy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSLSCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSLSPct"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSalesDol"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdCommDolPct"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrderView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrderView"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdLock"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@OrdPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdPrtLUGrid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSLSCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSLSPct"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSalesDol"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutCommDolPct"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QuoteView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QuoteView"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutLock"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@QutPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutPrtLUGrid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSLSCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSLSPct"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSalesDol"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjCommDolPct"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjView"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjLock"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjAllowPrc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowPrc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjAllowPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowPO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjAllowBill"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowBill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ProjPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjPrtLUGrid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NamSLS"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamSLS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NamAddEdit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamAddEdit"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NamView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamView"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReportOrd"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportOrd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReportInv"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportInv"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReportQut"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportQut"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReportProj"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportProj"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ReconcileInv"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReconcileInv"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@NamOnlyChgSLS"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamOnlyChgSLS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GroupID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_DateAdded"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "DateAdded"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_DateAdded"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateAdded"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_LastSavedDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LastSavedDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastSavedDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "LastSavedDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LastSaveBy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastSaveBy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSLSCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSLSPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdSalesDol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdCommDolPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrderView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrderView"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdLock"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_OrdPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "OrdPrtLUGrid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSLSCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSLSPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutSalesDol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutCommDolPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QuoteView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QuoteView"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutLock"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_QutPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "QutPrtLUGrid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjSLSCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSLSCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjSLSPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSLSPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjSalesDol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjSalesDol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjCommDolPct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjCommDolPct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjView"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjLock"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjLock"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjAllowPrc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowPrc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjAllowPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowPO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjAllowBill"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjAllowBill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ProjPrtLUGrid"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ProjPrtLUGrid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NamSLS"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamSLS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NamAddEdit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamAddEdit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NamView"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamView"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReportOrd"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReportInv"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportInv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReportQut"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportQut"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReportProj"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReportProj"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_ReconcileInv"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ReconcileInv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_NamOnlyChgSLS"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "NamOnlyChgSLS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GroupID, GroupDescription, DateAdded, LastSavedDate, LastSaveBy, OrdSLSCod"& _ 
                "e, OrdSLSPct, OrdSalesDol, OrdCommDolPct, OrderView, OrdLock, OrdPrtLUGrid, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                QutSLSCode, QutSLSPct, QutSalesDol, QutCommDolPct, QuoteView, Qu"& _ 
                "tLock, QutPrtLUGrid, ProjSLSCode, ProjSLSPct, ProjSalesDol, ProjCommDolPct, Proj"& _ 
                "View, ProjLock, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ProjAllowPrc, ProjAllowPO, ProjAllowBill, Pr"& _ 
                "ojPrtLUGrid, NamSLS, NamAddEdit, NamView, ReportOrd, ReportInv, ReportQut, Repor"& _ 
                "tProj, ReconcileInv, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  NamOnlyChgSLS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     admingroup"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.admingroupDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.admingroupDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.admingroupDataTable = New dsSaw8.admingroupDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.admingroupDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "admingroup")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal __Original_GroupID As String,  _
                    ByVal __Original_DateAdded As Global.System.Nullable(Of Date),  _
                    ByVal __Original_LastSavedDate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_LastSaveBy As String,  _
                    ByVal __Original_OrdSLSCode As String,  _
                    ByVal __Original_OrdSLSPct As String,  _
                    ByVal __Original_OrdSalesDol As String,  _
                    ByVal __Original_OrdCommDolPct As String,  _
                    ByVal __Original_OrderView As String,  _
                    ByVal __Original_OrdLock As String,  _
                    ByVal __Original_OrdPrtLUGrid As String,  _
                    ByVal __Original_QutSLSCode As String,  _
                    ByVal __Original_QutSLSPct As String,  _
                    ByVal __Original_QutSalesDol As String,  _
                    ByVal __Original_QutCommDolPct As String,  _
                    ByVal __Original_QuoteView As String,  _
                    ByVal __Original_QutLock As String,  _
                    ByVal __Original_QutPrtLUGrid As String,  _
                    ByVal __Original_ProjSLSCode As String,  _
                    ByVal __Original_ProjSLSPct As String,  _
                    ByVal __Original_ProjSalesDol As String,  _
                    ByVal __Original_ProjCommDolPct As String,  _
                    ByVal __Original_ProjView As String,  _
                    ByVal __Original_ProjLock As String,  _
                    ByVal __Original_ProjAllowPrc As String,  _
                    ByVal __Original_ProjAllowPO As String,  _
                    ByVal __Original_ProjAllowBill As String,  _
                    ByVal __Original_ProjPrtLUGrid As String,  _
                    ByVal __Original_NamSLS As String,  _
                    ByVal __Original_NamAddEdit As String,  _
                    ByVal __Original_NamView As String,  _
                    ByVal __Original_ReportOrd As String,  _
                    ByVal __Original_ReportInv As String,  _
                    ByVal __Original_ReportQut As String,  _
                    ByVal __Original_ReportProj As String,  _
                    ByVal __Original_ReconcileInv As String,  _
                    ByVal __Original_NamOnlyChgSLS As String) As Integer
            If (__Original_GroupID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_GroupID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_GroupID,String)
            End If
            If (__Original_DateAdded.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_DateAdded.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (__Original_LastSavedDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_LastSavedDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (__Original_LastSaveBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LastSaveBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(__Original_LastSaveBy,String)
            End If
            If (__Original_OrdSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdSLSCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(__Original_OrdSLSCode,String)
            End If
            If (__Original_OrdSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdSLSPct")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(__Original_OrdSLSPct,String)
            End If
            If (__Original_OrdSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdSalesDol")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_OrdSalesDol,String)
            End If
            If (__Original_OrdCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdCommDolPct")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(__Original_OrdCommDolPct,String)
            End If
            If (__Original_OrderView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrderView")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(__Original_OrderView,String)
            End If
            If (__Original_OrdLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdLock")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(__Original_OrdLock,String)
            End If
            If (__Original_OrdPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdPrtLUGrid")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(__Original_OrdPrtLUGrid,String)
            End If
            If (__Original_QutSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutSLSCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(__Original_QutSLSCode,String)
            End If
            If (__Original_QutSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutSLSPct")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(__Original_QutSLSPct,String)
            End If
            If (__Original_QutSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutSalesDol")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(__Original_QutSalesDol,String)
            End If
            If (__Original_QutCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutCommDolPct")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(__Original_QutCommDolPct,String)
            End If
            If (__Original_QuoteView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QuoteView")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(__Original_QuoteView,String)
            End If
            If (__Original_QutLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutLock")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(__Original_QutLock,String)
            End If
            If (__Original_QutPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutPrtLUGrid")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(__Original_QutPrtLUGrid,String)
            End If
            If (__Original_ProjSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjSLSCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(__Original_ProjSLSCode,String)
            End If
            If (__Original_ProjSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjSLSPct")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(__Original_ProjSLSPct,String)
            End If
            If (__Original_ProjSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjSalesDol")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(__Original_ProjSalesDol,String)
            End If
            If (__Original_ProjCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjCommDolPct")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(__Original_ProjCommDolPct,String)
            End If
            If (__Original_ProjView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjView")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(__Original_ProjView,String)
            End If
            If (__Original_ProjLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjLock")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(__Original_ProjLock,String)
            End If
            If (__Original_ProjAllowPrc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjAllowPrc")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(__Original_ProjAllowPrc,String)
            End If
            If (__Original_ProjAllowPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjAllowPO")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(__Original_ProjAllowPO,String)
            End If
            If (__Original_ProjAllowBill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjAllowBill")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(__Original_ProjAllowBill,String)
            End If
            If (__Original_ProjPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjPrtLUGrid")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(__Original_ProjPrtLUGrid,String)
            End If
            If (__Original_NamSLS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NamSLS")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(__Original_NamSLS,String)
            End If
            If (__Original_NamAddEdit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NamAddEdit")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(__Original_NamAddEdit,String)
            End If
            If (__Original_NamView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NamView")
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(__Original_NamView,String)
            End If
            If (__Original_ReportOrd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReportOrd")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(__Original_ReportOrd,String)
            End If
            If (__Original_ReportInv Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReportInv")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(__Original_ReportInv,String)
            End If
            If (__Original_ReportQut Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReportQut")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(__Original_ReportQut,String)
            End If
            If (__Original_ReportProj Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReportProj")
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(__Original_ReportProj,String)
            End If
            If (__Original_ReconcileInv Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReconcileInv")
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(__Original_ReconcileInv,String)
            End If
            If (__Original_NamOnlyChgSLS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NamOnlyChgSLS")
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(__Original_NamOnlyChgSLS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal __GroupID As String,  _
                    ByVal __GroupDescription As String,  _
                    ByVal __DateAdded As Global.System.Nullable(Of Date),  _
                    ByVal __LastSavedDate As Global.System.Nullable(Of Date),  _
                    ByVal __LastSaveBy As String,  _
                    ByVal __OrdSLSCode As String,  _
                    ByVal __OrdSLSPct As String,  _
                    ByVal __OrdSalesDol As String,  _
                    ByVal __OrdCommDolPct As String,  _
                    ByVal __OrderView As String,  _
                    ByVal __OrdLock As String,  _
                    ByVal __OrdPrtLUGrid As String,  _
                    ByVal __QutSLSCode As String,  _
                    ByVal __QutSLSPct As String,  _
                    ByVal __QutSalesDol As String,  _
                    ByVal __QutCommDolPct As String,  _
                    ByVal __QuoteView As String,  _
                    ByVal __QutLock As String,  _
                    ByVal __QutPrtLUGrid As String,  _
                    ByVal __ProjSLSCode As String,  _
                    ByVal __ProjSLSPct As String,  _
                    ByVal __ProjSalesDol As String,  _
                    ByVal __ProjCommDolPct As String,  _
                    ByVal __ProjView As String,  _
                    ByVal __ProjLock As String,  _
                    ByVal __ProjAllowPrc As String,  _
                    ByVal __ProjAllowPO As String,  _
                    ByVal __ProjAllowBill As String,  _
                    ByVal __ProjPrtLUGrid As String,  _
                    ByVal __NamSLS As String,  _
                    ByVal __NamAddEdit As String,  _
                    ByVal __NamView As String,  _
                    ByVal __ReportOrd As String,  _
                    ByVal __ReportInv As String,  _
                    ByVal __ReportQut As String,  _
                    ByVal __ReportProj As String,  _
                    ByVal __ReconcileInv As String,  _
                    ByVal __NamOnlyChgSLS As String) As Integer
            If (__GroupID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__GroupID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__GroupID,String)
            End If
            If (__GroupDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__GroupDescription,String)
            End If
            If (__DateAdded.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__DateAdded.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (__LastSavedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__LastSavedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (__LastSaveBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LastSaveBy")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(__LastSaveBy,String)
            End If
            If (__OrdSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdSLSCode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__OrdSLSCode,String)
            End If
            If (__OrdSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdSLSPct")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__OrdSLSPct,String)
            End If
            If (__OrdSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdSalesDol")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(__OrdSalesDol,String)
            End If
            If (__OrdCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdCommDolPct")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(__OrdCommDolPct,String)
            End If
            If (__OrderView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrderView")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(__OrderView,String)
            End If
            If (__OrdLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdLock")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(__OrdLock,String)
            End If
            If (__OrdPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdPrtLUGrid")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(__OrdPrtLUGrid,String)
            End If
            If (__QutSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutSLSCode")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(__QutSLSCode,String)
            End If
            If (__QutSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutSLSPct")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(__QutSLSPct,String)
            End If
            If (__QutSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutSalesDol")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(__QutSalesDol,String)
            End If
            If (__QutCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutCommDolPct")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(__QutCommDolPct,String)
            End If
            If (__QuoteView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QuoteView")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(__QuoteView,String)
            End If
            If (__QutLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutLock")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(__QutLock,String)
            End If
            If (__QutPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutPrtLUGrid")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(__QutPrtLUGrid,String)
            End If
            If (__ProjSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjSLSCode")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(__ProjSLSCode,String)
            End If
            If (__ProjSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjSLSPct")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(__ProjSLSPct,String)
            End If
            If (__ProjSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjSalesDol")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(__ProjSalesDol,String)
            End If
            If (__ProjCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjCommDolPct")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(__ProjCommDolPct,String)
            End If
            If (__ProjView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjView")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(__ProjView,String)
            End If
            If (__ProjLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjLock")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(__ProjLock,String)
            End If
            If (__ProjAllowPrc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjAllowPrc")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(__ProjAllowPrc,String)
            End If
            If (__ProjAllowPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjAllowPO")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(__ProjAllowPO,String)
            End If
            If (__ProjAllowBill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjAllowBill")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(__ProjAllowBill,String)
            End If
            If (__ProjPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjPrtLUGrid")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(__ProjPrtLUGrid,String)
            End If
            If (__NamSLS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NamSLS")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(__NamSLS,String)
            End If
            If (__NamAddEdit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NamAddEdit")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(__NamAddEdit,String)
            End If
            If (__NamView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NamView")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(__NamView,String)
            End If
            If (__ReportOrd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReportOrd")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(__ReportOrd,String)
            End If
            If (__ReportInv Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReportInv")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(__ReportInv,String)
            End If
            If (__ReportQut Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReportQut")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(__ReportQut,String)
            End If
            If (__ReportProj Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReportProj")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(__ReportProj,String)
            End If
            If (__ReconcileInv Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReconcileInv")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(__ReconcileInv,String)
            End If
            If (__NamOnlyChgSLS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NamOnlyChgSLS")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(__NamOnlyChgSLS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __GroupID As String,  _
                    ByVal __GroupDescription As String,  _
                    ByVal __DateAdded As Global.System.Nullable(Of Date),  _
                    ByVal __LastSavedDate As Global.System.Nullable(Of Date),  _
                    ByVal __LastSaveBy As String,  _
                    ByVal __OrdSLSCode As String,  _
                    ByVal __OrdSLSPct As String,  _
                    ByVal __OrdSalesDol As String,  _
                    ByVal __OrdCommDolPct As String,  _
                    ByVal __OrderView As String,  _
                    ByVal __OrdLock As String,  _
                    ByVal __OrdPrtLUGrid As String,  _
                    ByVal __QutSLSCode As String,  _
                    ByVal __QutSLSPct As String,  _
                    ByVal __QutSalesDol As String,  _
                    ByVal __QutCommDolPct As String,  _
                    ByVal __QuoteView As String,  _
                    ByVal __QutLock As String,  _
                    ByVal __QutPrtLUGrid As String,  _
                    ByVal __ProjSLSCode As String,  _
                    ByVal __ProjSLSPct As String,  _
                    ByVal __ProjSalesDol As String,  _
                    ByVal __ProjCommDolPct As String,  _
                    ByVal __ProjView As String,  _
                    ByVal __ProjLock As String,  _
                    ByVal __ProjAllowPrc As String,  _
                    ByVal __ProjAllowPO As String,  _
                    ByVal __ProjAllowBill As String,  _
                    ByVal __ProjPrtLUGrid As String,  _
                    ByVal __NamSLS As String,  _
                    ByVal __NamAddEdit As String,  _
                    ByVal __NamView As String,  _
                    ByVal __ReportOrd As String,  _
                    ByVal __ReportInv As String,  _
                    ByVal __ReportQut As String,  _
                    ByVal __ReportProj As String,  _
                    ByVal __ReconcileInv As String,  _
                    ByVal __NamOnlyChgSLS As String,  _
                    ByVal __Original_GroupID As String,  _
                    ByVal __Original_DateAdded As Global.System.Nullable(Of Date),  _
                    ByVal __Original_LastSavedDate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_LastSaveBy As String,  _
                    ByVal __Original_OrdSLSCode As String,  _
                    ByVal __Original_OrdSLSPct As String,  _
                    ByVal __Original_OrdSalesDol As String,  _
                    ByVal __Original_OrdCommDolPct As String,  _
                    ByVal __Original_OrderView As String,  _
                    ByVal __Original_OrdLock As String,  _
                    ByVal __Original_OrdPrtLUGrid As String,  _
                    ByVal __Original_QutSLSCode As String,  _
                    ByVal __Original_QutSLSPct As String,  _
                    ByVal __Original_QutSalesDol As String,  _
                    ByVal __Original_QutCommDolPct As String,  _
                    ByVal __Original_QuoteView As String,  _
                    ByVal __Original_QutLock As String,  _
                    ByVal __Original_QutPrtLUGrid As String,  _
                    ByVal __Original_ProjSLSCode As String,  _
                    ByVal __Original_ProjSLSPct As String,  _
                    ByVal __Original_ProjSalesDol As String,  _
                    ByVal __Original_ProjCommDolPct As String,  _
                    ByVal __Original_ProjView As String,  _
                    ByVal __Original_ProjLock As String,  _
                    ByVal __Original_ProjAllowPrc As String,  _
                    ByVal __Original_ProjAllowPO As String,  _
                    ByVal __Original_ProjAllowBill As String,  _
                    ByVal __Original_ProjPrtLUGrid As String,  _
                    ByVal __Original_NamSLS As String,  _
                    ByVal __Original_NamAddEdit As String,  _
                    ByVal __Original_NamView As String,  _
                    ByVal __Original_ReportOrd As String,  _
                    ByVal __Original_ReportInv As String,  _
                    ByVal __Original_ReportQut As String,  _
                    ByVal __Original_ReportProj As String,  _
                    ByVal __Original_ReconcileInv As String,  _
                    ByVal __Original_NamOnlyChgSLS As String) As Integer
            If (__GroupID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__GroupID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__GroupID,String)
            End If
            If (__GroupDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__GroupDescription,String)
            End If
            If (__DateAdded.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__DateAdded.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (__LastSavedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__LastSavedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (__LastSaveBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__LastSaveBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__LastSaveBy,String)
            End If
            If (__OrdSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdSLSCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__OrdSLSCode,String)
            End If
            If (__OrdSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdSLSPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__OrdSLSPct,String)
            End If
            If (__OrdSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdSalesDol")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__OrdSalesDol,String)
            End If
            If (__OrdCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdCommDolPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__OrdCommDolPct,String)
            End If
            If (__OrderView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrderView")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__OrderView,String)
            End If
            If (__OrdLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdLock")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__OrdLock,String)
            End If
            If (__OrdPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__OrdPrtLUGrid")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__OrdPrtLUGrid,String)
            End If
            If (__QutSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutSLSCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__QutSLSCode,String)
            End If
            If (__QutSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutSLSPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__QutSLSPct,String)
            End If
            If (__QutSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutSalesDol")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(__QutSalesDol,String)
            End If
            If (__QutCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutCommDolPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__QutCommDolPct,String)
            End If
            If (__QuoteView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QuoteView")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__QuoteView,String)
            End If
            If (__QutLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutLock")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(__QutLock,String)
            End If
            If (__QutPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__QutPrtLUGrid")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(__QutPrtLUGrid,String)
            End If
            If (__ProjSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjSLSCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(__ProjSLSCode,String)
            End If
            If (__ProjSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjSLSPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(__ProjSLSPct,String)
            End If
            If (__ProjSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjSalesDol")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(__ProjSalesDol,String)
            End If
            If (__ProjCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjCommDolPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(__ProjCommDolPct,String)
            End If
            If (__ProjView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjView")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(__ProjView,String)
            End If
            If (__ProjLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjLock")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(__ProjLock,String)
            End If
            If (__ProjAllowPrc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjAllowPrc")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(__ProjAllowPrc,String)
            End If
            If (__ProjAllowPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjAllowPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(__ProjAllowPO,String)
            End If
            If (__ProjAllowBill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjAllowBill")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(__ProjAllowBill,String)
            End If
            If (__ProjPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ProjPrtLUGrid")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(__ProjPrtLUGrid,String)
            End If
            If (__NamSLS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NamSLS")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(__NamSLS,String)
            End If
            If (__NamAddEdit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NamAddEdit")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(__NamAddEdit,String)
            End If
            If (__NamView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NamView")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(__NamView,String)
            End If
            If (__ReportOrd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReportOrd")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(__ReportOrd,String)
            End If
            If (__ReportInv Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReportInv")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(__ReportInv,String)
            End If
            If (__ReportQut Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReportQut")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(__ReportQut,String)
            End If
            If (__ReportProj Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReportProj")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(__ReportProj,String)
            End If
            If (__ReconcileInv Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__ReconcileInv")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(__ReconcileInv,String)
            End If
            If (__NamOnlyChgSLS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__NamOnlyChgSLS")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(__NamOnlyChgSLS,String)
            End If
            If (__Original_GroupID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_GroupID")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(__Original_GroupID,String)
            End If
            If (__Original_DateAdded.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(__Original_DateAdded.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (__Original_LastSavedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(__Original_LastSavedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (__Original_LastSaveBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_LastSaveBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(__Original_LastSaveBy,String)
            End If
            If (__Original_OrdSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdSLSCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(__Original_OrdSLSCode,String)
            End If
            If (__Original_OrdSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdSLSPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(__Original_OrdSLSPct,String)
            End If
            If (__Original_OrdSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdSalesDol")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(__Original_OrdSalesDol,String)
            End If
            If (__Original_OrdCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdCommDolPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(__Original_OrdCommDolPct,String)
            End If
            If (__Original_OrderView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrderView")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(__Original_OrderView,String)
            End If
            If (__Original_OrdLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdLock")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(__Original_OrdLock,String)
            End If
            If (__Original_OrdPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_OrdPrtLUGrid")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(__Original_OrdPrtLUGrid,String)
            End If
            If (__Original_QutSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutSLSCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(__Original_QutSLSCode,String)
            End If
            If (__Original_QutSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutSLSPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(__Original_QutSLSPct,String)
            End If
            If (__Original_QutSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutSalesDol")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(__Original_QutSalesDol,String)
            End If
            If (__Original_QutCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutCommDolPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(__Original_QutCommDolPct,String)
            End If
            If (__Original_QuoteView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QuoteView")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(__Original_QuoteView,String)
            End If
            If (__Original_QutLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutLock")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(__Original_QutLock,String)
            End If
            If (__Original_QutPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_QutPrtLUGrid")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(__Original_QutPrtLUGrid,String)
            End If
            If (__Original_ProjSLSCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjSLSCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(__Original_ProjSLSCode,String)
            End If
            If (__Original_ProjSLSPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjSLSPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(__Original_ProjSLSPct,String)
            End If
            If (__Original_ProjSalesDol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjSalesDol")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(__Original_ProjSalesDol,String)
            End If
            If (__Original_ProjCommDolPct Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjCommDolPct")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(__Original_ProjCommDolPct,String)
            End If
            If (__Original_ProjView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjView")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(__Original_ProjView,String)
            End If
            If (__Original_ProjLock Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjLock")
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(__Original_ProjLock,String)
            End If
            If (__Original_ProjAllowPrc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjAllowPrc")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(__Original_ProjAllowPrc,String)
            End If
            If (__Original_ProjAllowPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjAllowPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(__Original_ProjAllowPO,String)
            End If
            If (__Original_ProjAllowBill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjAllowBill")
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(__Original_ProjAllowBill,String)
            End If
            If (__Original_ProjPrtLUGrid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ProjPrtLUGrid")
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(__Original_ProjPrtLUGrid,String)
            End If
            If (__Original_NamSLS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NamSLS")
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(__Original_NamSLS,String)
            End If
            If (__Original_NamAddEdit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NamAddEdit")
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(__Original_NamAddEdit,String)
            End If
            If (__Original_NamView Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NamView")
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(__Original_NamView,String)
            End If
            If (__Original_ReportOrd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReportOrd")
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(__Original_ReportOrd,String)
            End If
            If (__Original_ReportInv Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReportInv")
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(__Original_ReportInv,String)
            End If
            If (__Original_ReportQut Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReportQut")
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(__Original_ReportQut,String)
            End If
            If (__Original_ReportProj Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReportProj")
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(__Original_ReportProj,String)
            End If
            If (__Original_ReconcileInv Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_ReconcileInv")
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(__Original_ReconcileInv,String)
            End If
            If (__Original_NamOnlyChgSLS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_NamOnlyChgSLS")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(__Original_NamOnlyChgSLS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __GroupDescription As String,  _
                    ByVal __DateAdded As Global.System.Nullable(Of Date),  _
                    ByVal __LastSavedDate As Global.System.Nullable(Of Date),  _
                    ByVal __LastSaveBy As String,  _
                    ByVal __OrdSLSCode As String,  _
                    ByVal __OrdSLSPct As String,  _
                    ByVal __OrdSalesDol As String,  _
                    ByVal __OrdCommDolPct As String,  _
                    ByVal __OrderView As String,  _
                    ByVal __OrdLock As String,  _
                    ByVal __OrdPrtLUGrid As String,  _
                    ByVal __QutSLSCode As String,  _
                    ByVal __QutSLSPct As String,  _
                    ByVal __QutSalesDol As String,  _
                    ByVal __QutCommDolPct As String,  _
                    ByVal __QuoteView As String,  _
                    ByVal __QutLock As String,  _
                    ByVal __QutPrtLUGrid As String,  _
                    ByVal __ProjSLSCode As String,  _
                    ByVal __ProjSLSPct As String,  _
                    ByVal __ProjSalesDol As String,  _
                    ByVal __ProjCommDolPct As String,  _
                    ByVal __ProjView As String,  _
                    ByVal __ProjLock As String,  _
                    ByVal __ProjAllowPrc As String,  _
                    ByVal __ProjAllowPO As String,  _
                    ByVal __ProjAllowBill As String,  _
                    ByVal __ProjPrtLUGrid As String,  _
                    ByVal __NamSLS As String,  _
                    ByVal __NamAddEdit As String,  _
                    ByVal __NamView As String,  _
                    ByVal __ReportOrd As String,  _
                    ByVal __ReportInv As String,  _
                    ByVal __ReportQut As String,  _
                    ByVal __ReportProj As String,  _
                    ByVal __ReconcileInv As String,  _
                    ByVal __NamOnlyChgSLS As String,  _
                    ByVal __Original_GroupID As String,  _
                    ByVal __Original_DateAdded As Global.System.Nullable(Of Date),  _
                    ByVal __Original_LastSavedDate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_LastSaveBy As String,  _
                    ByVal __Original_OrdSLSCode As String,  _
                    ByVal __Original_OrdSLSPct As String,  _
                    ByVal __Original_OrdSalesDol As String,  _
                    ByVal __Original_OrdCommDolPct As String,  _
                    ByVal __Original_OrderView As String,  _
                    ByVal __Original_OrdLock As String,  _
                    ByVal __Original_OrdPrtLUGrid As String,  _
                    ByVal __Original_QutSLSCode As String,  _
                    ByVal __Original_QutSLSPct As String,  _
                    ByVal __Original_QutSalesDol As String,  _
                    ByVal __Original_QutCommDolPct As String,  _
                    ByVal __Original_QuoteView As String,  _
                    ByVal __Original_QutLock As String,  _
                    ByVal __Original_QutPrtLUGrid As String,  _
                    ByVal __Original_ProjSLSCode As String,  _
                    ByVal __Original_ProjSLSPct As String,  _
                    ByVal __Original_ProjSalesDol As String,  _
                    ByVal __Original_ProjCommDolPct As String,  _
                    ByVal __Original_ProjView As String,  _
                    ByVal __Original_ProjLock As String,  _
                    ByVal __Original_ProjAllowPrc As String,  _
                    ByVal __Original_ProjAllowPO As String,  _
                    ByVal __Original_ProjAllowBill As String,  _
                    ByVal __Original_ProjPrtLUGrid As String,  _
                    ByVal __Original_NamSLS As String,  _
                    ByVal __Original_NamAddEdit As String,  _
                    ByVal __Original_NamView As String,  _
                    ByVal __Original_ReportOrd As String,  _
                    ByVal __Original_ReportInv As String,  _
                    ByVal __Original_ReportQut As String,  _
                    ByVal __Original_ReportProj As String,  _
                    ByVal __Original_ReconcileInv As String,  _
                    ByVal __Original_NamOnlyChgSLS As String) As Integer
            Return Me.Update(__Original_GroupID, __GroupDescription, __DateAdded, __LastSavedDate, __LastSaveBy, __OrdSLSCode, __OrdSLSPct, __OrdSalesDol, __OrdCommDolPct, __OrderView, __OrdLock, __OrdPrtLUGrid, __QutSLSCode, __QutSLSPct, __QutSalesDol, __QutCommDolPct, __QuoteView, __QutLock, __QutPrtLUGrid, __ProjSLSCode, __ProjSLSPct, __ProjSalesDol, __ProjCommDolPct, __ProjView, __ProjLock, __ProjAllowPrc, __ProjAllowPO, __ProjAllowBill, __ProjPrtLUGrid, __NamSLS, __NamAddEdit, __NamView, __ReportOrd, __ReportInv, __ReportQut, __ReportProj, __ReconcileInv, __NamOnlyChgSLS, __Original_GroupID, __Original_DateAdded, __Original_LastSavedDate, __Original_LastSaveBy, __Original_OrdSLSCode, __Original_OrdSLSPct, __Original_OrdSalesDol, __Original_OrdCommDolPct, __Original_OrderView, __Original_OrdLock, __Original_OrdPrtLUGrid, __Original_QutSLSCode, __Original_QutSLSPct, __Original_QutSalesDol, __Original_QutCommDolPct, __Original_QuoteView, __Original_QutLock, __Original_QutPrtLUGrid, __Original_ProjSLSCode, __Original_ProjSLSPct, __Original_ProjSalesDol, __Original_ProjCommDolPct, __Original_ProjView, __Original_ProjLock, __Original_ProjAllowPrc, __Original_ProjAllowPO, __Original_ProjAllowBill, __Original_ProjPrtLUGrid, __Original_NamSLS, __Original_NamAddEdit, __Original_NamView, __Original_ReportOrd, __Original_ReportInv, __Original_ReportQut, __Original_ReportProj, __Original_ReconcileInv, __Original_NamOnlyChgSLS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class adminuserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "adminuser"
            tableMapping.ColumnMappings.Add("UserID", "UserID")
            tableMapping.ColumnMappings.Add("Admin", "Admin")
            tableMapping.ColumnMappings.Add("GroupID", "GroupID")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("PasswordExpires", "PasswordExpires")
            tableMapping.ColumnMappings.Add("PasswordDate", "PasswordDate")
            tableMapping.ColumnMappings.Add("AdminBranches", "AdminBranches")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `adminuser` WHERE ((`UserID` = @Original_UserID) AND ((@IsNull_Admin "& _ 
                "= 1 AND `Admin` IS NULL) OR (`Admin` = @Original_Admin)) AND ((@IsNull_GroupID ="& _ 
                " 1 AND `GroupID` IS NULL) OR (`GroupID` = @Original_GroupID)) AND (`Password` = "& _ 
                "@Original_Password) AND (`PasswordExpires` = @Original_PasswordExpires) AND ((@I"& _ 
                "sNull_PasswordDate = 1 AND `PasswordDate` IS NULL) OR (`PasswordDate` = @Origina"& _ 
                "l_PasswordDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UserID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UserID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_Admin"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Admin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Admin"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Admin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_GroupID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GroupID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PasswordExpires"
            param.DbType = Global.System.Data.DbType.[Byte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UByte
            param.IsNullable = true
            param.SourceColumn = "PasswordExpires"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_PasswordDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "PasswordDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PasswordDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PasswordDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `adminuser` (`UserID`, `Admin`, `GroupID`, `Password`, `PasswordExpir"& _ 
                "es`, `PasswordDate`, `AdminBranches`) VALUES (@UserID, @Admin, @GroupID, @Passwo"& _ 
                "rd, @PasswordExpires, @PasswordDate, @AdminBranches)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UserID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UserID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Admin"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Admin"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GroupID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PasswordExpires"
            param.DbType = Global.System.Data.DbType.[Byte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UByte
            param.IsNullable = true
            param.SourceColumn = "PasswordExpires"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PasswordDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PasswordDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@AdminBranches"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "AdminBranches"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `adminuser` SET `UserID` = @UserID, `Admin` = @Admin, `GroupID` = @GroupID"& _ 
                ", `Password` = @Password, `PasswordExpires` = @PasswordExpires, `PasswordDate` ="& _ 
                " @PasswordDate, `AdminBranches` = @AdminBranches WHERE ((`UserID` = @Original_Us"& _ 
                "erID) AND ((@IsNull_Admin = 1 AND `Admin` IS NULL) OR (`Admin` = @Original_Admin"& _ 
                ")) AND ((@IsNull_GroupID = 1 AND `GroupID` IS NULL) OR (`GroupID` = @Original_Gr"& _ 
                "oupID)) AND (`Password` = @Original_Password) AND (`PasswordExpires` = @Original"& _ 
                "_PasswordExpires) AND ((@IsNull_PasswordDate = 1 AND `PasswordDate` IS NULL) OR "& _ 
                "(`PasswordDate` = @Original_PasswordDate)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UserID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UserID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Admin"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Admin"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GroupID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PasswordExpires"
            param.DbType = Global.System.Data.DbType.[Byte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UByte
            param.IsNullable = true
            param.SourceColumn = "PasswordExpires"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PasswordDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PasswordDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@AdminBranches"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "AdminBranches"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UserID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UserID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_Admin"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Admin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Admin"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Admin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_GroupID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GroupID"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GroupID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Password"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PasswordExpires"
            param.DbType = Global.System.Data.DbType.[Byte]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UByte
            param.IsNullable = true
            param.SourceColumn = "PasswordExpires"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_PasswordDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "PasswordDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PasswordDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PasswordDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT UserID, Admin, GroupID, Password, PasswordExpires, PasswordDate, AdminBran"& _ 
                "ches"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     adminuser"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.adminuserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.adminuserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.adminuserDataTable = New dsSaw8.adminuserDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.adminuserDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "adminuser")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal __Original_UserID As String, ByVal __Original_Admin As String, ByVal __Original_GroupID As String, ByVal __Original_Password As String, ByVal __Original_PasswordExpires As Byte, ByVal __Original_PasswordDate As Global.System.Nullable(Of Date)) As Integer
            If (__Original_UserID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_UserID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_UserID,String)
            End If
            If (__Original_Admin Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_Admin,String)
            End If
            If (__Original_GroupID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_GroupID,String)
            End If
            If (__Original_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Password")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(__Original_Password,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(__Original_PasswordExpires,Byte)
            If (__Original_PasswordDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_PasswordDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __UserID As String, ByVal __Admin As String, ByVal __GroupID As String, ByVal __Password As String, ByVal __PasswordExpires As Byte, ByVal __PasswordDate As Global.System.Nullable(Of Date), ByVal __AdminBranches As String) As Integer
            If (__UserID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__UserID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__UserID,String)
            End If
            If (__Admin Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__Admin,String)
            End If
            If (__GroupID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__GroupID,String)
            End If
            If (__Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Password")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__Password,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(__PasswordExpires,Byte)
            If (__PasswordDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__PasswordDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (__AdminBranches Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__AdminBranches,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal __UserID As String, ByVal __Admin As String, ByVal __GroupID As String, ByVal __Password As String, ByVal __PasswordExpires As Byte, ByVal __PasswordDate As Global.System.Nullable(Of Date), ByVal __AdminBranches As String, ByVal __Original_UserID As String, ByVal __Original_Admin As String, ByVal __Original_GroupID As String, ByVal __Original_Password As String, ByVal __Original_PasswordExpires As Byte, ByVal __Original_PasswordDate As Global.System.Nullable(Of Date)) As Integer
            If (__UserID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__UserID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__UserID,String)
            End If
            If (__Admin Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__Admin,String)
            End If
            If (__GroupID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__GroupID,String)
            End If
            If (__Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Password")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__Password,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__PasswordExpires,Byte)
            If (__PasswordDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__PasswordDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (__AdminBranches Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__AdminBranches,String)
            End If
            If (__Original_UserID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_UserID")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__Original_UserID,String)
            End If
            If (__Original_Admin Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__Original_Admin,String)
            End If
            If (__Original_GroupID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__Original_GroupID,String)
            End If
            If (__Original_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Password")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__Original_Password,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__Original_PasswordExpires,Byte)
            If (__Original_PasswordDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__Original_PasswordDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal __Admin As String, ByVal __GroupID As String, ByVal __Password As String, ByVal __PasswordExpires As Byte, ByVal __PasswordDate As Global.System.Nullable(Of Date), ByVal __AdminBranches As String, ByVal __Original_UserID As String, ByVal __Original_Admin As String, ByVal __Original_GroupID As String, ByVal __Original_Password As String, ByVal __Original_PasswordExpires As Byte, ByVal __Original_PasswordDate As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(__Original_UserID, __Admin, __GroupID, __Password, __PasswordExpires, __PasswordDate, __AdminBranches, __Original_UserID, __Original_Admin, __Original_GroupID, __Original_Password, __Original_PasswordExpires, __Original_PasswordDate)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class namecontactTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "namecontact"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("Code", "Code")
            tableMapping.ColumnMappings.Add("Category", "Category")
            tableMapping.ColumnMappings.Add("EmpName", "EmpName")
            tableMapping.ColumnMappings.Add("JobDesc", "JobDesc")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Dear", "Dear")
            tableMapping.ColumnMappings.Add("EmpCode", "EmpCode")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("Ext", "Ext")
            tableMapping.ColumnMappings.Add("Active", "Active")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `namecontact` WHERE ((`id` = @Original_id) AND (`Code` = @Original_Co"& _ 
                "de) AND (`Category` = @Original_Category) AND (`EmpName` = @Original_EmpName) AN"& _ 
                "D (`JobDesc` = @Original_JobDesc) AND (`Phone` = @Original_Phone) AND (`Fax` = @"& _ 
                "Original_Fax) AND (`Email` = @Original_Email) AND (`Dear` = @Original_Dear) AND "& _ 
                "(`EmpCode` = @Original_EmpCode) AND (`BranchCode` = @Original_BranchCode) AND (`"& _ 
                "CellPhone` = @Original_CellPhone) AND (`Ext` = @Original_Ext) AND (`Active` = @O"& _ 
                "riginal_Active))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Code"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Category"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Category"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EmpName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmpName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_JobDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "JobDesc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Phone"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Phone"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Fax"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fax"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Dear"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Dear"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EmpCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmpCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_CellPhone"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CellPhone"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Ext"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ext"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Active"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Active"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `namecontact` (`Code`, `Category`, `EmpName`, `JobDesc`, `Phone`, `Fa"& _ 
                "x`, `Email`, `Dear`, `EmpCode`, `BranchCode`, `CellPhone`, `Ext`, `Active`) VALU"& _ 
                "ES (@Code, @Category, @EmpName, @JobDesc, @Phone, @Fax, @Email, @Dear, @EmpCode,"& _ 
                " @BranchCode, @CellPhone, @Ext, @Active)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Code"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Category"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Category"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EmpName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmpName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@JobDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "JobDesc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Phone"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Phone"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Fax"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fax"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Dear"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Dear"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EmpCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmpCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@CellPhone"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CellPhone"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Ext"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ext"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Active"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Active"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `namecontact` SET `Code` = @Code, `Category` = @Category, `EmpName` = @Emp"& _ 
                "Name, `JobDesc` = @JobDesc, `Phone` = @Phone, `Fax` = @Fax, `Email` = @Email, `D"& _ 
                "ear` = @Dear, `EmpCode` = @EmpCode, `BranchCode` = @BranchCode, `CellPhone` = @C"& _ 
                "ellPhone, `Ext` = @Ext, `Active` = @Active WHERE ((`id` = @Original_id) AND (`Co"& _ 
                "de` = @Original_Code) AND (`Category` = @Original_Category) AND (`EmpName` = @Or"& _ 
                "iginal_EmpName) AND (`JobDesc` = @Original_JobDesc) AND (`Phone` = @Original_Pho"& _ 
                "ne) AND (`Fax` = @Original_Fax) AND (`Email` = @Original_Email) AND (`Dear` = @O"& _ 
                "riginal_Dear) AND (`EmpCode` = @Original_EmpCode) AND (`BranchCode` = @Original_"& _ 
                "BranchCode) AND (`CellPhone` = @Original_CellPhone) AND (`Ext` = @Original_Ext) "& _ 
                "AND (`Active` = @Original_Active))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Code"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Category"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Category"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EmpName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmpName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@JobDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "JobDesc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Phone"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Phone"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Fax"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fax"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Dear"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Dear"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@EmpCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmpCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@CellPhone"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CellPhone"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Ext"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ext"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Active"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Active"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Code"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Category"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Category"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EmpName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmpName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_JobDesc"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "JobDesc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Phone"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Phone"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Fax"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fax"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Dear"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Dear"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_EmpCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmpCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_BranchCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BranchCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_CellPhone"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CellPhone"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Ext"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ext"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_Active"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Active"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from namecontact"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.namecontactDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.namecontactDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.namecontactDataTable = New dsSaw8.namecontactDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSaw8.namecontactDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSaw8) As Integer
            Return Me.Adapter.Update(dataSet, "namecontact")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal __Original_id As UInteger, ByVal __Original_Code As String, ByVal __Original_Category As String, ByVal __Original_EmpName As String, ByVal __Original_JobDesc As String, ByVal __Original_Phone As String, ByVal __Original_Fax As String, ByVal __Original_Email As String, ByVal __Original_Dear As String, ByVal __Original_EmpCode As String, ByVal __Original_BranchCode As String, ByVal __Original_CellPhone As String, ByVal __Original_Ext As String, ByVal __Original_Active As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_id,UInteger)
            If (__Original_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Code")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(__Original_Code,String)
            End If
            If (__Original_Category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Category")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_Category,String)
            End If
            If (__Original_EmpName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_EmpName")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(__Original_EmpName,String)
            End If
            If (__Original_JobDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_JobDesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_JobDesc,String)
            End If
            If (__Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(__Original_Phone,String)
            End If
            If (__Original_Fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Fax")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(__Original_Fax,String)
            End If
            If (__Original_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Email")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(__Original_Email,String)
            End If
            If (__Original_Dear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Dear")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_Dear,String)
            End If
            If (__Original_EmpCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_EmpCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(__Original_EmpCode,String)
            End If
            If (__Original_BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_BranchCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(__Original_BranchCode,String)
            End If
            If (__Original_CellPhone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_CellPhone")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(__Original_CellPhone,String)
            End If
            If (__Original_Ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Ext")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(__Original_Ext,String)
            End If
            If (__Original_Active Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Active")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(__Original_Active,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __Code As String, ByVal __Category As String, ByVal __EmpName As String, ByVal __JobDesc As String, ByVal __Phone As String, ByVal __Fax As String, ByVal __Email As String, ByVal __Dear As String, ByVal __EmpCode As String, ByVal __BranchCode As String, ByVal __CellPhone As String, ByVal __Ext As String, ByVal __Active As String) As Integer
            If (__Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Code")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__Code,String)
            End If
            If (__Category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Category")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__Category,String)
            End If
            If (__EmpName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__EmpName")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__EmpName,String)
            End If
            If (__JobDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__JobDesc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__JobDesc,String)
            End If
            If (__Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Phone")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(__Phone,String)
            End If
            If (__Fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Fax")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__Fax,String)
            End If
            If (__Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Email")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__Email,String)
            End If
            If (__Dear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Dear")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(__Dear,String)
            End If
            If (__EmpCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__EmpCode")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(__EmpCode,String)
            End If
            If (__BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BranchCode")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(__BranchCode,String)
            End If
            If (__CellPhone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__CellPhone")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(__CellPhone,String)
            End If
            If (__Ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Ext")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(__Ext,String)
            End If
            If (__Active Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Active")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(__Active,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __Code As String,  _
                    ByVal __Category As String,  _
                    ByVal __EmpName As String,  _
                    ByVal __JobDesc As String,  _
                    ByVal __Phone As String,  _
                    ByVal __Fax As String,  _
                    ByVal __Email As String,  _
                    ByVal __Dear As String,  _
                    ByVal __EmpCode As String,  _
                    ByVal __BranchCode As String,  _
                    ByVal __CellPhone As String,  _
                    ByVal __Ext As String,  _
                    ByVal __Active As String,  _
                    ByVal __Original_id As UInteger,  _
                    ByVal __Original_Code As String,  _
                    ByVal __Original_Category As String,  _
                    ByVal __Original_EmpName As String,  _
                    ByVal __Original_JobDesc As String,  _
                    ByVal __Original_Phone As String,  _
                    ByVal __Original_Fax As String,  _
                    ByVal __Original_Email As String,  _
                    ByVal __Original_Dear As String,  _
                    ByVal __Original_EmpCode As String,  _
                    ByVal __Original_BranchCode As String,  _
                    ByVal __Original_CellPhone As String,  _
                    ByVal __Original_Ext As String,  _
                    ByVal __Original_Active As String) As Integer
            If (__Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__Code,String)
            End If
            If (__Category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Category")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__Category,String)
            End If
            If (__EmpName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__EmpName")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__EmpName,String)
            End If
            If (__JobDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__JobDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__JobDesc,String)
            End If
            If (__Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__Phone,String)
            End If
            If (__Fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Fax")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__Fax,String)
            End If
            If (__Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__Email,String)
            End If
            If (__Dear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Dear")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__Dear,String)
            End If
            If (__EmpCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__EmpCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__EmpCode,String)
            End If
            If (__BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__BranchCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__BranchCode,String)
            End If
            If (__CellPhone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__CellPhone")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__CellPhone,String)
            End If
            If (__Ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Ext")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__Ext,String)
            End If
            If (__Active Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Active")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__Active,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__Original_id,UInteger)
            If (__Original_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(__Original_Code,String)
            End If
            If (__Original_Category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Category")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__Original_Category,String)
            End If
            If (__Original_EmpName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_EmpName")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__Original_EmpName,String)
            End If
            If (__Original_JobDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_JobDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(__Original_JobDesc,String)
            End If
            If (__Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(__Original_Phone,String)
            End If
            If (__Original_Fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Fax")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(__Original_Fax,String)
            End If
            If (__Original_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(__Original_Email,String)
            End If
            If (__Original_Dear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Dear")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(__Original_Dear,String)
            End If
            If (__Original_EmpCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_EmpCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(__Original_EmpCode,String)
            End If
            If (__Original_BranchCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_BranchCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(__Original_BranchCode,String)
            End If
            If (__Original_CellPhone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_CellPhone")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(__Original_CellPhone,String)
            End If
            If (__Original_Ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Ext")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(__Original_Ext,String)
            End If
            If (__Original_Active Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_Active")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(__Original_Active,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QuoteRealNDULTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "QuoteRealNDUL"
            tableMapping.ColumnMappings.Add("BUsinessType", "BUsinessType")
            tableMapping.ColumnMappings.Add("ProjectCustID", "ProjectCustID")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("QuoteCode", "QuoteCode")
            tableMapping.ColumnMappings.Add("NCode", "NCode")
            tableMapping.ColumnMappings.Add("FirmName", "FirmName")
            tableMapping.ColumnMappings.Add("ContactName", "ContactName")
            tableMapping.ColumnMappings.Add("SLSCode", "SLSCode")
            tableMapping.ColumnMappings.Add("Got", "Got")
            tableMapping.ColumnMappings.Add("Typec", "Typec")
            tableMapping.ColumnMappings.Add("MFGQuoteNumber", "MFGQuoteNumber")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Sell", "Sell")
            tableMapping.ColumnMappings.Add("Comm", "Comm")
            tableMapping.ColumnMappings.Add("Overage", "Overage")
            tableMapping.ColumnMappings.Add("QuoteToDate", "QuoteToDate")
            tableMapping.ColumnMappings.Add("OrdDate", "OrdDate")
            tableMapping.ColumnMappings.Add("NotGot", "NotGot")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("SPANumber", "SPANumber")
            tableMapping.ColumnMappings.Add("SpecCross", "SpecCross")
            tableMapping.ColumnMappings.Add("LotUnit", "LotUnit")
            tableMapping.ColumnMappings.Add("LPCost", "LPCost")
            tableMapping.ColumnMappings.Add("LPSell", "LPSell")
            tableMapping.ColumnMappings.Add("LPComm", "LPComm")
            tableMapping.ColumnMappings.Add("LampsIncl", "LampsIncl")
            tableMapping.ColumnMappings.Add("Terms", "Terms")
            tableMapping.ColumnMappings.Add("FOB", "FOB")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            tableMapping.ColumnMappings.Add("BranchCode", "BranchCode")
            tableMapping.ColumnMappings.Add("LeadTime", "LeadTime")
            tableMapping.ColumnMappings.Add("LastChgDate", "LastChgDate")
            tableMapping.ColumnMappings.Add("LastChgBy", "LastChgBy")
            tableMapping.ColumnMappings.Add("Requested", "Requested")
            tableMapping.ColumnMappings.Add("FileName", "FileName")
            tableMapping.ColumnMappings.Add("SellQ", "SellQ")
            tableMapping.ColumnMappings.Add("CostQ", "CostQ")
            tableMapping.ColumnMappings.Add("CommQ", "CommQ")
            tableMapping.ColumnMappings.Add("JobName", "JobName")
            tableMapping.ColumnMappings.Add("MarketSegment", "MarketSegment")
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate")
            tableMapping.ColumnMappings.Add("BidDate", "BidDate")
            tableMapping.ColumnMappings.Add("SLSQ", "SLSQ")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("RetrCode", "RetrCode")
            tableMapping.ColumnMappings.Add("SelectCode", "SelectCode")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("lastChgBy1", "lastChgBy1")
            tableMapping.ColumnMappings.Add("CSR", "CSR")
            tableMapping.ColumnMappings.Add("LotUnit1", "LotUnit1")
            tableMapping.ColumnMappings.Add("StockJob", "StockJob")
            tableMapping.ColumnMappings.Add("TypeOfJob", "TypeOfJob")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NameDetail.BUsinessType, projectcust.*, quote.Sell as SellQ, quote.Cost as"& _ 
                " CostQ, quote.Comm as CommQ, quote.JobName, quote.MarketSegment, quote.EntryDate"& _ 
                ", quote.BidDate, quote.SLSQ, quote.Status, quote.RetrCode, quote.SelectCode, quo"& _ 
                "te.City, quote.State, quote.lastChgBy, quote.CSR, quote.LotUnit, quote.StockJob,"& _ 
                " quote.TypeOfJob FROM Quote INNER JOIN projectcust ON Quote.QuoteID = projectcus"& _ 
                "t.QuoteID INNER JOIN namedetail ON namedetail.code  = projectcust.ncode   "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.QuoteRealNDULDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.QuoteRealNDULDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.QuoteRealNDULDataTable = New dsSaw8.QuoteRealNDULDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SpecRegFollowUpTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SpecRegFollowUp"
            tableMapping.ColumnMappings.Add("LineID", "LineID")
            tableMapping.ColumnMappings.Add("QuoteID", "QuoteID")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("MFG", "MFG")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("QuoteCode", "QuoteCode")
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("JobName", "JobName")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Comm", "Comm")
            tableMapping.ColumnMappings.Add("Sell", "Sell")
            tableMapping.ColumnMappings.Add("Paid", "Paid")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("SLSQ", "SLSQ")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.VQRT.My.MySettings.Default.saw8ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        QL.LineID, QL.QuoteID, QL.Qty, QL.Type, QL.MFG, QL.Description, Q.Q"& _ 
                "uoteCode, Q.EntryDate, Q.SLSQ, Q.City, Q.State, Q.JobName, Q.Status, QL.Comm, QL"& _ 
                ".Sell, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         QL.Paid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            quote Q INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                        quotelines QL ON Q.QuoteID = QL.QuoteID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY QL.MFG"& _ 
                ", QL.Description, Q.EntryDate DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSaw8.SpecRegFollowUpDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSaw8.SpecRegFollowUpDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSaw8.SpecRegFollowUpDataTable = New dsSaw8.SpecRegFollowUpDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _mfglookup2TableAdapter As mfglookup2TableAdapter
        
        Private _projectTableAdapter As projectTableAdapter
        
        Private _qutlinepriceTableAdapter As qutlinepriceTableAdapter
        
        Private _qutnotesTableAdapter As qutnotesTableAdapter
        
        Private _qutslssplitTableAdapter As qutslssplitTableAdapter
        
        Private _sls999TableAdapter As sls999TableAdapter
        
        Private _quotelinesTableAdapter As quotelinesTableAdapter
        
        Private _namedefaultsTableAdapter As namedefaultsTableAdapter
        
        Private _admingroupTableAdapter As admingroupTableAdapter
        
        Private _adminuserTableAdapter As adminuserTableAdapter
        
        Private _namecontactTableAdapter As namecontactTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property mfglookup2TableAdapter() As mfglookup2TableAdapter
            Get
                Return Me._mfglookup2TableAdapter
            End Get
            Set
                Me._mfglookup2TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property projectTableAdapter() As projectTableAdapter
            Get
                Return Me._projectTableAdapter
            End Get
            Set
                Me._projectTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property qutlinepriceTableAdapter() As qutlinepriceTableAdapter
            Get
                Return Me._qutlinepriceTableAdapter
            End Get
            Set
                Me._qutlinepriceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property qutnotesTableAdapter() As qutnotesTableAdapter
            Get
                Return Me._qutnotesTableAdapter
            End Get
            Set
                Me._qutnotesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property qutslssplitTableAdapter() As qutslssplitTableAdapter
            Get
                Return Me._qutslssplitTableAdapter
            End Get
            Set
                Me._qutslssplitTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property sls999TableAdapter() As sls999TableAdapter
            Get
                Return Me._sls999TableAdapter
            End Get
            Set
                Me._sls999TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property quotelinesTableAdapter() As quotelinesTableAdapter
            Get
                Return Me._quotelinesTableAdapter
            End Get
            Set
                Me._quotelinesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property namedefaultsTableAdapter() As namedefaultsTableAdapter
            Get
                Return Me._namedefaultsTableAdapter
            End Get
            Set
                Me._namedefaultsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property admingroupTableAdapter() As admingroupTableAdapter
            Get
                Return Me._admingroupTableAdapter
            End Get
            Set
                Me._admingroupTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property adminuserTableAdapter() As adminuserTableAdapter
            Get
                Return Me._adminuserTableAdapter
            End Get
            Set
                Me._adminuserTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property namecontactTableAdapter() As namecontactTableAdapter
            Get
                Return Me._namecontactTableAdapter
            End Get
            Set
                Me._namecontactTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._mfglookup2TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mfglookup2TableAdapter.Connection) Is Nothing)) Then
                    Return Me._mfglookup2TableAdapter.Connection
                End If
                If ((Not (Me._projectTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._projectTableAdapter.Connection) Is Nothing)) Then
                    Return Me._projectTableAdapter.Connection
                End If
                If ((Not (Me._qutlinepriceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._qutlinepriceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._qutlinepriceTableAdapter.Connection
                End If
                If ((Not (Me._qutnotesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._qutnotesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._qutnotesTableAdapter.Connection
                End If
                If ((Not (Me._qutslssplitTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._qutslssplitTableAdapter.Connection) Is Nothing)) Then
                    Return Me._qutslssplitTableAdapter.Connection
                End If
                If ((Not (Me._sls999TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sls999TableAdapter.Connection) Is Nothing)) Then
                    Return Me._sls999TableAdapter.Connection
                End If
                If ((Not (Me._quotelinesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._quotelinesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._quotelinesTableAdapter.Connection
                End If
                If ((Not (Me._namedefaultsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._namedefaultsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._namedefaultsTableAdapter.Connection
                End If
                If ((Not (Me._admingroupTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._admingroupTableAdapter.Connection) Is Nothing)) Then
                    Return Me._admingroupTableAdapter.Connection
                End If
                If ((Not (Me._adminuserTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._adminuserTableAdapter.Connection) Is Nothing)) Then
                    Return Me._adminuserTableAdapter.Connection
                End If
                If ((Not (Me._namecontactTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._namecontactTableAdapter.Connection) Is Nothing)) Then
                    Return Me._namecontactTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._mfglookup2TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._projectTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._qutlinepriceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._qutnotesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._qutslssplitTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sls999TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._quotelinesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._namedefaultsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._admingroupTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._adminuserTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._namecontactTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsSaw8, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._quotelinesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.quotelines.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._quotelinesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._admingroupTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.admingroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._admingroupTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._namecontactTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.namecontact.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._namecontactTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._namedefaultsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.namedefaults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._namedefaultsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mfglookup2TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.mfglookup2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mfglookup2TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._adminuserTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.adminuser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._adminuserTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._qutslssplitTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.qutslssplit.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._qutslssplitTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._qutnotesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.qutnotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._qutnotesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._qutlinepriceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.qutlineprice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._qutlinepriceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sls999TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.sls999.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sls999TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._projectTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.project.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._projectTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsSaw8, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._quotelinesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.quotelines.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._quotelinesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._admingroupTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.admingroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._admingroupTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._namecontactTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.namecontact.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._namecontactTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._namedefaultsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.namedefaults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._namedefaultsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mfglookup2TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.mfglookup2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mfglookup2TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._adminuserTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.adminuser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._adminuserTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._qutslssplitTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.qutslssplit.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._qutslssplitTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._qutnotesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.qutnotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._qutnotesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._qutlinepriceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.qutlineprice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._qutlinepriceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sls999TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.sls999.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sls999TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._projectTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.project.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._projectTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsSaw8, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._projectTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.project.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._projectTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sls999TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.sls999.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sls999TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._qutlinepriceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.qutlineprice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._qutlinepriceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._qutnotesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.qutnotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._qutnotesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._qutslssplitTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.qutslssplit.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._qutslssplitTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._adminuserTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.adminuser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._adminuserTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mfglookup2TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.mfglookup2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mfglookup2TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._namedefaultsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.namedefaults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._namedefaultsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._namecontactTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.namecontact.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._namecontactTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._admingroupTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.admingroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._admingroupTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._quotelinesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.quotelines.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._quotelinesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsSaw8) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._mfglookup2TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mfglookup2TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._projectTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._projectTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._qutlinepriceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._qutlinepriceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._qutnotesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._qutnotesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._qutslssplitTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._qutslssplitTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sls999TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sls999TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._quotelinesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._quotelinesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._namedefaultsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._namedefaultsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._admingroupTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._admingroupTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._adminuserTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._adminuserTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._namecontactTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._namecontactTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._mfglookup2TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mfglookup2TableAdapter, Me._mfglookup2TableAdapter.Connection)
                    Me._mfglookup2TableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._mfglookup2TableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._mfglookup2TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mfglookup2TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mfglookup2TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._projectTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._projectTableAdapter, Me._projectTableAdapter.Connection)
                    Me._projectTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._projectTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._projectTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._projectTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._projectTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._qutlinepriceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._qutlinepriceTableAdapter, Me._qutlinepriceTableAdapter.Connection)
                    Me._qutlinepriceTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._qutlinepriceTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._qutlinepriceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._qutlinepriceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._qutlinepriceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._qutnotesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._qutnotesTableAdapter, Me._qutnotesTableAdapter.Connection)
                    Me._qutnotesTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._qutnotesTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._qutnotesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._qutnotesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._qutnotesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._qutslssplitTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._qutslssplitTableAdapter, Me._qutslssplitTableAdapter.Connection)
                    Me._qutslssplitTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._qutslssplitTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._qutslssplitTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._qutslssplitTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._qutslssplitTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sls999TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sls999TableAdapter, Me._sls999TableAdapter.Connection)
                    Me._sls999TableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._sls999TableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._sls999TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sls999TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sls999TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._quotelinesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._quotelinesTableAdapter, Me._quotelinesTableAdapter.Connection)
                    Me._quotelinesTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._quotelinesTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._quotelinesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._quotelinesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._quotelinesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._namedefaultsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._namedefaultsTableAdapter, Me._namedefaultsTableAdapter.Connection)
                    Me._namedefaultsTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._namedefaultsTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._namedefaultsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._namedefaultsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._namedefaultsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._admingroupTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._admingroupTableAdapter, Me._admingroupTableAdapter.Connection)
                    Me._admingroupTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._admingroupTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._admingroupTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._admingroupTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._admingroupTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._adminuserTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._adminuserTableAdapter, Me._adminuserTableAdapter.Connection)
                    Me._adminuserTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._adminuserTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._adminuserTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._adminuserTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._adminuserTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._namecontactTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._namecontactTableAdapter, Me._namecontactTableAdapter.Connection)
                    Me._namecontactTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._namecontactTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._namecontactTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._namecontactTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._namecontactTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._mfglookup2TableAdapter) Is Nothing) Then
                    Me._mfglookup2TableAdapter.Connection = CType(revertConnections(Me._mfglookup2TableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._mfglookup2TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._projectTableAdapter) Is Nothing) Then
                    Me._projectTableAdapter.Connection = CType(revertConnections(Me._projectTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._projectTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._qutlinepriceTableAdapter) Is Nothing) Then
                    Me._qutlinepriceTableAdapter.Connection = CType(revertConnections(Me._qutlinepriceTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._qutlinepriceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._qutnotesTableAdapter) Is Nothing) Then
                    Me._qutnotesTableAdapter.Connection = CType(revertConnections(Me._qutnotesTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._qutnotesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._qutslssplitTableAdapter) Is Nothing) Then
                    Me._qutslssplitTableAdapter.Connection = CType(revertConnections(Me._qutslssplitTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._qutslssplitTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sls999TableAdapter) Is Nothing) Then
                    Me._sls999TableAdapter.Connection = CType(revertConnections(Me._sls999TableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._sls999TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._quotelinesTableAdapter) Is Nothing) Then
                    Me._quotelinesTableAdapter.Connection = CType(revertConnections(Me._quotelinesTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._quotelinesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._namedefaultsTableAdapter) Is Nothing) Then
                    Me._namedefaultsTableAdapter.Connection = CType(revertConnections(Me._namedefaultsTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._namedefaultsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._admingroupTableAdapter) Is Nothing) Then
                    Me._admingroupTableAdapter.Connection = CType(revertConnections(Me._admingroupTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._admingroupTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._adminuserTableAdapter) Is Nothing) Then
                    Me._adminuserTableAdapter.Connection = CType(revertConnections(Me._adminuserTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._adminuserTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._namecontactTableAdapter) Is Nothing) Then
                    Me._namecontactTableAdapter.Connection = CType(revertConnections(Me._namecontactTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._namecontactTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
